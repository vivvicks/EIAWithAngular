//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EIAwithAngular.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EIA_DEVEntities : DbContext
    {
        public EIA_DEVEntities()
            : base("name=EIA_DEVEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ACC_Invoice> ACC_Invoice { get; set; }
        public virtual DbSet<ACC_InvoiceDtl> ACC_InvoiceDtl { get; set; }
        public virtual DbSet<ACC_Receipt> ACC_Receipt { get; set; }
        public virtual DbSet<ACC_ReceiptChrg> ACC_ReceiptChrg { get; set; }
        public virtual DbSet<ACC_ReceiptDtl> ACC_ReceiptDtl { get; set; }
        public virtual DbSet<AUC_AuctionList> AUC_AuctionList { get; set; }
        public virtual DbSet<AUC_AuctionListDtl> AUC_AuctionListDtl { get; set; }
        public virtual DbSet<AUC_AuctionSaleLot> AUC_AuctionSaleLot { get; set; }
        public virtual DbSet<AUC_BOE> AUC_BOE { get; set; }
        public virtual DbSet<AUC_BOEGroup> AUC_BOEGroup { get; set; }
        public virtual DbSet<AUC_SaleList> AUC_SaleList { get; set; }
        public virtual DbSet<EXP_CSB1> EXP_CSB1 { get; set; }
        public virtual DbSet<EXP_CSB1Dtl> EXP_CSB1Dtl { get; set; }
        public virtual DbSet<EXP_CSB1WeightAcceptance> EXP_CSB1WeightAcceptance { get; set; }
        public virtual DbSet<EXP_CSB1WeightAcceptanceDtl> EXP_CSB1WeightAcceptanceDtl { get; set; }
        public virtual DbSet<EXP_EntryGatePass> EXP_EntryGatePass { get; set; }
        public virtual DbSet<EXP_OFLGatePass> EXP_OFLGatePass { get; set; }
        public virtual DbSet<EXP_ReleasePass> EXP_ReleasePass { get; set; }
        public virtual DbSet<GEN_LOV> GEN_LOV { get; set; }
        public virtual DbSet<IMP_Form1> IMP_Form1 { get; set; }
        public virtual DbSet<IMP_Form1Dtl> IMP_Form1Dtl { get; set; }
        public virtual DbSet<IMP_Form2> IMP_Form2 { get; set; }
        public virtual DbSet<IMP_Form2Dtl> IMP_Form2Dtl { get; set; }
        public virtual DbSet<IMP_GatePass> IMP_GatePass { get; set; }
        public virtual DbSet<IMP_GatePassDtl> IMP_GatePassDtl { get; set; }
        public virtual DbSet<IMP_OHForwarding> IMP_OHForwarding { get; set; }
        public virtual DbSet<IMP_OHGPGatePass> IMP_OHGPGatePass { get; set; }
        public virtual DbSet<IMP_OnHoldMemo> IMP_OnHoldMemo { get; set; }
        public virtual DbSet<M_Airline_Dtl> M_Airline_Dtl { get; set; }
        public virtual DbSet<M_Airline_MST> M_Airline_MST { get; set; }
        public virtual DbSet<M_Airport_MST> M_Airport_MST { get; set; }
        public virtual DbSet<M_CheckList_MST> M_CheckList_MST { get; set; }
        public virtual DbSet<M_CommonMaster_MST> M_CommonMaster_MST { get; set; }
        public virtual DbSet<M_Country_MST> M_Country_MST { get; set; }
        public virtual DbSet<M_Courier_MST> M_Courier_MST { get; set; }
        public virtual DbSet<M_CourierEmp_MST> M_CourierEmp_MST { get; set; }
        public virtual DbSet<M_Currency_MST> M_Currency_MST { get; set; }
        public virtual DbSet<M_DelayedChrg_MST> M_DelayedChrg_MST { get; set; }
        public virtual DbSet<M_Flightmaster_MST> M_Flightmaster_MST { get; set; }
        public virtual DbSet<M_Global_Mapping_Mst> M_Global_Mapping_Mst { get; set; }
        public virtual DbSet<M_Modeofpayment_MST> M_Modeofpayment_MST { get; set; }
        public virtual DbSet<M_Terminal_MST> M_Terminal_MST { get; set; }
        public virtual DbSet<M_UOM_MST> M_UOM_MST { get; set; }
        public virtual DbSet<M_UOMCategory_MST> M_UOMCategory_MST { get; set; }
        public virtual DbSet<M_UploadFile_MST> M_UploadFile_MST { get; set; }
        public virtual DbSet<M_UserType_MST> M_UserType_MST { get; set; }
        public virtual DbSet<M_Warehouse_MST> M_Warehouse_MST { get; set; }
        public virtual DbSet<MSBM_TBL> MSBM_TBL { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<VMSG_ALERT_M> VMSG_ALERT_M { get; set; }
        public virtual DbSet<VMSG_RELATION> VMSG_RELATION { get; set; }
        public virtual DbSet<VMSG_TEMPLATE_M> VMSG_TEMPLATE_M { get; set; }
        public virtual DbSet<VRCF_COLUMN_DTL> VRCF_COLUMN_DTL { get; set; }
        public virtual DbSet<VRCF_DEBUG_DTL> VRCF_DEBUG_DTL { get; set; }
        public virtual DbSet<VRCF_TABLE_DTL> VRCF_TABLE_DTL { get; set; }
        public virtual DbSet<VRCF_XLSX_STYLE> VRCF_XLSX_STYLE { get; set; }
        public virtual DbSet<VSEC_APPLICATION_AUDIT_TRAIL> VSEC_APPLICATION_AUDIT_TRAIL { get; set; }
        public virtual DbSet<VSEC_APPLICATIONS> VSEC_APPLICATIONS { get; set; }
        public virtual DbSet<VSEC_FUNCTION_ACCESS> VSEC_FUNCTION_ACCESS { get; set; }
        public virtual DbSet<VSEC_FUNCTION_MST> VSEC_FUNCTION_MST { get; set; }
        public virtual DbSet<VSEC_LOGIN_MST> VSEC_LOGIN_MST { get; set; }
        public virtual DbSet<VSEC_PROFILE_MST> VSEC_PROFILE_MST { get; set; }
        public virtual DbSet<VSEC_QUESTION_MST> VSEC_QUESTION_MST { get; set; }
        public virtual DbSet<VSEC_ROLE_MST> VSEC_ROLE_MST { get; set; }
        public virtual DbSet<VSEC_USER_ACTION_HST> VSEC_USER_ACTION_HST { get; set; }
        public virtual DbSet<VSEC_USER_MST> VSEC_USER_MST { get; set; }
        public virtual DbSet<VSEC_USER_ROLE_MAP> VSEC_USER_ROLE_MAP { get; set; }
        public virtual DbSet<ACC_Invoice_Hst> ACC_Invoice_Hst { get; set; }
        public virtual DbSet<APP_LOGGER> APP_LOGGER { get; set; }
        public virtual DbSet<EXP_OFLGatePass_HST> EXP_OFLGatePass_HST { get; set; }
        public virtual DbSet<GEN_APP_PARAM> GEN_APP_PARAM { get; set; }
        public virtual DbSet<IMP_OHTGPGatePass> IMP_OHTGPGatePass { get; set; }
        public virtual DbSet<M_DelayedChrg_MST_bak> M_DelayedChrg_MST_bak { get; set; }
        public virtual DbSet<M_Flightmaster_HST> M_Flightmaster_HST { get; set; }
        public virtual DbSet<M_Global_Mapping_Hst> M_Global_Mapping_Hst { get; set; }
        public virtual DbSet<M_Modeofpayment_HST> M_Modeofpayment_HST { get; set; }
        public virtual DbSet<M_Terminal_HST> M_Terminal_HST { get; set; }
        public virtual DbSet<M_UserType_HST> M_UserType_HST { get; set; }
        public virtual DbSet<MSBM_HST> MSBM_HST { get; set; }
        public virtual DbSet<SEQ_EMPMASTER> SEQ_EMPMASTER { get; set; }
        public virtual DbSet<tempColumnDtl7> tempColumnDtl7 { get; set; }
        public virtual DbSet<VMSG_ALERT_DETAILS> VMSG_ALERT_DETAILS { get; set; }
        public virtual DbSet<VMSG_ErrorLog> VMSG_ErrorLog { get; set; }
        public virtual DbSet<VMSG_GENERATOR> VMSG_GENERATOR { get; set; }
        public virtual DbSet<VMSG_GENERATOR_TEMP> VMSG_GENERATOR_TEMP { get; set; }
        public virtual DbSet<VMSG_HISTORY_LOGS> VMSG_HISTORY_LOGS { get; set; }
        public virtual DbSet<VMSG_TIME_WINDOW_M> VMSG_TIME_WINDOW_M { get; set; }
        public virtual DbSet<VRCF_JSCRIPT_DTL> VRCF_JSCRIPT_DTL { get; set; }
        public virtual DbSet<Form2Arrived> Form2Arrived { get; set; }
        public virtual DbSet<GatePassIssued> GatePassIssueds { get; set; }
        public virtual DbSet<vw_AirlineMst> vw_AirlineMst { get; set; }
        public virtual DbSet<vw_AlertDtl> vw_AlertDtl { get; set; }
        public virtual DbSet<VW_UserDetail> VW_UserDetail { get; set; }
        public virtual DbSet<VWEDT_COURIEREMPMST> VWEDT_COURIEREMPMST { get; set; }
        public virtual DbSet<VWEDT_FLIGHTMASTERMST> VWEDT_FLIGHTMASTERMST { get; set; }
        public virtual DbSet<VWEDT_MODEPAYMST> VWEDT_MODEPAYMST { get; set; }
        public virtual DbSet<VWEDT_USERTYPEMST> VWEDT_USERTYPEMST { get; set; }
        public virtual DbSet<VWEXP_OFLGatePass> VWEXP_OFLGatePass { get; set; }
        public virtual DbSet<VWEDT_COURIERMST> VWEDT_COURIERMST { get; set; }
    
        [DbFunction("EIA_DEVEntities", "fnSplit")]
        public virtual IQueryable<fnSplit_Result> fnSplit(string sInputList, string sDelimiter)
        {
            var sInputListParameter = sInputList != null ?
                new ObjectParameter("sInputList", sInputList) :
                new ObjectParameter("sInputList", typeof(string));
    
            var sDelimiterParameter = sDelimiter != null ?
                new ObjectParameter("sDelimiter", sDelimiter) :
                new ObjectParameter("sDelimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnSplit_Result>("[EIA_DEVEntities].[fnSplit](@sInputList, @sDelimiter)", sInputListParameter, sDelimiterParameter);
        }
    
        [DbFunction("EIA_DEVEntities", "Insertlist_to_tbl")]
        public virtual IQueryable<Insertlist_to_tbl_Result> Insertlist_to_tbl(string list)
        {
            var listParameter = list != null ?
                new ObjectParameter("list", list) :
                new ObjectParameter("list", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Insertlist_to_tbl_Result>("[EIA_DEVEntities].[Insertlist_to_tbl](@list)", listParameter);
        }
    
        [DbFunction("EIA_DEVEntities", "InsertStringList_SPLIT")]
        public virtual IQueryable<InsertStringList_SPLIT_Result> InsertStringList_SPLIT(string list)
        {
            var listParameter = list != null ?
                new ObjectParameter("list", list) :
                new ObjectParameter("list", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<InsertStringList_SPLIT_Result>("[EIA_DEVEntities].[InsertStringList_SPLIT](@list)", listParameter);
        }
    
        [DbFunction("EIA_DEVEntities", "VSEC_GETUSERLIST")]
        public virtual IQueryable<VSEC_GETUSERLIST_Result> VSEC_GETUSERLIST(string flag, string roleID)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var roleIDParameter = roleID != null ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<VSEC_GETUSERLIST_Result>("[EIA_DEVEntities].[VSEC_GETUSERLIST](@Flag, @RoleID)", flagParameter, roleIDParameter);
        }
    
        public virtual ObjectResult<string> AddEntryGatePass(Nullable<System.DateTime> entryGatePassDate, Nullable<int> courierCompanyId, string flightNumber, Nullable<System.DateTime> flightDate, Nullable<int> noOfBags, Nullable<int> noOfShips, Nullable<int> noOfPackages, Nullable<decimal> entryWeight, Nullable<int> cSB3, Nullable<int> cSB4, string entryPersonStaff, string vehicleNumber, string terminalCode, string financialYear, string loginName, Nullable<int> timeOfDeparture)
        {
            var entryGatePassDateParameter = entryGatePassDate.HasValue ?
                new ObjectParameter("EntryGatePassDate", entryGatePassDate) :
                new ObjectParameter("EntryGatePassDate", typeof(System.DateTime));
    
            var courierCompanyIdParameter = courierCompanyId.HasValue ?
                new ObjectParameter("CourierCompanyId", courierCompanyId) :
                new ObjectParameter("CourierCompanyId", typeof(int));
    
            var flightNumberParameter = flightNumber != null ?
                new ObjectParameter("FlightNumber", flightNumber) :
                new ObjectParameter("FlightNumber", typeof(string));
    
            var flightDateParameter = flightDate.HasValue ?
                new ObjectParameter("FlightDate", flightDate) :
                new ObjectParameter("FlightDate", typeof(System.DateTime));
    
            var noOfBagsParameter = noOfBags.HasValue ?
                new ObjectParameter("NoOfBags", noOfBags) :
                new ObjectParameter("NoOfBags", typeof(int));
    
            var noOfShipsParameter = noOfShips.HasValue ?
                new ObjectParameter("NoOfShips", noOfShips) :
                new ObjectParameter("NoOfShips", typeof(int));
    
            var noOfPackagesParameter = noOfPackages.HasValue ?
                new ObjectParameter("NoOfPackages", noOfPackages) :
                new ObjectParameter("NoOfPackages", typeof(int));
    
            var entryWeightParameter = entryWeight.HasValue ?
                new ObjectParameter("EntryWeight", entryWeight) :
                new ObjectParameter("EntryWeight", typeof(decimal));
    
            var cSB3Parameter = cSB3.HasValue ?
                new ObjectParameter("CSB3", cSB3) :
                new ObjectParameter("CSB3", typeof(int));
    
            var cSB4Parameter = cSB4.HasValue ?
                new ObjectParameter("CSB4", cSB4) :
                new ObjectParameter("CSB4", typeof(int));
    
            var entryPersonStaffParameter = entryPersonStaff != null ?
                new ObjectParameter("EntryPersonStaff", entryPersonStaff) :
                new ObjectParameter("EntryPersonStaff", typeof(string));
    
            var vehicleNumberParameter = vehicleNumber != null ?
                new ObjectParameter("VehicleNumber", vehicleNumber) :
                new ObjectParameter("VehicleNumber", typeof(string));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var financialYearParameter = financialYear != null ?
                new ObjectParameter("FinancialYear", financialYear) :
                new ObjectParameter("FinancialYear", typeof(string));
    
            var loginNameParameter = loginName != null ?
                new ObjectParameter("LoginName", loginName) :
                new ObjectParameter("LoginName", typeof(string));
    
            var timeOfDepartureParameter = timeOfDeparture.HasValue ?
                new ObjectParameter("TimeOfDeparture", timeOfDeparture) :
                new ObjectParameter("TimeOfDeparture", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("AddEntryGatePass", entryGatePassDateParameter, courierCompanyIdParameter, flightNumberParameter, flightDateParameter, noOfBagsParameter, noOfShipsParameter, noOfPackagesParameter, entryWeightParameter, cSB3Parameter, cSB4Parameter, entryPersonStaffParameter, vehicleNumberParameter, terminalCodeParameter, financialYearParameter, loginNameParameter, timeOfDepartureParameter);
        }
    
        public virtual int AddForm1Details(string flightNumber, string airportOfShipment, string igmNumber, Nullable<System.DateTime> igmDate, Nullable<int> timeOfArrival, Nullable<System.DateTime> dateOfArrival, string supervisorName, string securityOfficer, string airlineEmpName, string customOfficer, string dutyOfficer, string courierRepresentative, string userName, Nullable<long> form1Id, string terminalCode, Nullable<System.DateTime> lastUpDtOn, Nullable<int> provosionalIGMNo)
        {
            var flightNumberParameter = flightNumber != null ?
                new ObjectParameter("FlightNumber", flightNumber) :
                new ObjectParameter("FlightNumber", typeof(string));
    
            var airportOfShipmentParameter = airportOfShipment != null ?
                new ObjectParameter("AirportOfShipment", airportOfShipment) :
                new ObjectParameter("AirportOfShipment", typeof(string));
    
            var igmNumberParameter = igmNumber != null ?
                new ObjectParameter("IgmNumber", igmNumber) :
                new ObjectParameter("IgmNumber", typeof(string));
    
            var igmDateParameter = igmDate.HasValue ?
                new ObjectParameter("IgmDate", igmDate) :
                new ObjectParameter("IgmDate", typeof(System.DateTime));
    
            var timeOfArrivalParameter = timeOfArrival.HasValue ?
                new ObjectParameter("TimeOfArrival", timeOfArrival) :
                new ObjectParameter("TimeOfArrival", typeof(int));
    
            var dateOfArrivalParameter = dateOfArrival.HasValue ?
                new ObjectParameter("DateOfArrival", dateOfArrival) :
                new ObjectParameter("DateOfArrival", typeof(System.DateTime));
    
            var supervisorNameParameter = supervisorName != null ?
                new ObjectParameter("SupervisorName", supervisorName) :
                new ObjectParameter("SupervisorName", typeof(string));
    
            var securityOfficerParameter = securityOfficer != null ?
                new ObjectParameter("SecurityOfficer", securityOfficer) :
                new ObjectParameter("SecurityOfficer", typeof(string));
    
            var airlineEmpNameParameter = airlineEmpName != null ?
                new ObjectParameter("AirlineEmpName", airlineEmpName) :
                new ObjectParameter("AirlineEmpName", typeof(string));
    
            var customOfficerParameter = customOfficer != null ?
                new ObjectParameter("CustomOfficer", customOfficer) :
                new ObjectParameter("CustomOfficer", typeof(string));
    
            var dutyOfficerParameter = dutyOfficer != null ?
                new ObjectParameter("DutyOfficer", dutyOfficer) :
                new ObjectParameter("DutyOfficer", typeof(string));
    
            var courierRepresentativeParameter = courierRepresentative != null ?
                new ObjectParameter("CourierRepresentative", courierRepresentative) :
                new ObjectParameter("CourierRepresentative", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var form1IdParameter = form1Id.HasValue ?
                new ObjectParameter("Form1Id", form1Id) :
                new ObjectParameter("Form1Id", typeof(long));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var lastUpDtOnParameter = lastUpDtOn.HasValue ?
                new ObjectParameter("LastUpDtOn", lastUpDtOn) :
                new ObjectParameter("LastUpDtOn", typeof(System.DateTime));
    
            var provosionalIGMNoParameter = provosionalIGMNo.HasValue ?
                new ObjectParameter("ProvosionalIGMNo", provosionalIGMNo) :
                new ObjectParameter("ProvosionalIGMNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddForm1Details", flightNumberParameter, airportOfShipmentParameter, igmNumberParameter, igmDateParameter, timeOfArrivalParameter, dateOfArrivalParameter, supervisorNameParameter, securityOfficerParameter, airlineEmpNameParameter, customOfficerParameter, dutyOfficerParameter, courierRepresentativeParameter, userNameParameter, form1IdParameter, terminalCodeParameter, lastUpDtOnParameter, provosionalIGMNoParameter);
        }
    
        public virtual int AddGatePassDetails(string preventiveOfficer, string gPType, string fileNo, string dDRNo, Nullable<System.DateTime> dDRDate, Nullable<decimal> dDRAmount, string iDFNumber, Nullable<long> noofDays, Nullable<decimal> assessedValue, Nullable<decimal> dutyFeeAmount, string remarks, Nullable<decimal> waiveDelayCharges, Nullable<decimal> delayCharges, Nullable<decimal> waiveTDSCharges, Nullable<decimal> serviceTax, Nullable<int> noOfPkgs, Nullable<int> noOfShipments, Nullable<int> noOfBags, Nullable<decimal> weight, string terminalCode, string loginName, string checkListIds, string flag, Nullable<long> courierCoId, Nullable<long> receiptId, string flightNumber, Nullable<System.DateTime> flightDate, Nullable<int> time, Nullable<System.DateTime> lastUpDtOn, Nullable<System.DateTime> gatePassLastUpDtOn, Nullable<int> courierEmpId, Nullable<int> gatePassId, Nullable<decimal> redemptionFine, Nullable<decimal> personalpenalty, string thokaNo, Nullable<int> tPCTM, string chargesApplicable, string chargesApplicableRemarks, Nullable<decimal> swachhBharatCessPerc, Nullable<decimal> swachhBharatCessAmt, Nullable<decimal> serviceTaxPerc)
        {
            var preventiveOfficerParameter = preventiveOfficer != null ?
                new ObjectParameter("PreventiveOfficer", preventiveOfficer) :
                new ObjectParameter("PreventiveOfficer", typeof(string));
    
            var gPTypeParameter = gPType != null ?
                new ObjectParameter("GPType", gPType) :
                new ObjectParameter("GPType", typeof(string));
    
            var fileNoParameter = fileNo != null ?
                new ObjectParameter("FileNo", fileNo) :
                new ObjectParameter("FileNo", typeof(string));
    
            var dDRNoParameter = dDRNo != null ?
                new ObjectParameter("DDRNo", dDRNo) :
                new ObjectParameter("DDRNo", typeof(string));
    
            var dDRDateParameter = dDRDate.HasValue ?
                new ObjectParameter("DDRDate", dDRDate) :
                new ObjectParameter("DDRDate", typeof(System.DateTime));
    
            var dDRAmountParameter = dDRAmount.HasValue ?
                new ObjectParameter("DDRAmount", dDRAmount) :
                new ObjectParameter("DDRAmount", typeof(decimal));
    
            var iDFNumberParameter = iDFNumber != null ?
                new ObjectParameter("IDFNumber", iDFNumber) :
                new ObjectParameter("IDFNumber", typeof(string));
    
            var noofDaysParameter = noofDays.HasValue ?
                new ObjectParameter("NoofDays", noofDays) :
                new ObjectParameter("NoofDays", typeof(long));
    
            var assessedValueParameter = assessedValue.HasValue ?
                new ObjectParameter("AssessedValue", assessedValue) :
                new ObjectParameter("AssessedValue", typeof(decimal));
    
            var dutyFeeAmountParameter = dutyFeeAmount.HasValue ?
                new ObjectParameter("DutyFeeAmount", dutyFeeAmount) :
                new ObjectParameter("DutyFeeAmount", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var waiveDelayChargesParameter = waiveDelayCharges.HasValue ?
                new ObjectParameter("WaiveDelayCharges", waiveDelayCharges) :
                new ObjectParameter("WaiveDelayCharges", typeof(decimal));
    
            var delayChargesParameter = delayCharges.HasValue ?
                new ObjectParameter("DelayCharges", delayCharges) :
                new ObjectParameter("DelayCharges", typeof(decimal));
    
            var waiveTDSChargesParameter = waiveTDSCharges.HasValue ?
                new ObjectParameter("WaiveTDSCharges", waiveTDSCharges) :
                new ObjectParameter("WaiveTDSCharges", typeof(decimal));
    
            var serviceTaxParameter = serviceTax.HasValue ?
                new ObjectParameter("ServiceTax", serviceTax) :
                new ObjectParameter("ServiceTax", typeof(decimal));
    
            var noOfPkgsParameter = noOfPkgs.HasValue ?
                new ObjectParameter("NoOfPkgs", noOfPkgs) :
                new ObjectParameter("NoOfPkgs", typeof(int));
    
            var noOfShipmentsParameter = noOfShipments.HasValue ?
                new ObjectParameter("NoOfShipments", noOfShipments) :
                new ObjectParameter("NoOfShipments", typeof(int));
    
            var noOfBagsParameter = noOfBags.HasValue ?
                new ObjectParameter("NoOfBags", noOfBags) :
                new ObjectParameter("NoOfBags", typeof(int));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(decimal));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var loginNameParameter = loginName != null ?
                new ObjectParameter("LoginName", loginName) :
                new ObjectParameter("LoginName", typeof(string));
    
            var checkListIdsParameter = checkListIds != null ?
                new ObjectParameter("CheckListIds", checkListIds) :
                new ObjectParameter("CheckListIds", typeof(string));
    
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var courierCoIdParameter = courierCoId.HasValue ?
                new ObjectParameter("CourierCoId", courierCoId) :
                new ObjectParameter("CourierCoId", typeof(long));
    
            var receiptIdParameter = receiptId.HasValue ?
                new ObjectParameter("ReceiptId", receiptId) :
                new ObjectParameter("ReceiptId", typeof(long));
    
            var flightNumberParameter = flightNumber != null ?
                new ObjectParameter("FlightNumber", flightNumber) :
                new ObjectParameter("FlightNumber", typeof(string));
    
            var flightDateParameter = flightDate.HasValue ?
                new ObjectParameter("FlightDate", flightDate) :
                new ObjectParameter("FlightDate", typeof(System.DateTime));
    
            var timeParameter = time.HasValue ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(int));
    
            var lastUpDtOnParameter = lastUpDtOn.HasValue ?
                new ObjectParameter("LastUpDtOn", lastUpDtOn) :
                new ObjectParameter("LastUpDtOn", typeof(System.DateTime));
    
            var gatePassLastUpDtOnParameter = gatePassLastUpDtOn.HasValue ?
                new ObjectParameter("GatePassLastUpDtOn", gatePassLastUpDtOn) :
                new ObjectParameter("GatePassLastUpDtOn", typeof(System.DateTime));
    
            var courierEmpIdParameter = courierEmpId.HasValue ?
                new ObjectParameter("CourierEmpId", courierEmpId) :
                new ObjectParameter("CourierEmpId", typeof(int));
    
            var gatePassIdParameter = gatePassId.HasValue ?
                new ObjectParameter("GatePassId", gatePassId) :
                new ObjectParameter("GatePassId", typeof(int));
    
            var redemptionFineParameter = redemptionFine.HasValue ?
                new ObjectParameter("RedemptionFine", redemptionFine) :
                new ObjectParameter("RedemptionFine", typeof(decimal));
    
            var personalpenaltyParameter = personalpenalty.HasValue ?
                new ObjectParameter("Personalpenalty", personalpenalty) :
                new ObjectParameter("Personalpenalty", typeof(decimal));
    
            var thokaNoParameter = thokaNo != null ?
                new ObjectParameter("ThokaNo", thokaNo) :
                new ObjectParameter("ThokaNo", typeof(string));
    
            var tPCTMParameter = tPCTM.HasValue ?
                new ObjectParameter("TPCTM", tPCTM) :
                new ObjectParameter("TPCTM", typeof(int));
    
            var chargesApplicableParameter = chargesApplicable != null ?
                new ObjectParameter("ChargesApplicable", chargesApplicable) :
                new ObjectParameter("ChargesApplicable", typeof(string));
    
            var chargesApplicableRemarksParameter = chargesApplicableRemarks != null ?
                new ObjectParameter("ChargesApplicableRemarks", chargesApplicableRemarks) :
                new ObjectParameter("ChargesApplicableRemarks", typeof(string));
    
            var swachhBharatCessPercParameter = swachhBharatCessPerc.HasValue ?
                new ObjectParameter("SwachhBharatCessPerc", swachhBharatCessPerc) :
                new ObjectParameter("SwachhBharatCessPerc", typeof(decimal));
    
            var swachhBharatCessAmtParameter = swachhBharatCessAmt.HasValue ?
                new ObjectParameter("SwachhBharatCessAmt", swachhBharatCessAmt) :
                new ObjectParameter("SwachhBharatCessAmt", typeof(decimal));
    
            var serviceTaxPercParameter = serviceTaxPerc.HasValue ?
                new ObjectParameter("ServiceTaxPerc", serviceTaxPerc) :
                new ObjectParameter("ServiceTaxPerc", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddGatePassDetails", preventiveOfficerParameter, gPTypeParameter, fileNoParameter, dDRNoParameter, dDRDateParameter, dDRAmountParameter, iDFNumberParameter, noofDaysParameter, assessedValueParameter, dutyFeeAmountParameter, remarksParameter, waiveDelayChargesParameter, delayChargesParameter, waiveTDSChargesParameter, serviceTaxParameter, noOfPkgsParameter, noOfShipmentsParameter, noOfBagsParameter, weightParameter, terminalCodeParameter, loginNameParameter, checkListIdsParameter, flagParameter, courierCoIdParameter, receiptIdParameter, flightNumberParameter, flightDateParameter, timeParameter, lastUpDtOnParameter, gatePassLastUpDtOnParameter, courierEmpIdParameter, gatePassIdParameter, redemptionFineParameter, personalpenaltyParameter, thokaNoParameter, tPCTMParameter, chargesApplicableParameter, chargesApplicableRemarksParameter, swachhBharatCessPercParameter, swachhBharatCessAmtParameter, serviceTaxPercParameter);
        }
    
        public virtual int AddOnHoldMemoDetails(Nullable<long> onHoldId, Nullable<long> noofPkgs, string hAWBNO, string consigneeName, string itemDescription, Nullable<decimal> value, Nullable<int> reason, Nullable<int> onHoldType, Nullable<decimal> weight, string terminalCode, Nullable<System.DateTime> lstUpDtOn, string loginName, string status, string reasonDescription, string courierStaffName, string courierStaffRemarks, string consigneeAddress, string consigneePin, string oHMThokaNo)
        {
            var onHoldIdParameter = onHoldId.HasValue ?
                new ObjectParameter("OnHoldId", onHoldId) :
                new ObjectParameter("OnHoldId", typeof(long));
    
            var noofPkgsParameter = noofPkgs.HasValue ?
                new ObjectParameter("NoofPkgs", noofPkgs) :
                new ObjectParameter("NoofPkgs", typeof(long));
    
            var hAWBNOParameter = hAWBNO != null ?
                new ObjectParameter("HAWBNO", hAWBNO) :
                new ObjectParameter("HAWBNO", typeof(string));
    
            var consigneeNameParameter = consigneeName != null ?
                new ObjectParameter("ConsigneeName", consigneeName) :
                new ObjectParameter("ConsigneeName", typeof(string));
    
            var itemDescriptionParameter = itemDescription != null ?
                new ObjectParameter("ItemDescription", itemDescription) :
                new ObjectParameter("ItemDescription", typeof(string));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(decimal));
    
            var reasonParameter = reason.HasValue ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(int));
    
            var onHoldTypeParameter = onHoldType.HasValue ?
                new ObjectParameter("OnHoldType", onHoldType) :
                new ObjectParameter("OnHoldType", typeof(int));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(decimal));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var lstUpDtOnParameter = lstUpDtOn.HasValue ?
                new ObjectParameter("LstUpDtOn", lstUpDtOn) :
                new ObjectParameter("LstUpDtOn", typeof(System.DateTime));
    
            var loginNameParameter = loginName != null ?
                new ObjectParameter("LoginName", loginName) :
                new ObjectParameter("LoginName", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var reasonDescriptionParameter = reasonDescription != null ?
                new ObjectParameter("ReasonDescription", reasonDescription) :
                new ObjectParameter("ReasonDescription", typeof(string));
    
            var courierStaffNameParameter = courierStaffName != null ?
                new ObjectParameter("CourierStaffName", courierStaffName) :
                new ObjectParameter("CourierStaffName", typeof(string));
    
            var courierStaffRemarksParameter = courierStaffRemarks != null ?
                new ObjectParameter("CourierStaffRemarks", courierStaffRemarks) :
                new ObjectParameter("CourierStaffRemarks", typeof(string));
    
            var consigneeAddressParameter = consigneeAddress != null ?
                new ObjectParameter("ConsigneeAddress", consigneeAddress) :
                new ObjectParameter("ConsigneeAddress", typeof(string));
    
            var consigneePinParameter = consigneePin != null ?
                new ObjectParameter("ConsigneePin", consigneePin) :
                new ObjectParameter("ConsigneePin", typeof(string));
    
            var oHMThokaNoParameter = oHMThokaNo != null ?
                new ObjectParameter("OHMThokaNo", oHMThokaNo) :
                new ObjectParameter("OHMThokaNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddOnHoldMemoDetails", onHoldIdParameter, noofPkgsParameter, hAWBNOParameter, consigneeNameParameter, itemDescriptionParameter, valueParameter, reasonParameter, onHoldTypeParameter, weightParameter, terminalCodeParameter, lstUpDtOnParameter, loginNameParameter, statusParameter, reasonDescriptionParameter, courierStaffNameParameter, courierStaffRemarksParameter, consigneeAddressParameter, consigneePinParameter, oHMThokaNoParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> AddReceipt(Nullable<System.DateTime> receiptDate, Nullable<long> courierCompanyId, string terminalCode, string remarks, Nullable<int> receiptTypeId, string flightNumber, Nullable<System.DateTime> flightDate, string userName)
        {
            var receiptDateParameter = receiptDate.HasValue ?
                new ObjectParameter("ReceiptDate", receiptDate) :
                new ObjectParameter("ReceiptDate", typeof(System.DateTime));
    
            var courierCompanyIdParameter = courierCompanyId.HasValue ?
                new ObjectParameter("courierCompanyId", courierCompanyId) :
                new ObjectParameter("courierCompanyId", typeof(long));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var receiptTypeIdParameter = receiptTypeId.HasValue ?
                new ObjectParameter("ReceiptTypeId", receiptTypeId) :
                new ObjectParameter("ReceiptTypeId", typeof(int));
    
            var flightNumberParameter = flightNumber != null ?
                new ObjectParameter("FlightNumber", flightNumber) :
                new ObjectParameter("FlightNumber", typeof(string));
    
            var flightDateParameter = flightDate.HasValue ?
                new ObjectParameter("FlightDate", flightDate) :
                new ObjectParameter("FlightDate", typeof(System.DateTime));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("AddReceipt", receiptDateParameter, courierCompanyIdParameter, terminalCodeParameter, remarksParameter, receiptTypeIdParameter, flightNumberParameter, flightDateParameter, userNameParameter);
        }
    
        public virtual int AddReceiptDetails(Nullable<System.DateTime> receiptDate, Nullable<long> courierCompanyId, string terminalCode, string remarks, Nullable<int> receiptTypeId, string flightNumber, Nullable<System.DateTime> flightDate, Nullable<int> chargeType, string userName, Nullable<long> receiptId, Nullable<System.DateTime> lastUpDtOn, Nullable<long> gatePassId)
        {
            var receiptDateParameter = receiptDate.HasValue ?
                new ObjectParameter("ReceiptDate", receiptDate) :
                new ObjectParameter("ReceiptDate", typeof(System.DateTime));
    
            var courierCompanyIdParameter = courierCompanyId.HasValue ?
                new ObjectParameter("courierCompanyId", courierCompanyId) :
                new ObjectParameter("courierCompanyId", typeof(long));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var receiptTypeIdParameter = receiptTypeId.HasValue ?
                new ObjectParameter("ReceiptTypeId", receiptTypeId) :
                new ObjectParameter("ReceiptTypeId", typeof(int));
    
            var flightNumberParameter = flightNumber != null ?
                new ObjectParameter("FlightNumber", flightNumber) :
                new ObjectParameter("FlightNumber", typeof(string));
    
            var flightDateParameter = flightDate.HasValue ?
                new ObjectParameter("FlightDate", flightDate) :
                new ObjectParameter("FlightDate", typeof(System.DateTime));
    
            var chargeTypeParameter = chargeType.HasValue ?
                new ObjectParameter("ChargeType", chargeType) :
                new ObjectParameter("ChargeType", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var receiptIdParameter = receiptId.HasValue ?
                new ObjectParameter("ReceiptId", receiptId) :
                new ObjectParameter("ReceiptId", typeof(long));
    
            var lastUpDtOnParameter = lastUpDtOn.HasValue ?
                new ObjectParameter("LastUpDtOn", lastUpDtOn) :
                new ObjectParameter("LastUpDtOn", typeof(System.DateTime));
    
            var gatePassIdParameter = gatePassId.HasValue ?
                new ObjectParameter("GatePassId", gatePassId) :
                new ObjectParameter("GatePassId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddReceiptDetails", receiptDateParameter, courierCompanyIdParameter, terminalCodeParameter, remarksParameter, receiptTypeIdParameter, flightNumberParameter, flightDateParameter, chargeTypeParameter, userNameParameter, receiptIdParameter, lastUpDtOnParameter, gatePassIdParameter);
        }
    
        public virtual int Delete_AppLogger_Data()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_AppLogger_Data");
        }
    
        public virtual ObjectResult<string> DeleteReceiptDetails(string receiptId, ObjectParameter @out)
        {
            var receiptIdParameter = receiptId != null ?
                new ObjectParameter("ReceiptId", receiptId) :
                new ObjectParameter("ReceiptId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DeleteReceiptDetails", receiptIdParameter, @out);
        }
    
        public virtual ObjectResult<string> EntryGatePassSearch(string entryGatePassNumber, Nullable<int> courierCompanyId, string flightNumber, Nullable<System.DateTime> flightDate, string terminalCode, string financialYear)
        {
            var entryGatePassNumberParameter = entryGatePassNumber != null ?
                new ObjectParameter("EntryGatePassNumber", entryGatePassNumber) :
                new ObjectParameter("EntryGatePassNumber", typeof(string));
    
            var courierCompanyIdParameter = courierCompanyId.HasValue ?
                new ObjectParameter("CourierCompanyId", courierCompanyId) :
                new ObjectParameter("CourierCompanyId", typeof(int));
    
            var flightNumberParameter = flightNumber != null ?
                new ObjectParameter("FlightNumber", flightNumber) :
                new ObjectParameter("FlightNumber", typeof(string));
    
            var flightDateParameter = flightDate.HasValue ?
                new ObjectParameter("FlightDate", flightDate) :
                new ObjectParameter("FlightDate", typeof(System.DateTime));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var financialYearParameter = financialYear != null ?
                new ObjectParameter("FinancialYear", financialYear) :
                new ObjectParameter("FinancialYear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("EntryGatePassSearch", entryGatePassNumberParameter, courierCompanyIdParameter, flightNumberParameter, flightDateParameter, terminalCodeParameter, financialYearParameter);
        }
    
        public virtual int GenerateAuctionList(Nullable<System.DateTime> auctionListDate, Nullable<int> auctionListTime, string terminalCode, string loginName, string finYear, string aucRemarks)
        {
            var auctionListDateParameter = auctionListDate.HasValue ?
                new ObjectParameter("AuctionListDate", auctionListDate) :
                new ObjectParameter("AuctionListDate", typeof(System.DateTime));
    
            var auctionListTimeParameter = auctionListTime.HasValue ?
                new ObjectParameter("AuctionListTime", auctionListTime) :
                new ObjectParameter("AuctionListTime", typeof(int));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var loginNameParameter = loginName != null ?
                new ObjectParameter("LoginName", loginName) :
                new ObjectParameter("LoginName", typeof(string));
    
            var finYearParameter = finYear != null ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(string));
    
            var aucRemarksParameter = aucRemarks != null ?
                new ObjectParameter("AucRemarks", aucRemarks) :
                new ObjectParameter("AucRemarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GenerateAuctionList", auctionListDateParameter, auctionListTimeParameter, terminalCodeParameter, loginNameParameter, finYearParameter, aucRemarksParameter);
        }
    
        public virtual int GenerateAuctionSaleLot(string loginName, string terminalCode, string finYear, string auctionSaleLotNo)
        {
            var loginNameParameter = loginName != null ?
                new ObjectParameter("LoginName", loginName) :
                new ObjectParameter("LoginName", typeof(string));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var finYearParameter = finYear != null ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(string));
    
            var auctionSaleLotNoParameter = auctionSaleLotNo != null ?
                new ObjectParameter("AuctionSaleLotNo", auctionSaleLotNo) :
                new ObjectParameter("AuctionSaleLotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GenerateAuctionSaleLot", loginNameParameter, terminalCodeParameter, finYearParameter, auctionSaleLotNoParameter);
        }
    
        public virtual ObjectResult<string> GenerateEXPOHMemoNumbers(Nullable<int> form2Id, Nullable<int> form2Type, Nullable<int> shipmentCount, string terminalCode, Nullable<int> onHoldTime, string userName)
        {
            var form2IdParameter = form2Id.HasValue ?
                new ObjectParameter("Form2Id", form2Id) :
                new ObjectParameter("Form2Id", typeof(int));
    
            var form2TypeParameter = form2Type.HasValue ?
                new ObjectParameter("Form2Type", form2Type) :
                new ObjectParameter("Form2Type", typeof(int));
    
            var shipmentCountParameter = shipmentCount.HasValue ?
                new ObjectParameter("ShipmentCount", shipmentCount) :
                new ObjectParameter("ShipmentCount", typeof(int));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var onHoldTimeParameter = onHoldTime.HasValue ?
                new ObjectParameter("OnHoldTime", onHoldTime) :
                new ObjectParameter("OnHoldTime", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GenerateEXPOHMemoNumbers", form2IdParameter, form2TypeParameter, shipmentCountParameter, terminalCodeParameter, onHoldTimeParameter, userNameParameter);
        }
    
        public virtual ObjectResult<string> GenerateEXPUserOHMemoNumber(Nullable<int> form2Id, Nullable<int> form2Type, Nullable<int> userMemoNumber, Nullable<int> count, string terminalCode, Nullable<int> onHoldTime, string userName)
        {
            var form2IdParameter = form2Id.HasValue ?
                new ObjectParameter("Form2Id", form2Id) :
                new ObjectParameter("Form2Id", typeof(int));
    
            var form2TypeParameter = form2Type.HasValue ?
                new ObjectParameter("Form2Type", form2Type) :
                new ObjectParameter("Form2Type", typeof(int));
    
            var userMemoNumberParameter = userMemoNumber.HasValue ?
                new ObjectParameter("UserMemoNumber", userMemoNumber) :
                new ObjectParameter("UserMemoNumber", typeof(int));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("Count", count) :
                new ObjectParameter("Count", typeof(int));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var onHoldTimeParameter = onHoldTime.HasValue ?
                new ObjectParameter("OnHoldTime", onHoldTime) :
                new ObjectParameter("OnHoldTime", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GenerateEXPUserOHMemoNumber", form2IdParameter, form2TypeParameter, userMemoNumberParameter, countParameter, terminalCodeParameter, onHoldTimeParameter, userNameParameter);
        }
    
        public virtual ObjectResult<string> GenerateEXPUserOHNumber(Nullable<int> form2Id, Nullable<int> form2Type, string memo, string terminalCode, Nullable<int> onHoldTime, string userName)
        {
            var form2IdParameter = form2Id.HasValue ?
                new ObjectParameter("Form2Id", form2Id) :
                new ObjectParameter("Form2Id", typeof(int));
    
            var form2TypeParameter = form2Type.HasValue ?
                new ObjectParameter("Form2Type", form2Type) :
                new ObjectParameter("Form2Type", typeof(int));
    
            var memoParameter = memo != null ?
                new ObjectParameter("Memo", memo) :
                new ObjectParameter("Memo", typeof(string));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var onHoldTimeParameter = onHoldTime.HasValue ?
                new ObjectParameter("OnHoldTime", onHoldTime) :
                new ObjectParameter("OnHoldTime", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GenerateEXPUserOHNumber", form2IdParameter, form2TypeParameter, memoParameter, terminalCodeParameter, onHoldTimeParameter, userNameParameter);
        }
    
        public virtual ObjectResult<string> GenerateGatePass(Nullable<int> from2Id, Nullable<int> form2Type, string iGMReferenceNo, string eCMReferenceNo, Nullable<System.DateTime> issueDateTime, string preventiveOfficer, string clearBy, string gPType, string fileNo, string dDRNo, Nullable<System.DateTime> dDRDate, Nullable<decimal> dDRAmount, Nullable<decimal> iDFNumber, Nullable<decimal> assessedValue, Nullable<decimal> dutyFeeAmount, string remarks, Nullable<decimal> waiveDelayCharges, Nullable<decimal> delayCharges, Nullable<decimal> waiveTDSCharges, Nullable<decimal> serviceTax, Nullable<int> noOfPkgs, Nullable<int> noOfShipments, Nullable<decimal> weight, string terminalCode, string loginName, string checkListIds, string flag)
        {
            var from2IdParameter = from2Id.HasValue ?
                new ObjectParameter("From2Id", from2Id) :
                new ObjectParameter("From2Id", typeof(int));
    
            var form2TypeParameter = form2Type.HasValue ?
                new ObjectParameter("Form2Type", form2Type) :
                new ObjectParameter("Form2Type", typeof(int));
    
            var iGMReferenceNoParameter = iGMReferenceNo != null ?
                new ObjectParameter("IGMReferenceNo", iGMReferenceNo) :
                new ObjectParameter("IGMReferenceNo", typeof(string));
    
            var eCMReferenceNoParameter = eCMReferenceNo != null ?
                new ObjectParameter("ECMReferenceNo", eCMReferenceNo) :
                new ObjectParameter("ECMReferenceNo", typeof(string));
    
            var issueDateTimeParameter = issueDateTime.HasValue ?
                new ObjectParameter("IssueDateTime", issueDateTime) :
                new ObjectParameter("IssueDateTime", typeof(System.DateTime));
    
            var preventiveOfficerParameter = preventiveOfficer != null ?
                new ObjectParameter("PreventiveOfficer", preventiveOfficer) :
                new ObjectParameter("PreventiveOfficer", typeof(string));
    
            var clearByParameter = clearBy != null ?
                new ObjectParameter("ClearBy", clearBy) :
                new ObjectParameter("ClearBy", typeof(string));
    
            var gPTypeParameter = gPType != null ?
                new ObjectParameter("GPType", gPType) :
                new ObjectParameter("GPType", typeof(string));
    
            var fileNoParameter = fileNo != null ?
                new ObjectParameter("FileNo", fileNo) :
                new ObjectParameter("FileNo", typeof(string));
    
            var dDRNoParameter = dDRNo != null ?
                new ObjectParameter("DDRNo", dDRNo) :
                new ObjectParameter("DDRNo", typeof(string));
    
            var dDRDateParameter = dDRDate.HasValue ?
                new ObjectParameter("DDRDate", dDRDate) :
                new ObjectParameter("DDRDate", typeof(System.DateTime));
    
            var dDRAmountParameter = dDRAmount.HasValue ?
                new ObjectParameter("DDRAmount", dDRAmount) :
                new ObjectParameter("DDRAmount", typeof(decimal));
    
            var iDFNumberParameter = iDFNumber.HasValue ?
                new ObjectParameter("IDFNumber", iDFNumber) :
                new ObjectParameter("IDFNumber", typeof(decimal));
    
            var assessedValueParameter = assessedValue.HasValue ?
                new ObjectParameter("AssessedValue", assessedValue) :
                new ObjectParameter("AssessedValue", typeof(decimal));
    
            var dutyFeeAmountParameter = dutyFeeAmount.HasValue ?
                new ObjectParameter("DutyFeeAmount", dutyFeeAmount) :
                new ObjectParameter("DutyFeeAmount", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var waiveDelayChargesParameter = waiveDelayCharges.HasValue ?
                new ObjectParameter("WaiveDelayCharges", waiveDelayCharges) :
                new ObjectParameter("WaiveDelayCharges", typeof(decimal));
    
            var delayChargesParameter = delayCharges.HasValue ?
                new ObjectParameter("DelayCharges", delayCharges) :
                new ObjectParameter("DelayCharges", typeof(decimal));
    
            var waiveTDSChargesParameter = waiveTDSCharges.HasValue ?
                new ObjectParameter("WaiveTDSCharges", waiveTDSCharges) :
                new ObjectParameter("WaiveTDSCharges", typeof(decimal));
    
            var serviceTaxParameter = serviceTax.HasValue ?
                new ObjectParameter("ServiceTax", serviceTax) :
                new ObjectParameter("ServiceTax", typeof(decimal));
    
            var noOfPkgsParameter = noOfPkgs.HasValue ?
                new ObjectParameter("NoOfPkgs", noOfPkgs) :
                new ObjectParameter("NoOfPkgs", typeof(int));
    
            var noOfShipmentsParameter = noOfShipments.HasValue ?
                new ObjectParameter("NoOfShipments", noOfShipments) :
                new ObjectParameter("NoOfShipments", typeof(int));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(decimal));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var loginNameParameter = loginName != null ?
                new ObjectParameter("LoginName", loginName) :
                new ObjectParameter("LoginName", typeof(string));
    
            var checkListIdsParameter = checkListIds != null ?
                new ObjectParameter("CheckListIds", checkListIds) :
                new ObjectParameter("CheckListIds", typeof(string));
    
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GenerateGatePass", from2IdParameter, form2TypeParameter, iGMReferenceNoParameter, eCMReferenceNoParameter, issueDateTimeParameter, preventiveOfficerParameter, clearByParameter, gPTypeParameter, fileNoParameter, dDRNoParameter, dDRDateParameter, dDRAmountParameter, iDFNumberParameter, assessedValueParameter, dutyFeeAmountParameter, remarksParameter, waiveDelayChargesParameter, delayChargesParameter, waiveTDSChargesParameter, serviceTaxParameter, noOfPkgsParameter, noOfShipmentsParameter, weightParameter, terminalCodeParameter, loginNameParameter, checkListIdsParameter, flagParameter);
        }
    
        public virtual int GenerateInvoice(string terminalCode, Nullable<int> courierCoId, Nullable<int> invoiceTypeId, string invoiceDateFrom, string invoiceDateTo, string userName)
        {
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var courierCoIdParameter = courierCoId.HasValue ?
                new ObjectParameter("CourierCoId", courierCoId) :
                new ObjectParameter("CourierCoId", typeof(int));
    
            var invoiceTypeIdParameter = invoiceTypeId.HasValue ?
                new ObjectParameter("InvoiceTypeId", invoiceTypeId) :
                new ObjectParameter("InvoiceTypeId", typeof(int));
    
            var invoiceDateFromParameter = invoiceDateFrom != null ?
                new ObjectParameter("InvoiceDateFrom", invoiceDateFrom) :
                new ObjectParameter("InvoiceDateFrom", typeof(string));
    
            var invoiceDateToParameter = invoiceDateTo != null ?
                new ObjectParameter("InvoiceDateTo", invoiceDateTo) :
                new ObjectParameter("InvoiceDateTo", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GenerateInvoice", terminalCodeParameter, courierCoIdParameter, invoiceTypeIdParameter, invoiceDateFromParameter, invoiceDateToParameter, userNameParameter);
        }
    
        public virtual ObjectResult<string> GenerateInvoiceExp(string terminalCode, Nullable<int> courierCoId, Nullable<int> invoiceTypeId, string invoiceDateFrom, string invoiceDateTo, string userName)
        {
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var courierCoIdParameter = courierCoId.HasValue ?
                new ObjectParameter("CourierCoId", courierCoId) :
                new ObjectParameter("CourierCoId", typeof(int));
    
            var invoiceTypeIdParameter = invoiceTypeId.HasValue ?
                new ObjectParameter("InvoiceTypeId", invoiceTypeId) :
                new ObjectParameter("InvoiceTypeId", typeof(int));
    
            var invoiceDateFromParameter = invoiceDateFrom != null ?
                new ObjectParameter("InvoiceDateFrom", invoiceDateFrom) :
                new ObjectParameter("InvoiceDateFrom", typeof(string));
    
            var invoiceDateToParameter = invoiceDateTo != null ?
                new ObjectParameter("InvoiceDateTo", invoiceDateTo) :
                new ObjectParameter("InvoiceDateTo", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GenerateInvoiceExp", terminalCodeParameter, courierCoIdParameter, invoiceTypeIdParameter, invoiceDateFromParameter, invoiceDateToParameter, userNameParameter);
        }
    
        public virtual ObjectResult<string> GenerateOHMemoNumbers(Nullable<int> form2Id, string iGMReferenceNumber, string eCMReferenceNumber, Nullable<int> form2Type, Nullable<int> shipmentCount, string terminalCode, Nullable<int> onHoldTime, string userName)
        {
            var form2IdParameter = form2Id.HasValue ?
                new ObjectParameter("Form2Id", form2Id) :
                new ObjectParameter("Form2Id", typeof(int));
    
            var iGMReferenceNumberParameter = iGMReferenceNumber != null ?
                new ObjectParameter("IGMReferenceNumber", iGMReferenceNumber) :
                new ObjectParameter("IGMReferenceNumber", typeof(string));
    
            var eCMReferenceNumberParameter = eCMReferenceNumber != null ?
                new ObjectParameter("ECMReferenceNumber", eCMReferenceNumber) :
                new ObjectParameter("ECMReferenceNumber", typeof(string));
    
            var form2TypeParameter = form2Type.HasValue ?
                new ObjectParameter("Form2Type", form2Type) :
                new ObjectParameter("Form2Type", typeof(int));
    
            var shipmentCountParameter = shipmentCount.HasValue ?
                new ObjectParameter("ShipmentCount", shipmentCount) :
                new ObjectParameter("ShipmentCount", typeof(int));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var onHoldTimeParameter = onHoldTime.HasValue ?
                new ObjectParameter("OnHoldTime", onHoldTime) :
                new ObjectParameter("OnHoldTime", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GenerateOHMemoNumbers", form2IdParameter, iGMReferenceNumberParameter, eCMReferenceNumberParameter, form2TypeParameter, shipmentCountParameter, terminalCodeParameter, onHoldTimeParameter, userNameParameter);
        }
    
        public virtual ObjectResult<string> GenerateUserOHNumber(Nullable<int> form2Id, string iGMReferenceNumber, string eCMReferenceNumber, Nullable<int> form2Type, Nullable<int> memoNo, Nullable<int> shipmentCount, string terminalCode, Nullable<int> onHoldTime, string userName)
        {
            var form2IdParameter = form2Id.HasValue ?
                new ObjectParameter("Form2Id", form2Id) :
                new ObjectParameter("Form2Id", typeof(int));
    
            var iGMReferenceNumberParameter = iGMReferenceNumber != null ?
                new ObjectParameter("IGMReferenceNumber", iGMReferenceNumber) :
                new ObjectParameter("IGMReferenceNumber", typeof(string));
    
            var eCMReferenceNumberParameter = eCMReferenceNumber != null ?
                new ObjectParameter("ECMReferenceNumber", eCMReferenceNumber) :
                new ObjectParameter("ECMReferenceNumber", typeof(string));
    
            var form2TypeParameter = form2Type.HasValue ?
                new ObjectParameter("Form2Type", form2Type) :
                new ObjectParameter("Form2Type", typeof(int));
    
            var memoNoParameter = memoNo.HasValue ?
                new ObjectParameter("MemoNo", memoNo) :
                new ObjectParameter("MemoNo", typeof(int));
    
            var shipmentCountParameter = shipmentCount.HasValue ?
                new ObjectParameter("ShipmentCount", shipmentCount) :
                new ObjectParameter("ShipmentCount", typeof(int));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var onHoldTimeParameter = onHoldTime.HasValue ?
                new ObjectParameter("OnHoldTime", onHoldTime) :
                new ObjectParameter("OnHoldTime", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GenerateUserOHNumber", form2IdParameter, iGMReferenceNumberParameter, eCMReferenceNumberParameter, form2TypeParameter, memoNoParameter, shipmentCountParameter, terminalCodeParameter, onHoldTimeParameter, userNameParameter);
        }
    
        public virtual ObjectResult<GetACC_ReceiptHst_Result> GetACC_ReceiptHst(Nullable<int> receiptId)
        {
            var receiptIdParameter = receiptId.HasValue ?
                new ObjectParameter("ReceiptId", receiptId) :
                new ObjectParameter("ReceiptId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetACC_ReceiptHst_Result>("GetACC_ReceiptHst", receiptIdParameter);
        }
    
        public virtual ObjectResult<string> GetAmendOHGatePassSearch(string gatePassNumber, string memoNumber, Nullable<int> courierCompanyId, string iGMReferenceNumber, string eCMReferenceNumber, Nullable<System.DateTime> oHGPFormDate, Nullable<System.DateTime> oHGPToDate, string year, string terminalCode)
        {
            var gatePassNumberParameter = gatePassNumber != null ?
                new ObjectParameter("GatePassNumber", gatePassNumber) :
                new ObjectParameter("GatePassNumber", typeof(string));
    
            var memoNumberParameter = memoNumber != null ?
                new ObjectParameter("MemoNumber", memoNumber) :
                new ObjectParameter("MemoNumber", typeof(string));
    
            var courierCompanyIdParameter = courierCompanyId.HasValue ?
                new ObjectParameter("CourierCompanyId", courierCompanyId) :
                new ObjectParameter("CourierCompanyId", typeof(int));
    
            var iGMReferenceNumberParameter = iGMReferenceNumber != null ?
                new ObjectParameter("IGMReferenceNumber", iGMReferenceNumber) :
                new ObjectParameter("IGMReferenceNumber", typeof(string));
    
            var eCMReferenceNumberParameter = eCMReferenceNumber != null ?
                new ObjectParameter("ECMReferenceNumber", eCMReferenceNumber) :
                new ObjectParameter("ECMReferenceNumber", typeof(string));
    
            var oHGPFormDateParameter = oHGPFormDate.HasValue ?
                new ObjectParameter("OHGPFormDate", oHGPFormDate) :
                new ObjectParameter("OHGPFormDate", typeof(System.DateTime));
    
            var oHGPToDateParameter = oHGPToDate.HasValue ?
                new ObjectParameter("OHGPToDate", oHGPToDate) :
                new ObjectParameter("OHGPToDate", typeof(System.DateTime));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetAmendOHGatePassSearch", gatePassNumberParameter, memoNumberParameter, courierCompanyIdParameter, iGMReferenceNumberParameter, eCMReferenceNumberParameter, oHGPFormDateParameter, oHGPToDateParameter, yearParameter, terminalCodeParameter);
        }
    
        public virtual ObjectResult<GetAUC_AuctionListHst_Result> GetAUC_AuctionListHst(Nullable<int> auctionListId)
        {
            var auctionListIdParameter = auctionListId.HasValue ?
                new ObjectParameter("AuctionListId", auctionListId) :
                new ObjectParameter("AuctionListId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAUC_AuctionListHst_Result>("GetAUC_AuctionListHst", auctionListIdParameter);
        }
    
        public virtual ObjectResult<GetAUC_BOE_Hst_Result> GetAUC_BOE_Hst(Nullable<int> aucBEOId)
        {
            var aucBEOIdParameter = aucBEOId.HasValue ?
                new ObjectParameter("AucBEOId", aucBEOId) :
                new ObjectParameter("AucBEOId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAUC_BOE_Hst_Result>("GetAUC_BOE_Hst", aucBEOIdParameter);
        }
    
        public virtual ObjectResult<GetAUC_BOEGroup_Hst_Result> GetAUC_BOEGroup_Hst(Nullable<int> aucBEOId)
        {
            var aucBEOIdParameter = aucBEOId.HasValue ?
                new ObjectParameter("AucBEOId", aucBEOId) :
                new ObjectParameter("AucBEOId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAUC_BOEGroup_Hst_Result>("GetAUC_BOEGroup_Hst", aucBEOIdParameter);
        }
    
        public virtual ObjectResult<string> GetAucStatus(Nullable<int> auctionListId)
        {
            var auctionListIdParameter = auctionListId.HasValue ?
                new ObjectParameter("AuctionListId", auctionListId) :
                new ObjectParameter("AuctionListId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetAucStatus", auctionListIdParameter);
        }
    
        public virtual ObjectResult<string> GetAuctionDetails(Nullable<int> auctionListId, string terminalCode)
        {
            var auctionListIdParameter = auctionListId.HasValue ?
                new ObjectParameter("AuctionListId", auctionListId) :
                new ObjectParameter("AuctionListId", typeof(int));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetAuctionDetails", auctionListIdParameter, terminalCodeParameter);
        }
    
        public virtual ObjectResult<string> GetAuctionList(string terminalCode, string financialYear, Nullable<System.DateTime> auctionListCutOffDate, Nullable<System.DateTime> auctionListCutOffToDate, Nullable<int> reasonId)
        {
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var financialYearParameter = financialYear != null ?
                new ObjectParameter("FinancialYear", financialYear) :
                new ObjectParameter("FinancialYear", typeof(string));
    
            var auctionListCutOffDateParameter = auctionListCutOffDate.HasValue ?
                new ObjectParameter("AuctionListCutOffDate", auctionListCutOffDate) :
                new ObjectParameter("AuctionListCutOffDate", typeof(System.DateTime));
    
            var auctionListCutOffToDateParameter = auctionListCutOffToDate.HasValue ?
                new ObjectParameter("AuctionListCutOffToDate", auctionListCutOffToDate) :
                new ObjectParameter("AuctionListCutOffToDate", typeof(System.DateTime));
    
            var reasonIdParameter = reasonId.HasValue ?
                new ObjectParameter("ReasonId", reasonId) :
                new ObjectParameter("ReasonId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetAuctionList", terminalCodeParameter, financialYearParameter, auctionListCutOffDateParameter, auctionListCutOffToDateParameter, reasonIdParameter);
        }
    
        public virtual ObjectResult<string> GetAuctionList_Old(string terminalCode, string financialYear, Nullable<System.DateTime> auctionListCutOffDate, Nullable<int> reasonId)
        {
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var financialYearParameter = financialYear != null ?
                new ObjectParameter("FinancialYear", financialYear) :
                new ObjectParameter("FinancialYear", typeof(string));
    
            var auctionListCutOffDateParameter = auctionListCutOffDate.HasValue ?
                new ObjectParameter("AuctionListCutOffDate", auctionListCutOffDate) :
                new ObjectParameter("AuctionListCutOffDate", typeof(System.DateTime));
    
            var reasonIdParameter = reasonId.HasValue ?
                new ObjectParameter("ReasonId", reasonId) :
                new ObjectParameter("ReasonId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetAuctionList_Old", terminalCodeParameter, financialYearParameter, auctionListCutOffDateParameter, reasonIdParameter);
        }
    
        public virtual int GetAuctionList1(string terminalCode, string financialYear, Nullable<System.DateTime> auctionListCutOffDate, Nullable<int> reasonId)
        {
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var financialYearParameter = financialYear != null ?
                new ObjectParameter("FinancialYear", financialYear) :
                new ObjectParameter("FinancialYear", typeof(string));
    
            var auctionListCutOffDateParameter = auctionListCutOffDate.HasValue ?
                new ObjectParameter("AuctionListCutOffDate", auctionListCutOffDate) :
                new ObjectParameter("AuctionListCutOffDate", typeof(System.DateTime));
    
            var reasonIdParameter = reasonId.HasValue ?
                new ObjectParameter("ReasonId", reasonId) :
                new ObjectParameter("ReasonId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAuctionList1", terminalCodeParameter, financialYearParameter, auctionListCutOffDateParameter, reasonIdParameter);
        }
    
        public virtual int GetAuctionListData(string aucListNumber, Nullable<System.DateTime> aucListDate, string oHMemoNumber, string hAWBNumber, string terminalCode, string finYear, string aucStatus)
        {
            var aucListNumberParameter = aucListNumber != null ?
                new ObjectParameter("AucListNumber", aucListNumber) :
                new ObjectParameter("AucListNumber", typeof(string));
    
            var aucListDateParameter = aucListDate.HasValue ?
                new ObjectParameter("AucListDate", aucListDate) :
                new ObjectParameter("AucListDate", typeof(System.DateTime));
    
            var oHMemoNumberParameter = oHMemoNumber != null ?
                new ObjectParameter("OHMemoNumber", oHMemoNumber) :
                new ObjectParameter("OHMemoNumber", typeof(string));
    
            var hAWBNumberParameter = hAWBNumber != null ?
                new ObjectParameter("HAWBNumber", hAWBNumber) :
                new ObjectParameter("HAWBNumber", typeof(string));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var finYearParameter = finYear != null ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(string));
    
            var aucStatusParameter = aucStatus != null ?
                new ObjectParameter("AucStatus", aucStatus) :
                new ObjectParameter("AucStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAuctionListData", aucListNumberParameter, aucListDateParameter, oHMemoNumberParameter, hAWBNumberParameter, terminalCodeParameter, finYearParameter, aucStatusParameter);
        }
    
        public virtual ObjectResult<GetAuctionListDtl_Result> GetAuctionListDtl(Nullable<int> auctionListId)
        {
            var auctionListIdParameter = auctionListId.HasValue ?
                new ObjectParameter("AuctionListId", auctionListId) :
                new ObjectParameter("AuctionListId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAuctionListDtl_Result>("GetAuctionListDtl", auctionListIdParameter);
        }
    
        public virtual ObjectResult<GetAuctionListNo_Result> GetAuctionListNo(string terminalCode, string financialYear)
        {
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var financialYearParameter = financialYear != null ?
                new ObjectParameter("FinancialYear", financialYear) :
                new ObjectParameter("FinancialYear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAuctionListNo_Result>("GetAuctionListNo", terminalCodeParameter, financialYearParameter);
        }
    
        public virtual ObjectResult<GetAuctionStatus_Result> GetAuctionStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAuctionStatus_Result>("GetAuctionStatus");
        }
    
        public virtual int GetAuditData(string sqlQuery)
        {
            var sqlQueryParameter = sqlQuery != null ?
                new ObjectParameter("SqlQuery", sqlQuery) :
                new ObjectParameter("SqlQuery", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAuditData", sqlQueryParameter);
        }
    
        public virtual ObjectResult<string> GetAuditReportName()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetAuditReportName");
        }
    
        public virtual ObjectResult<GetBidderDetails_Result> GetBidderDetails(Nullable<long> aucListId, string terminalCode, string financialYear)
        {
            var aucListIdParameter = aucListId.HasValue ?
                new ObjectParameter("AucListId", aucListId) :
                new ObjectParameter("AucListId", typeof(long));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var financialYearParameter = financialYear != null ?
                new ObjectParameter("FinancialYear", financialYear) :
                new ObjectParameter("FinancialYear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBidderDetails_Result>("GetBidderDetails", aucListIdParameter, terminalCodeParameter, financialYearParameter);
        }
    
        public virtual ObjectResult<GetBidderName_Result> GetBidderName(string terminalCode, string financialYear, Nullable<int> auctionListId)
        {
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var financialYearParameter = financialYear != null ?
                new ObjectParameter("FinancialYear", financialYear) :
                new ObjectParameter("FinancialYear", typeof(string));
    
            var auctionListIdParameter = auctionListId.HasValue ?
                new ObjectParameter("AuctionListId", auctionListId) :
                new ObjectParameter("AuctionListId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBidderName_Result>("GetBidderName", terminalCodeParameter, financialYearParameter, auctionListIdParameter);
        }
    
        public virtual int GetBillOfEntry(string billOfEntryNumber, string saleLotId, string auctionListNumber, string bidderName, string terminalCode)
        {
            var billOfEntryNumberParameter = billOfEntryNumber != null ?
                new ObjectParameter("BillOfEntryNumber", billOfEntryNumber) :
                new ObjectParameter("BillOfEntryNumber", typeof(string));
    
            var saleLotIdParameter = saleLotId != null ?
                new ObjectParameter("SaleLotId", saleLotId) :
                new ObjectParameter("SaleLotId", typeof(string));
    
            var auctionListNumberParameter = auctionListNumber != null ?
                new ObjectParameter("AuctionListNumber", auctionListNumber) :
                new ObjectParameter("AuctionListNumber", typeof(string));
    
            var bidderNameParameter = bidderName != null ?
                new ObjectParameter("BidderName", bidderName) :
                new ObjectParameter("BidderName", typeof(string));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetBillOfEntry", billOfEntryNumberParameter, saleLotIdParameter, auctionListNumberParameter, bidderNameParameter, terminalCodeParameter);
        }
    
        public virtual ObjectResult<GetBOEGroupData_Result> GetBOEGroupData(Nullable<int> aucBOEId, string financialYear, string terminalCode)
        {
            var aucBOEIdParameter = aucBOEId.HasValue ?
                new ObjectParameter("AucBOEId", aucBOEId) :
                new ObjectParameter("AucBOEId", typeof(int));
    
            var financialYearParameter = financialYear != null ?
                new ObjectParameter("FinancialYear", financialYear) :
                new ObjectParameter("FinancialYear", typeof(string));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBOEGroupData_Result>("GetBOEGroupData", aucBOEIdParameter, financialYearParameter, terminalCodeParameter);
        }
    
        public virtual ObjectResult<GetBOEGroupDetails_Result> GetBOEGroupDetails(Nullable<int> bOEId, string terminalCode)
        {
            var bOEIdParameter = bOEId.HasValue ?
                new ObjectParameter("BOEId", bOEId) :
                new ObjectParameter("BOEId", typeof(int));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBOEGroupDetails_Result>("GetBOEGroupDetails", bOEIdParameter, terminalCodeParameter);
        }
    
        public virtual ObjectResult<GetChequeDetails_Result> GetChequeDetails(Nullable<int> receiptdtlid, Nullable<int> onHoldGpId)
        {
            var receiptdtlidParameter = receiptdtlid.HasValue ?
                new ObjectParameter("Receiptdtlid", receiptdtlid) :
                new ObjectParameter("Receiptdtlid", typeof(int));
    
            var onHoldGpIdParameter = onHoldGpId.HasValue ?
                new ObjectParameter("OnHoldGpId", onHoldGpId) :
                new ObjectParameter("OnHoldGpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetChequeDetails_Result>("GetChequeDetails", receiptdtlidParameter, onHoldGpIdParameter);
        }
    
        public virtual ObjectResult<GetClearBy_Result> GetClearBy()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClearBy_Result>("GetClearBy");
        }
    
        public virtual ObjectResult<GetCommonMaster_Result> GetCommonMaster(string masterType)
        {
            var masterTypeParameter = masterType != null ?
                new ObjectParameter("MasterType", masterType) :
                new ObjectParameter("MasterType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCommonMaster_Result>("GetCommonMaster", masterTypeParameter);
        }
    
        public virtual ObjectResult<GetCourierCompanyName_Result> GetCourierCompanyName(string terminalCode)
        {
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCourierCompanyName_Result>("GetCourierCompanyName", terminalCodeParameter);
        }
    
        public virtual ObjectResult<GetCourierCoOSBal_Result> GetCourierCoOSBal(Nullable<long> courierCoId, string terminalCode)
        {
            var courierCoIdParameter = courierCoId.HasValue ?
                new ObjectParameter("CourierCoId", courierCoId) :
                new ObjectParameter("CourierCoId", typeof(long));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCourierCoOSBal_Result>("GetCourierCoOSBal", courierCoIdParameter, terminalCodeParameter);
        }
    
        public virtual ObjectResult<GetCourierEmployeeName_Result> GetCourierEmployeeName(string courierCoId)
        {
            var courierCoIdParameter = courierCoId != null ?
                new ObjectParameter("CourierCoId", courierCoId) :
                new ObjectParameter("CourierCoId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCourierEmployeeName_Result>("GetCourierEmployeeName", courierCoIdParameter);
        }
    
        public virtual ObjectResult<GetCourierType_Result> GetCourierType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCourierType_Result>("GetCourierType");
        }
    
        public virtual ObjectResult<GetCSB1Data_Result> GetCSB1Data(Nullable<long> cSB1Id)
        {
            var cSB1IdParameter = cSB1Id.HasValue ?
                new ObjectParameter("CSB1Id", cSB1Id) :
                new ObjectParameter("CSB1Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCSB1Data_Result>("GetCSB1Data", cSB1IdParameter);
        }
    
        public virtual ObjectResult<string> GetCSB1WAData(string terminalCode, string financialYear, string flightNumber, Nullable<System.DateTime> actualDateofDeparture, string iGMNumber, Nullable<int> releasePassId)
        {
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var financialYearParameter = financialYear != null ?
                new ObjectParameter("FinancialYear", financialYear) :
                new ObjectParameter("FinancialYear", typeof(string));
    
            var flightNumberParameter = flightNumber != null ?
                new ObjectParameter("FlightNumber", flightNumber) :
                new ObjectParameter("FlightNumber", typeof(string));
    
            var actualDateofDepartureParameter = actualDateofDeparture.HasValue ?
                new ObjectParameter("ActualDateofDeparture", actualDateofDeparture) :
                new ObjectParameter("ActualDateofDeparture", typeof(System.DateTime));
    
            var iGMNumberParameter = iGMNumber != null ?
                new ObjectParameter("IGMNumber", iGMNumber) :
                new ObjectParameter("IGMNumber", typeof(string));
    
            var releasePassIdParameter = releasePassId.HasValue ?
                new ObjectParameter("ReleasePassId", releasePassId) :
                new ObjectParameter("ReleasePassId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetCSB1WAData", terminalCodeParameter, financialYearParameter, flightNumberParameter, actualDateofDepartureParameter, iGMNumberParameter, releasePassIdParameter);
        }
    
        public virtual ObjectResult<GetCSBAcceptanceDetails_Result> GetCSBAcceptanceDetails(string terminalCode, string financialYear, Nullable<int> cSBId)
        {
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var financialYearParameter = financialYear != null ?
                new ObjectParameter("FinancialYear", financialYear) :
                new ObjectParameter("FinancialYear", typeof(string));
    
            var cSBIdParameter = cSBId.HasValue ?
                new ObjectParameter("CSBId", cSBId) :
                new ObjectParameter("CSBId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCSBAcceptanceDetails_Result>("GetCSBAcceptanceDetails", terminalCodeParameter, financialYearParameter, cSBIdParameter);
        }
    
        public virtual int GetCSBDetails(string terminalCode, string financialYear, string cSBNumber, Nullable<System.DateTime> dateOfDeparture, Nullable<long> courierCoId, string flightNumber)
        {
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var financialYearParameter = financialYear != null ?
                new ObjectParameter("FinancialYear", financialYear) :
                new ObjectParameter("FinancialYear", typeof(string));
    
            var cSBNumberParameter = cSBNumber != null ?
                new ObjectParameter("CSBNumber", cSBNumber) :
                new ObjectParameter("CSBNumber", typeof(string));
    
            var dateOfDepartureParameter = dateOfDeparture.HasValue ?
                new ObjectParameter("DateOfDeparture", dateOfDeparture) :
                new ObjectParameter("DateOfDeparture", typeof(System.DateTime));
    
            var courierCoIdParameter = courierCoId.HasValue ?
                new ObjectParameter("CourierCoId", courierCoId) :
                new ObjectParameter("CourierCoId", typeof(long));
    
            var flightNumberParameter = flightNumber != null ?
                new ObjectParameter("FlightNumber", flightNumber) :
                new ObjectParameter("FlightNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCSBDetails", terminalCodeParameter, financialYearParameter, cSBNumberParameter, dateOfDepartureParameter, courierCoIdParameter, flightNumberParameter);
        }
    
        public virtual ObjectResult<GetDataBasedOnMAWBNumber_Result> GetDataBasedOnMAWBNumber(string mAWBNo, string iGMNumber)
        {
            var mAWBNoParameter = mAWBNo != null ?
                new ObjectParameter("MAWBNo", mAWBNo) :
                new ObjectParameter("MAWBNo", typeof(string));
    
            var iGMNumberParameter = iGMNumber != null ?
                new ObjectParameter("IGMNumber", iGMNumber) :
                new ObjectParameter("IGMNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDataBasedOnMAWBNumber_Result>("GetDataBasedOnMAWBNumber", mAWBNoParameter, iGMNumberParameter);
        }
    
        public virtual ObjectResult<GetDetentionAmendDetails_Result> GetDetentionAmendDetails(Nullable<int> oHGPGatePassId, Nullable<int> oHGPReceiptTypeId, string terminalCode, string financialYear)
        {
            var oHGPGatePassIdParameter = oHGPGatePassId.HasValue ?
                new ObjectParameter("OHGPGatePassId", oHGPGatePassId) :
                new ObjectParameter("OHGPGatePassId", typeof(int));
    
            var oHGPReceiptTypeIdParameter = oHGPReceiptTypeId.HasValue ?
                new ObjectParameter("OHGPReceiptTypeId", oHGPReceiptTypeId) :
                new ObjectParameter("OHGPReceiptTypeId", typeof(int));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var financialYearParameter = financialYear != null ?
                new ObjectParameter("FinancialYear", financialYear) :
                new ObjectParameter("FinancialYear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDetentionAmendDetails_Result>("GetDetentionAmendDetails", oHGPGatePassIdParameter, oHGPReceiptTypeIdParameter, terminalCodeParameter, financialYearParameter);
        }
    
        public virtual ObjectResult<GetDetentionDetails_Result> GetDetentionDetails(Nullable<int> onHoldId, Nullable<int> receiptTypeId, string terminalCode, string finYear)
        {
            var onHoldIdParameter = onHoldId.HasValue ?
                new ObjectParameter("OnHoldId", onHoldId) :
                new ObjectParameter("OnHoldId", typeof(int));
    
            var receiptTypeIdParameter = receiptTypeId.HasValue ?
                new ObjectParameter("ReceiptTypeId", receiptTypeId) :
                new ObjectParameter("ReceiptTypeId", typeof(int));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var finYearParameter = finYear != null ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDetentionDetails_Result>("GetDetentionDetails", onHoldIdParameter, receiptTypeIdParameter, terminalCodeParameter, finYearParameter);
        }
    
        public virtual ObjectResult<GetDetentionForwardingDetails_Result> GetDetentionForwardingDetails(Nullable<int> onHoldId, Nullable<int> receiptTypeId, string terminalCode, string finYear)
        {
            var onHoldIdParameter = onHoldId.HasValue ?
                new ObjectParameter("OnHoldId", onHoldId) :
                new ObjectParameter("OnHoldId", typeof(int));
    
            var receiptTypeIdParameter = receiptTypeId.HasValue ?
                new ObjectParameter("ReceiptTypeId", receiptTypeId) :
                new ObjectParameter("ReceiptTypeId", typeof(int));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var finYearParameter = finYear != null ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDetentionForwardingDetails_Result>("GetDetentionForwardingDetails", onHoldIdParameter, receiptTypeIdParameter, terminalCodeParameter, finYearParameter);
        }
    
        public virtual ObjectResult<string> GetDetentionGatePassSearch(Nullable<int> form2Type, string oHMemoNumber, string iGMReferenceNo, string finYear, string terminalCode, Nullable<int> courierCoId, string hAWBNumber, string flightNumber, Nullable<System.DateTime> flightDate)
        {
            var form2TypeParameter = form2Type.HasValue ?
                new ObjectParameter("Form2Type", form2Type) :
                new ObjectParameter("Form2Type", typeof(int));
    
            var oHMemoNumberParameter = oHMemoNumber != null ?
                new ObjectParameter("OHMemoNumber", oHMemoNumber) :
                new ObjectParameter("OHMemoNumber", typeof(string));
    
            var iGMReferenceNoParameter = iGMReferenceNo != null ?
                new ObjectParameter("IGMReferenceNo", iGMReferenceNo) :
                new ObjectParameter("IGMReferenceNo", typeof(string));
    
            var finYearParameter = finYear != null ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(string));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var courierCoIdParameter = courierCoId.HasValue ?
                new ObjectParameter("CourierCoId", courierCoId) :
                new ObjectParameter("CourierCoId", typeof(int));
    
            var hAWBNumberParameter = hAWBNumber != null ?
                new ObjectParameter("HAWBNumber", hAWBNumber) :
                new ObjectParameter("HAWBNumber", typeof(string));
    
            var flightNumberParameter = flightNumber != null ?
                new ObjectParameter("FlightNumber", flightNumber) :
                new ObjectParameter("FlightNumber", typeof(string));
    
            var flightDateParameter = flightDate.HasValue ?
                new ObjectParameter("FlightDate", flightDate) :
                new ObjectParameter("FlightDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetDetentionGatePassSearch", form2TypeParameter, oHMemoNumberParameter, iGMReferenceNoParameter, finYearParameter, terminalCodeParameter, courierCoIdParameter, hAWBNumberParameter, flightNumberParameter, flightDateParameter);
        }
    
        public virtual ObjectResult<string> GetECCSSummExportSearch(string terminalCode, string financialYear, string eCMReferenceNo, Nullable<int> courierCoId, string cSB1No, string flightNumber, Nullable<System.DateTime> dateofDeparture, Nullable<System.DateTime> cSB1DateFrom, Nullable<System.DateTime> cSB1DateTo)
        {
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var financialYearParameter = financialYear != null ?
                new ObjectParameter("FinancialYear", financialYear) :
                new ObjectParameter("FinancialYear", typeof(string));
    
            var eCMReferenceNoParameter = eCMReferenceNo != null ?
                new ObjectParameter("ECMReferenceNo", eCMReferenceNo) :
                new ObjectParameter("ECMReferenceNo", typeof(string));
    
            var courierCoIdParameter = courierCoId.HasValue ?
                new ObjectParameter("CourierCoId", courierCoId) :
                new ObjectParameter("CourierCoId", typeof(int));
    
            var cSB1NoParameter = cSB1No != null ?
                new ObjectParameter("CSB1No", cSB1No) :
                new ObjectParameter("CSB1No", typeof(string));
    
            var flightNumberParameter = flightNumber != null ?
                new ObjectParameter("FlightNumber", flightNumber) :
                new ObjectParameter("FlightNumber", typeof(string));
    
            var dateofDepartureParameter = dateofDeparture.HasValue ?
                new ObjectParameter("DateofDeparture", dateofDeparture) :
                new ObjectParameter("DateofDeparture", typeof(System.DateTime));
    
            var cSB1DateFromParameter = cSB1DateFrom.HasValue ?
                new ObjectParameter("CSB1DateFrom", cSB1DateFrom) :
                new ObjectParameter("CSB1DateFrom", typeof(System.DateTime));
    
            var cSB1DateToParameter = cSB1DateTo.HasValue ?
                new ObjectParameter("CSB1DateTo", cSB1DateTo) :
                new ObjectParameter("CSB1DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetECCSSummExportSearch", terminalCodeParameter, financialYearParameter, eCMReferenceNoParameter, courierCoIdParameter, cSB1NoParameter, flightNumberParameter, dateofDepartureParameter, cSB1DateFromParameter, cSB1DateToParameter);
        }
    
        public virtual ObjectResult<string> GetECCSSummImportSearchData(string terminalCode, string financialYear, string iGMNo, string eCMReferenceNo, Nullable<int> courierCoId, string form2No, string flightNumber, Nullable<System.DateTime> actualDateofArrival, Nullable<System.DateTime> iGMDateFrom, Nullable<System.DateTime> iGMDateTo)
        {
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var financialYearParameter = financialYear != null ?
                new ObjectParameter("FinancialYear", financialYear) :
                new ObjectParameter("FinancialYear", typeof(string));
    
            var iGMNoParameter = iGMNo != null ?
                new ObjectParameter("IGMNo", iGMNo) :
                new ObjectParameter("IGMNo", typeof(string));
    
            var eCMReferenceNoParameter = eCMReferenceNo != null ?
                new ObjectParameter("ECMReferenceNo", eCMReferenceNo) :
                new ObjectParameter("ECMReferenceNo", typeof(string));
    
            var courierCoIdParameter = courierCoId.HasValue ?
                new ObjectParameter("CourierCoId", courierCoId) :
                new ObjectParameter("CourierCoId", typeof(int));
    
            var form2NoParameter = form2No != null ?
                new ObjectParameter("Form2No", form2No) :
                new ObjectParameter("Form2No", typeof(string));
    
            var flightNumberParameter = flightNumber != null ?
                new ObjectParameter("FlightNumber", flightNumber) :
                new ObjectParameter("FlightNumber", typeof(string));
    
            var actualDateofArrivalParameter = actualDateofArrival.HasValue ?
                new ObjectParameter("ActualDateofArrival", actualDateofArrival) :
                new ObjectParameter("ActualDateofArrival", typeof(System.DateTime));
    
            var iGMDateFromParameter = iGMDateFrom.HasValue ?
                new ObjectParameter("IGMDateFrom", iGMDateFrom) :
                new ObjectParameter("IGMDateFrom", typeof(System.DateTime));
    
            var iGMDateToParameter = iGMDateTo.HasValue ?
                new ObjectParameter("IGMDateTo", iGMDateTo) :
                new ObjectParameter("IGMDateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetECCSSummImportSearchData", terminalCodeParameter, financialYearParameter, iGMNoParameter, eCMReferenceNoParameter, courierCoIdParameter, form2NoParameter, flightNumberParameter, actualDateofArrivalParameter, iGMDateFromParameter, iGMDateToParameter);
        }
    
        public virtual ObjectResult<GetEntryGatePassData_Result> GetEntryGatePassData(Nullable<int> entryGatePassId)
        {
            var entryGatePassIdParameter = entryGatePassId.HasValue ?
                new ObjectParameter("EntryGatePassId", entryGatePassId) :
                new ObjectParameter("EntryGatePassId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEntryGatePassData_Result>("GetEntryGatePassData", entryGatePassIdParameter);
        }
    
        public virtual ObjectResult<GetExp_CSB1Hst_Result> GetExp_CSB1Hst(Nullable<int> cSB1Id)
        {
            var cSB1IdParameter = cSB1Id.HasValue ?
                new ObjectParameter("CSB1Id", cSB1Id) :
                new ObjectParameter("CSB1Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExp_CSB1Hst_Result>("GetExp_CSB1Hst", cSB1IdParameter);
        }
    
        public virtual ObjectResult<GetEXP_CSB1WeightAcceptanceHst_Result> GetEXP_CSB1WeightAcceptanceHst(Nullable<int> cSB1Id)
        {
            var cSB1IdParameter = cSB1Id.HasValue ?
                new ObjectParameter("CSB1Id", cSB1Id) :
                new ObjectParameter("CSB1Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEXP_CSB1WeightAcceptanceHst_Result>("GetEXP_CSB1WeightAcceptanceHst", cSB1IdParameter);
        }
    
        public virtual ObjectResult<GetEXP_EntryGatePassHst_Result> GetEXP_EntryGatePassHst(Nullable<int> entryGatePassId)
        {
            var entryGatePassIdParameter = entryGatePassId.HasValue ?
                new ObjectParameter("EntryGatePassId", entryGatePassId) :
                new ObjectParameter("EntryGatePassId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEXP_EntryGatePassHst_Result>("GetEXP_EntryGatePassHst", entryGatePassIdParameter);
        }
    
        public virtual ObjectResult<GetEXP_ReleasePass_Hst_Result> GetEXP_ReleasePass_Hst(Nullable<int> releasePassId)
        {
            var releasePassIdParameter = releasePassId.HasValue ?
                new ObjectParameter("ReleasePassId", releasePassId) :
                new ObjectParameter("ReleasePassId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEXP_ReleasePass_Hst_Result>("GetEXP_ReleasePass_Hst", releasePassIdParameter);
        }
    
        public virtual ObjectResult<string> GetExportGatePassSearch(string terminalCode, string financialYear, Nullable<int> courierCoId, string cSBNo, string flightNumber, Nullable<System.DateTime> actualDateofArrival)
        {
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var financialYearParameter = financialYear != null ?
                new ObjectParameter("FinancialYear", financialYear) :
                new ObjectParameter("FinancialYear", typeof(string));
    
            var courierCoIdParameter = courierCoId.HasValue ?
                new ObjectParameter("CourierCoId", courierCoId) :
                new ObjectParameter("CourierCoId", typeof(int));
    
            var cSBNoParameter = cSBNo != null ?
                new ObjectParameter("CSBNo", cSBNo) :
                new ObjectParameter("CSBNo", typeof(string));
    
            var flightNumberParameter = flightNumber != null ?
                new ObjectParameter("FlightNumber", flightNumber) :
                new ObjectParameter("FlightNumber", typeof(string));
    
            var actualDateofArrivalParameter = actualDateofArrival.HasValue ?
                new ObjectParameter("ActualDateofArrival", actualDateofArrival) :
                new ObjectParameter("ActualDateofArrival", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetExportGatePassSearch", terminalCodeParameter, financialYearParameter, courierCoIdParameter, cSBNoParameter, flightNumberParameter, actualDateofArrivalParameter);
        }
    
        public virtual ObjectResult<GetFinalcialYear_Result> GetFinalcialYear()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFinalcialYear_Result>("GetFinalcialYear");
        }
    
        public virtual ObjectResult<GetFinaltialYear_Result> GetFinaltialYear()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFinaltialYear_Result>("GetFinaltialYear");
        }
    
        public virtual ObjectResult<string> GetFlightData(string form1Number, string iGMNumber, string flightNumber, Nullable<System.DateTime> flightDate, Nullable<int> courierCompanyId, string terminalCode, string financialYear, string mAWBNumber)
        {
            var form1NumberParameter = form1Number != null ?
                new ObjectParameter("Form1Number", form1Number) :
                new ObjectParameter("Form1Number", typeof(string));
    
            var iGMNumberParameter = iGMNumber != null ?
                new ObjectParameter("IGMNumber", iGMNumber) :
                new ObjectParameter("IGMNumber", typeof(string));
    
            var flightNumberParameter = flightNumber != null ?
                new ObjectParameter("FlightNumber", flightNumber) :
                new ObjectParameter("FlightNumber", typeof(string));
    
            var flightDateParameter = flightDate.HasValue ?
                new ObjectParameter("FlightDate", flightDate) :
                new ObjectParameter("FlightDate", typeof(System.DateTime));
    
            var courierCompanyIdParameter = courierCompanyId.HasValue ?
                new ObjectParameter("CourierCompanyId", courierCompanyId) :
                new ObjectParameter("CourierCompanyId", typeof(int));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var financialYearParameter = financialYear != null ?
                new ObjectParameter("FinancialYear", financialYear) :
                new ObjectParameter("FinancialYear", typeof(string));
    
            var mAWBNumberParameter = mAWBNumber != null ?
                new ObjectParameter("MAWBNumber", mAWBNumber) :
                new ObjectParameter("MAWBNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetFlightData", form1NumberParameter, iGMNumberParameter, flightNumberParameter, flightDateParameter, courierCompanyIdParameter, terminalCodeParameter, financialYearParameter, mAWBNumberParameter);
        }
    
        public virtual ObjectResult<GetFlightDetails_Result> GetFlightDetails(string flightNumber, string terminalCode)
        {
            var flightNumberParameter = flightNumber != null ?
                new ObjectParameter("FlightNumber", flightNumber) :
                new ObjectParameter("FlightNumber", typeof(string));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFlightDetails_Result>("GetFlightDetails", flightNumberParameter, terminalCodeParameter);
        }
    
        public virtual ObjectResult<GetFlightNumber_Result> GetFlightNumber(string terminalCode, string airlineCode, string flightType)
        {
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var airlineCodeParameter = airlineCode != null ?
                new ObjectParameter("AirlineCode", airlineCode) :
                new ObjectParameter("AirlineCode", typeof(string));
    
            var flightTypeParameter = flightType != null ?
                new ObjectParameter("FlightType", flightType) :
                new ObjectParameter("FlightType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFlightNumber_Result>("GetFlightNumber", terminalCodeParameter, airlineCodeParameter, flightTypeParameter);
        }
    
        public virtual ObjectResult<GetForm1CheckStatus_Result> GetForm1CheckStatus(string iGMNumber, string mAWBNumber, string terminalCode)
        {
            var iGMNumberParameter = iGMNumber != null ?
                new ObjectParameter("IGMNumber", iGMNumber) :
                new ObjectParameter("IGMNumber", typeof(string));
    
            var mAWBNumberParameter = mAWBNumber != null ?
                new ObjectParameter("MAWBNumber", mAWBNumber) :
                new ObjectParameter("MAWBNumber", typeof(string));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetForm1CheckStatus_Result>("GetForm1CheckStatus", iGMNumberParameter, mAWBNumberParameter, terminalCodeParameter);
        }
    
        public virtual ObjectResult<GetForm1Data_Result> GetForm1Data(Nullable<long> form1Id, string terminalCode)
        {
            var form1IdParameter = form1Id.HasValue ?
                new ObjectParameter("Form1Id", form1Id) :
                new ObjectParameter("Form1Id", typeof(long));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetForm1Data_Result>("GetForm1Data", form1IdParameter, terminalCodeParameter);
        }
    
        public virtual ObjectResult<GetForm2Data_Result> GetForm2Data(Nullable<long> form2Id)
        {
            var form2IdParameter = form2Id.HasValue ?
                new ObjectParameter("Form2Id", form2Id) :
                new ObjectParameter("Form2Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetForm2Data_Result>("GetForm2Data", form2IdParameter);
        }
    
        public virtual ObjectResult<GetGatePassAmendData_Result> GetGatePassAmendData(Nullable<long> gatePassId, Nullable<int> receiptType, Nullable<int> form2Type, string terminalCode)
        {
            var gatePassIdParameter = gatePassId.HasValue ?
                new ObjectParameter("GatePassId", gatePassId) :
                new ObjectParameter("GatePassId", typeof(long));
    
            var receiptTypeParameter = receiptType.HasValue ?
                new ObjectParameter("ReceiptType", receiptType) :
                new ObjectParameter("ReceiptType", typeof(int));
    
            var form2TypeParameter = form2Type.HasValue ?
                new ObjectParameter("Form2Type", form2Type) :
                new ObjectParameter("Form2Type", typeof(int));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetGatePassAmendData_Result>("GetGatePassAmendData", gatePassIdParameter, receiptTypeParameter, form2TypeParameter, terminalCodeParameter);
        }
    
        public virtual ObjectResult<GetGatePassData_Result> GetGatePassData(string terminalCode, string eCMReferenceNo, string iGMNumber, Nullable<long> form2Id, Nullable<long> form2Type)
        {
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var eCMReferenceNoParameter = eCMReferenceNo != null ?
                new ObjectParameter("ECMReferenceNo", eCMReferenceNo) :
                new ObjectParameter("ECMReferenceNo", typeof(string));
    
            var iGMNumberParameter = iGMNumber != null ?
                new ObjectParameter("IGMNumber", iGMNumber) :
                new ObjectParameter("IGMNumber", typeof(string));
    
            var form2IdParameter = form2Id.HasValue ?
                new ObjectParameter("Form2Id", form2Id) :
                new ObjectParameter("Form2Id", typeof(long));
    
            var form2TypeParameter = form2Type.HasValue ?
                new ObjectParameter("Form2Type", form2Type) :
                new ObjectParameter("Form2Type", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetGatePassData_Result>("GetGatePassData", terminalCodeParameter, eCMReferenceNoParameter, iGMNumberParameter, form2IdParameter, form2TypeParameter);
        }
    
        public virtual ObjectResult<GetGatePassDetainView_Result> GetGatePassDetainView(Nullable<int> form2Id, Nullable<int> form2Type)
        {
            var form2IdParameter = form2Id.HasValue ?
                new ObjectParameter("Form2Id", form2Id) :
                new ObjectParameter("Form2Id", typeof(int));
    
            var form2TypeParameter = form2Type.HasValue ?
                new ObjectParameter("Form2Type", form2Type) :
                new ObjectParameter("Form2Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetGatePassDetainView_Result>("GetGatePassDetainView", form2IdParameter, form2TypeParameter);
        }
    
        public virtual ObjectResult<GetGatePassIssuedView_Result> GetGatePassIssuedView(Nullable<int> form2Id, Nullable<int> form2Type)
        {
            var form2IdParameter = form2Id.HasValue ?
                new ObjectParameter("Form2Id", form2Id) :
                new ObjectParameter("Form2Id", typeof(int));
    
            var form2TypeParameter = form2Type.HasValue ?
                new ObjectParameter("Form2Type", form2Type) :
                new ObjectParameter("Form2Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetGatePassIssuedView_Result>("GetGatePassIssuedView", form2IdParameter, form2TypeParameter);
        }
    
        public virtual ObjectResult<GetGatePassNo_Result> GetGatePassNo(string terminalCode, string finYear)
        {
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var finYearParameter = finYear != null ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetGatePassNo_Result>("GetGatePassNo", terminalCodeParameter, finYearParameter);
        }
    
        public virtual ObjectResult<string> GetGatePassRecord(string gatePassNo, Nullable<long> from2Type, Nullable<System.DateTime> gatePassFormDate, Nullable<System.DateTime> gatePassToDate, string iGMReferenceNumber, string eCMReferenceNumber, string terminalCode, string financialYear, Nullable<int> gPReceiptTypeId)
        {
            var gatePassNoParameter = gatePassNo != null ?
                new ObjectParameter("GatePassNo", gatePassNo) :
                new ObjectParameter("GatePassNo", typeof(string));
    
            var from2TypeParameter = from2Type.HasValue ?
                new ObjectParameter("From2Type", from2Type) :
                new ObjectParameter("From2Type", typeof(long));
    
            var gatePassFormDateParameter = gatePassFormDate.HasValue ?
                new ObjectParameter("GatePassFormDate", gatePassFormDate) :
                new ObjectParameter("GatePassFormDate", typeof(System.DateTime));
    
            var gatePassToDateParameter = gatePassToDate.HasValue ?
                new ObjectParameter("GatePassToDate", gatePassToDate) :
                new ObjectParameter("GatePassToDate", typeof(System.DateTime));
    
            var iGMReferenceNumberParameter = iGMReferenceNumber != null ?
                new ObjectParameter("IGMReferenceNumber", iGMReferenceNumber) :
                new ObjectParameter("IGMReferenceNumber", typeof(string));
    
            var eCMReferenceNumberParameter = eCMReferenceNumber != null ?
                new ObjectParameter("ECMReferenceNumber", eCMReferenceNumber) :
                new ObjectParameter("ECMReferenceNumber", typeof(string));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var financialYearParameter = financialYear != null ?
                new ObjectParameter("FinancialYear", financialYear) :
                new ObjectParameter("FinancialYear", typeof(string));
    
            var gPReceiptTypeIdParameter = gPReceiptTypeId.HasValue ?
                new ObjectParameter("GPReceiptTypeId", gPReceiptTypeId) :
                new ObjectParameter("GPReceiptTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetGatePassRecord", gatePassNoParameter, from2TypeParameter, gatePassFormDateParameter, gatePassToDateParameter, iGMReferenceNumberParameter, eCMReferenceNumberParameter, terminalCodeParameter, financialYearParameter, gPReceiptTypeIdParameter);
        }
    
        public virtual ObjectResult<string> GetGatePassSearchData(string terminalCode, string financialYear, string iGMNo, string eCMReferenceNo, Nullable<int> courierCoId, string flightNumber, Nullable<System.DateTime> actualDateofArrival, Nullable<System.DateTime> iGMDateFrom, Nullable<System.DateTime> iGMDateTo, string countryOfOrigin, string thokaNo)
        {
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var financialYearParameter = financialYear != null ?
                new ObjectParameter("FinancialYear", financialYear) :
                new ObjectParameter("FinancialYear", typeof(string));
    
            var iGMNoParameter = iGMNo != null ?
                new ObjectParameter("IGMNo", iGMNo) :
                new ObjectParameter("IGMNo", typeof(string));
    
            var eCMReferenceNoParameter = eCMReferenceNo != null ?
                new ObjectParameter("ECMReferenceNo", eCMReferenceNo) :
                new ObjectParameter("ECMReferenceNo", typeof(string));
    
            var courierCoIdParameter = courierCoId.HasValue ?
                new ObjectParameter("CourierCoId", courierCoId) :
                new ObjectParameter("CourierCoId", typeof(int));
    
            var flightNumberParameter = flightNumber != null ?
                new ObjectParameter("FlightNumber", flightNumber) :
                new ObjectParameter("FlightNumber", typeof(string));
    
            var actualDateofArrivalParameter = actualDateofArrival.HasValue ?
                new ObjectParameter("ActualDateofArrival", actualDateofArrival) :
                new ObjectParameter("ActualDateofArrival", typeof(System.DateTime));
    
            var iGMDateFromParameter = iGMDateFrom.HasValue ?
                new ObjectParameter("IGMDateFrom", iGMDateFrom) :
                new ObjectParameter("IGMDateFrom", typeof(System.DateTime));
    
            var iGMDateToParameter = iGMDateTo.HasValue ?
                new ObjectParameter("IGMDateTo", iGMDateTo) :
                new ObjectParameter("IGMDateTo", typeof(System.DateTime));
    
            var countryOfOriginParameter = countryOfOrigin != null ?
                new ObjectParameter("CountryOfOrigin", countryOfOrigin) :
                new ObjectParameter("CountryOfOrigin", typeof(string));
    
            var thokaNoParameter = thokaNo != null ?
                new ObjectParameter("ThokaNo", thokaNo) :
                new ObjectParameter("ThokaNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetGatePassSearchData", terminalCodeParameter, financialYearParameter, iGMNoParameter, eCMReferenceNoParameter, courierCoIdParameter, flightNumberParameter, actualDateofArrivalParameter, iGMDateFromParameter, iGMDateToParameter, countryOfOriginParameter, thokaNoParameter);
        }
    
        public virtual ObjectResult<string> GetIMP_AmendOHGatePass(string oHGPGatePassId)
        {
            var oHGPGatePassIdParameter = oHGPGatePassId != null ?
                new ObjectParameter("OHGPGatePassId", oHGPGatePassId) :
                new ObjectParameter("OHGPGatePassId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetIMP_AmendOHGatePass", oHGPGatePassIdParameter);
        }
    
        public virtual ObjectResult<GetImp_Form1Hst_Result> GetImp_Form1Hst(Nullable<int> form1Id)
        {
            var form1IdParameter = form1Id.HasValue ?
                new ObjectParameter("Form1Id", form1Id) :
                new ObjectParameter("Form1Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetImp_Form1Hst_Result>("GetImp_Form1Hst", form1IdParameter);
        }
    
        public virtual ObjectResult<GetImp_Form1Hst_09022016_Result> GetImp_Form1Hst_09022016(Nullable<int> form1Id)
        {
            var form1IdParameter = form1Id.HasValue ?
                new ObjectParameter("Form1Id", form1Id) :
                new ObjectParameter("Form1Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetImp_Form1Hst_09022016_Result>("GetImp_Form1Hst_09022016", form1IdParameter);
        }
    
        public virtual ObjectResult<GetImp_Form2Hst_Result> GetImp_Form2Hst(Nullable<int> form2Id)
        {
            var form2IdParameter = form2Id.HasValue ?
                new ObjectParameter("Form2Id", form2Id) :
                new ObjectParameter("Form2Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetImp_Form2Hst_Result>("GetImp_Form2Hst", form2IdParameter);
        }
    
        public virtual ObjectResult<GetImp_GatePassHst_Result> GetImp_GatePassHst(Nullable<int> gatePassId)
        {
            var gatePassIdParameter = gatePassId.HasValue ?
                new ObjectParameter("GatePassId", gatePassId) :
                new ObjectParameter("GatePassId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetImp_GatePassHst_Result>("GetImp_GatePassHst", gatePassIdParameter);
        }
    
        public virtual ObjectResult<GetIMP_OnHoldMemoHst_Result> GetIMP_OnHoldMemoHst(Nullable<int> onHoldId)
        {
            var onHoldIdParameter = onHoldId.HasValue ?
                new ObjectParameter("OnHoldId", onHoldId) :
                new ObjectParameter("OnHoldId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetIMP_OnHoldMemoHst_Result>("GetIMP_OnHoldMemoHst", onHoldIdParameter);
        }
    
        public virtual ObjectResult<GetImpDelayCharges_Result> GetImpDelayCharges(string chargeType, string terminalCode, string module, Nullable<int> formType, Nullable<decimal> noofDays)
        {
            var chargeTypeParameter = chargeType != null ?
                new ObjectParameter("ChargeType", chargeType) :
                new ObjectParameter("ChargeType", typeof(string));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var moduleParameter = module != null ?
                new ObjectParameter("Module", module) :
                new ObjectParameter("Module", typeof(string));
    
            var formTypeParameter = formType.HasValue ?
                new ObjectParameter("FormType", formType) :
                new ObjectParameter("FormType", typeof(int));
    
            var noofDaysParameter = noofDays.HasValue ?
                new ObjectParameter("NoofDays", noofDays) :
                new ObjectParameter("NoofDays", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetImpDelayCharges_Result>("GetImpDelayCharges", chargeTypeParameter, terminalCodeParameter, moduleParameter, formTypeParameter, noofDaysParameter);
        }
    
        public virtual int GetInvoiceSearchData(string terminalCode, string invoiceNo, Nullable<int> courierCoId, Nullable<int> invoiceTypeId, Nullable<System.DateTime> invoiceDateFrom, Nullable<System.DateTime> invoiceDateTo, string finYear)
        {
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var courierCoIdParameter = courierCoId.HasValue ?
                new ObjectParameter("CourierCoId", courierCoId) :
                new ObjectParameter("CourierCoId", typeof(int));
    
            var invoiceTypeIdParameter = invoiceTypeId.HasValue ?
                new ObjectParameter("InvoiceTypeId", invoiceTypeId) :
                new ObjectParameter("InvoiceTypeId", typeof(int));
    
            var invoiceDateFromParameter = invoiceDateFrom.HasValue ?
                new ObjectParameter("InvoiceDateFrom", invoiceDateFrom) :
                new ObjectParameter("InvoiceDateFrom", typeof(System.DateTime));
    
            var invoiceDateToParameter = invoiceDateTo.HasValue ?
                new ObjectParameter("InvoiceDateTo", invoiceDateTo) :
                new ObjectParameter("InvoiceDateTo", typeof(System.DateTime));
    
            var finYearParameter = finYear != null ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetInvoiceSearchData", terminalCodeParameter, invoiceNoParameter, courierCoIdParameter, invoiceTypeIdParameter, invoiceDateFromParameter, invoiceDateToParameter, finYearParameter);
        }
    
        public virtual ObjectResult<string> GetMAWBNumber(string igmNumber)
        {
            var igmNumberParameter = igmNumber != null ?
                new ObjectParameter("IgmNumber", igmNumber) :
                new ObjectParameter("IgmNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetMAWBNumber", igmNumberParameter);
        }
    
        public virtual int GetOnholdMaterialInwordSearch(string eCFReferenceNumber, string iGMReferenceNumber, Nullable<long> courierCompanyId, Nullable<int> airlineId, string flightNumber, string onHoldNumber, Nullable<System.DateTime> flightDate, string hAWBNumber, string terminalCode, string finyear, string wareHouseLocation, string inwardstatus)
        {
            var eCFReferenceNumberParameter = eCFReferenceNumber != null ?
                new ObjectParameter("ECFReferenceNumber", eCFReferenceNumber) :
                new ObjectParameter("ECFReferenceNumber", typeof(string));
    
            var iGMReferenceNumberParameter = iGMReferenceNumber != null ?
                new ObjectParameter("IGMReferenceNumber", iGMReferenceNumber) :
                new ObjectParameter("IGMReferenceNumber", typeof(string));
    
            var courierCompanyIdParameter = courierCompanyId.HasValue ?
                new ObjectParameter("CourierCompanyId", courierCompanyId) :
                new ObjectParameter("CourierCompanyId", typeof(long));
    
            var airlineIdParameter = airlineId.HasValue ?
                new ObjectParameter("AirlineId", airlineId) :
                new ObjectParameter("AirlineId", typeof(int));
    
            var flightNumberParameter = flightNumber != null ?
                new ObjectParameter("FlightNumber", flightNumber) :
                new ObjectParameter("FlightNumber", typeof(string));
    
            var onHoldNumberParameter = onHoldNumber != null ?
                new ObjectParameter("OnHoldNumber", onHoldNumber) :
                new ObjectParameter("OnHoldNumber", typeof(string));
    
            var flightDateParameter = flightDate.HasValue ?
                new ObjectParameter("FlightDate", flightDate) :
                new ObjectParameter("FlightDate", typeof(System.DateTime));
    
            var hAWBNumberParameter = hAWBNumber != null ?
                new ObjectParameter("HAWBNumber", hAWBNumber) :
                new ObjectParameter("HAWBNumber", typeof(string));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var finyearParameter = finyear != null ?
                new ObjectParameter("Finyear", finyear) :
                new ObjectParameter("Finyear", typeof(string));
    
            var wareHouseLocationParameter = wareHouseLocation != null ?
                new ObjectParameter("WareHouseLocation", wareHouseLocation) :
                new ObjectParameter("WareHouseLocation", typeof(string));
    
            var inwardstatusParameter = inwardstatus != null ?
                new ObjectParameter("Inwardstatus", inwardstatus) :
                new ObjectParameter("Inwardstatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetOnholdMaterialInwordSearch", eCFReferenceNumberParameter, iGMReferenceNumberParameter, courierCompanyIdParameter, airlineIdParameter, flightNumberParameter, onHoldNumberParameter, flightDateParameter, hAWBNumberParameter, terminalCodeParameter, finyearParameter, wareHouseLocationParameter, inwardstatusParameter);
        }
    
        public virtual ObjectResult<string> GetOnholdMemoDetails(string eCFReferenceNumber, string iGMReferenceNumber, Nullable<long> courierCompanyId, string flightNumber, string onHoldNumber, Nullable<System.DateTime> flightDate, Nullable<System.DateTime> iGMReferenceDate, string hAWBNo, string terminalCode, string finyear)
        {
            var eCFReferenceNumberParameter = eCFReferenceNumber != null ?
                new ObjectParameter("ECFReferenceNumber", eCFReferenceNumber) :
                new ObjectParameter("ECFReferenceNumber", typeof(string));
    
            var iGMReferenceNumberParameter = iGMReferenceNumber != null ?
                new ObjectParameter("IGMReferenceNumber", iGMReferenceNumber) :
                new ObjectParameter("IGMReferenceNumber", typeof(string));
    
            var courierCompanyIdParameter = courierCompanyId.HasValue ?
                new ObjectParameter("CourierCompanyId", courierCompanyId) :
                new ObjectParameter("CourierCompanyId", typeof(long));
    
            var flightNumberParameter = flightNumber != null ?
                new ObjectParameter("FlightNumber", flightNumber) :
                new ObjectParameter("FlightNumber", typeof(string));
    
            var onHoldNumberParameter = onHoldNumber != null ?
                new ObjectParameter("OnHoldNumber", onHoldNumber) :
                new ObjectParameter("OnHoldNumber", typeof(string));
    
            var flightDateParameter = flightDate.HasValue ?
                new ObjectParameter("FlightDate", flightDate) :
                new ObjectParameter("FlightDate", typeof(System.DateTime));
    
            var iGMReferenceDateParameter = iGMReferenceDate.HasValue ?
                new ObjectParameter("IGMReferenceDate", iGMReferenceDate) :
                new ObjectParameter("IGMReferenceDate", typeof(System.DateTime));
    
            var hAWBNoParameter = hAWBNo != null ?
                new ObjectParameter("HAWBNo", hAWBNo) :
                new ObjectParameter("HAWBNo", typeof(string));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var finyearParameter = finyear != null ?
                new ObjectParameter("Finyear", finyear) :
                new ObjectParameter("Finyear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetOnholdMemoDetails", eCFReferenceNumberParameter, iGMReferenceNumberParameter, courierCompanyIdParameter, flightNumberParameter, onHoldNumberParameter, flightDateParameter, iGMReferenceDateParameter, hAWBNoParameter, terminalCodeParameter, finyearParameter);
        }
    
        public virtual int GetOnholdMemoEXPDetails(Nullable<long> courierCompanyId, string flightNumber, string onHoldNumber, Nullable<System.DateTime> flightDate, Nullable<System.DateTime> cSB1Date, string hAWBNo, string terminalCode, string finyear)
        {
            var courierCompanyIdParameter = courierCompanyId.HasValue ?
                new ObjectParameter("CourierCompanyId", courierCompanyId) :
                new ObjectParameter("CourierCompanyId", typeof(long));
    
            var flightNumberParameter = flightNumber != null ?
                new ObjectParameter("FlightNumber", flightNumber) :
                new ObjectParameter("FlightNumber", typeof(string));
    
            var onHoldNumberParameter = onHoldNumber != null ?
                new ObjectParameter("OnHoldNumber", onHoldNumber) :
                new ObjectParameter("OnHoldNumber", typeof(string));
    
            var flightDateParameter = flightDate.HasValue ?
                new ObjectParameter("FlightDate", flightDate) :
                new ObjectParameter("FlightDate", typeof(System.DateTime));
    
            var cSB1DateParameter = cSB1Date.HasValue ?
                new ObjectParameter("CSB1Date", cSB1Date) :
                new ObjectParameter("CSB1Date", typeof(System.DateTime));
    
            var hAWBNoParameter = hAWBNo != null ?
                new ObjectParameter("HAWBNo", hAWBNo) :
                new ObjectParameter("HAWBNo", typeof(string));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var finyearParameter = finyear != null ?
                new ObjectParameter("Finyear", finyear) :
                new ObjectParameter("Finyear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetOnholdMemoEXPDetails", courierCompanyIdParameter, flightNumberParameter, onHoldNumberParameter, flightDateParameter, cSB1DateParameter, hAWBNoParameter, terminalCodeParameter, finyearParameter);
        }
    
        public virtual ObjectResult<GetOnHoldReason_Result> GetOnHoldReason()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOnHoldReason_Result>("GetOnHoldReason");
        }
    
        public virtual ObjectResult<GetOnHoldRecordDetails_Result> GetOnHoldRecordDetails(Nullable<long> onHoldId, string memoNo, string type, string financialYear, string terminalCode)
        {
            var onHoldIdParameter = onHoldId.HasValue ?
                new ObjectParameter("OnHoldId", onHoldId) :
                new ObjectParameter("OnHoldId", typeof(long));
    
            var memoNoParameter = memoNo != null ?
                new ObjectParameter("MemoNo", memoNo) :
                new ObjectParameter("MemoNo", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var financialYearParameter = financialYear != null ?
                new ObjectParameter("FinancialYear", financialYear) :
                new ObjectParameter("FinancialYear", typeof(string));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOnHoldRecordDetails_Result>("GetOnHoldRecordDetails", onHoldIdParameter, memoNoParameter, typeParameter, financialYearParameter, terminalCodeParameter);
        }
    
        public virtual int GetOnholdTemporarySearch(string eCFReferenceNumber, string iGMReferenceNumber, Nullable<long> courierCompanyId, Nullable<int> airlineId, string flightNumber, string onHoldNumber, Nullable<System.DateTime> flightDate, string hAWBNumber, string terminalCode, string finyear, string wareHouseLocation, string consigneeName)
        {
            var eCFReferenceNumberParameter = eCFReferenceNumber != null ?
                new ObjectParameter("ECFReferenceNumber", eCFReferenceNumber) :
                new ObjectParameter("ECFReferenceNumber", typeof(string));
    
            var iGMReferenceNumberParameter = iGMReferenceNumber != null ?
                new ObjectParameter("IGMReferenceNumber", iGMReferenceNumber) :
                new ObjectParameter("IGMReferenceNumber", typeof(string));
    
            var courierCompanyIdParameter = courierCompanyId.HasValue ?
                new ObjectParameter("CourierCompanyId", courierCompanyId) :
                new ObjectParameter("CourierCompanyId", typeof(long));
    
            var airlineIdParameter = airlineId.HasValue ?
                new ObjectParameter("AirlineId", airlineId) :
                new ObjectParameter("AirlineId", typeof(int));
    
            var flightNumberParameter = flightNumber != null ?
                new ObjectParameter("FlightNumber", flightNumber) :
                new ObjectParameter("FlightNumber", typeof(string));
    
            var onHoldNumberParameter = onHoldNumber != null ?
                new ObjectParameter("OnHoldNumber", onHoldNumber) :
                new ObjectParameter("OnHoldNumber", typeof(string));
    
            var flightDateParameter = flightDate.HasValue ?
                new ObjectParameter("FlightDate", flightDate) :
                new ObjectParameter("FlightDate", typeof(System.DateTime));
    
            var hAWBNumberParameter = hAWBNumber != null ?
                new ObjectParameter("HAWBNumber", hAWBNumber) :
                new ObjectParameter("HAWBNumber", typeof(string));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var finyearParameter = finyear != null ?
                new ObjectParameter("Finyear", finyear) :
                new ObjectParameter("Finyear", typeof(string));
    
            var wareHouseLocationParameter = wareHouseLocation != null ?
                new ObjectParameter("WareHouseLocation", wareHouseLocation) :
                new ObjectParameter("WareHouseLocation", typeof(string));
    
            var consigneeNameParameter = consigneeName != null ?
                new ObjectParameter("ConsigneeName", consigneeName) :
                new ObjectParameter("ConsigneeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetOnholdTemporarySearch", eCFReferenceNumberParameter, iGMReferenceNumberParameter, courierCompanyIdParameter, airlineIdParameter, flightNumberParameter, onHoldNumberParameter, flightDateParameter, hAWBNumberParameter, terminalCodeParameter, finyearParameter, wareHouseLocationParameter, consigneeNameParameter);
        }
    
        public virtual ObjectResult<GetOnHoldType_Result> GetOnHoldType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOnHoldType_Result>("GetOnHoldType");
        }
    
        public virtual ObjectResult<string> GetOnholdWarehouse(Nullable<int> form2Type, string finyear, string terminalCode, string hAWBNo, Nullable<System.DateTime> onHoldDt, Nullable<System.DateTime> flightDt, string iGMNumber, string flightNumber, Nullable<int> courierCoId)
        {
            var form2TypeParameter = form2Type.HasValue ?
                new ObjectParameter("Form2Type", form2Type) :
                new ObjectParameter("Form2Type", typeof(int));
    
            var finyearParameter = finyear != null ?
                new ObjectParameter("Finyear", finyear) :
                new ObjectParameter("Finyear", typeof(string));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var hAWBNoParameter = hAWBNo != null ?
                new ObjectParameter("HAWBNo", hAWBNo) :
                new ObjectParameter("HAWBNo", typeof(string));
    
            var onHoldDtParameter = onHoldDt.HasValue ?
                new ObjectParameter("OnHoldDt", onHoldDt) :
                new ObjectParameter("OnHoldDt", typeof(System.DateTime));
    
            var flightDtParameter = flightDt.HasValue ?
                new ObjectParameter("FlightDt", flightDt) :
                new ObjectParameter("FlightDt", typeof(System.DateTime));
    
            var iGMNumberParameter = iGMNumber != null ?
                new ObjectParameter("IGMNumber", iGMNumber) :
                new ObjectParameter("IGMNumber", typeof(string));
    
            var flightNumberParameter = flightNumber != null ?
                new ObjectParameter("FlightNumber", flightNumber) :
                new ObjectParameter("FlightNumber", typeof(string));
    
            var courierCoIdParameter = courierCoId.HasValue ?
                new ObjectParameter("CourierCoId", courierCoId) :
                new ObjectParameter("CourierCoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetOnholdWarehouse", form2TypeParameter, finyearParameter, terminalCodeParameter, hAWBNoParameter, onHoldDtParameter, flightDtParameter, iGMNumberParameter, flightNumberParameter, courierCoIdParameter);
        }
    
        public virtual ObjectResult<GetOnHoldWarehouseDetails_Result> GetOnHoldWarehouseDetails(Nullable<long> onHoldId, Nullable<long> form2Type, string memoNumber, string terminalCode, string username)
        {
            var onHoldIdParameter = onHoldId.HasValue ?
                new ObjectParameter("OnHoldId", onHoldId) :
                new ObjectParameter("OnHoldId", typeof(long));
    
            var form2TypeParameter = form2Type.HasValue ?
                new ObjectParameter("Form2Type", form2Type) :
                new ObjectParameter("Form2Type", typeof(long));
    
            var memoNumberParameter = memoNumber != null ?
                new ObjectParameter("MemoNumber", memoNumber) :
                new ObjectParameter("MemoNumber", typeof(string));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOnHoldWarehouseDetails_Result>("GetOnHoldWarehouseDetails", onHoldIdParameter, form2TypeParameter, memoNumberParameter, terminalCodeParameter, usernameParameter);
        }
    
        public virtual ObjectResult<GetPackageName_Result> GetPackageName()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPackageName_Result>("GetPackageName");
        }
    
        public virtual ObjectResult<GetPaymentMode_Result> GetPaymentMode()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPaymentMode_Result>("GetPaymentMode");
        }
    
        public virtual ObjectResult<GetReceiptChargeType_Result> GetReceiptChargeType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetReceiptChargeType_Result>("GetReceiptChargeType");
        }
    
        public virtual ObjectResult<GetReceiptDetails_Result> GetReceiptDetails(Nullable<int> cSB1WAId, string terminalCode, string financialYear)
        {
            var cSB1WAIdParameter = cSB1WAId.HasValue ?
                new ObjectParameter("CSB1WAId", cSB1WAId) :
                new ObjectParameter("CSB1WAId", typeof(int));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var financialYearParameter = financialYear != null ?
                new ObjectParameter("FinancialYear", financialYear) :
                new ObjectParameter("FinancialYear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetReceiptDetails_Result>("GetReceiptDetails", cSB1WAIdParameter, terminalCodeParameter, financialYearParameter);
        }
    
        public virtual int GetReceiptInfo(string receiptNo, Nullable<int> courierCompanyId, Nullable<System.DateTime> receiptFromDt, Nullable<System.DateTime> receiptToDt, Nullable<int> receiptTypeId, string terminalCode, string financialYear)
        {
            var receiptNoParameter = receiptNo != null ?
                new ObjectParameter("ReceiptNo", receiptNo) :
                new ObjectParameter("ReceiptNo", typeof(string));
    
            var courierCompanyIdParameter = courierCompanyId.HasValue ?
                new ObjectParameter("CourierCompanyId", courierCompanyId) :
                new ObjectParameter("CourierCompanyId", typeof(int));
    
            var receiptFromDtParameter = receiptFromDt.HasValue ?
                new ObjectParameter("ReceiptFromDt", receiptFromDt) :
                new ObjectParameter("ReceiptFromDt", typeof(System.DateTime));
    
            var receiptToDtParameter = receiptToDt.HasValue ?
                new ObjectParameter("ReceiptToDt", receiptToDt) :
                new ObjectParameter("ReceiptToDt", typeof(System.DateTime));
    
            var receiptTypeIdParameter = receiptTypeId.HasValue ?
                new ObjectParameter("ReceiptTypeId", receiptTypeId) :
                new ObjectParameter("ReceiptTypeId", typeof(int));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var financialYearParameter = financialYear != null ?
                new ObjectParameter("FinancialYear", financialYear) :
                new ObjectParameter("FinancialYear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetReceiptInfo", receiptNoParameter, courierCompanyIdParameter, receiptFromDtParameter, receiptToDtParameter, receiptTypeIdParameter, terminalCodeParameter, financialYearParameter);
        }
    
        public virtual int GetReceiptInfo_bak_20150317(string receiptNo, Nullable<int> courierCompanyId, Nullable<System.DateTime> receiptFromDt, Nullable<System.DateTime> receiptToDt, Nullable<int> receiptTypeId, string terminalCode, string financialYear)
        {
            var receiptNoParameter = receiptNo != null ?
                new ObjectParameter("ReceiptNo", receiptNo) :
                new ObjectParameter("ReceiptNo", typeof(string));
    
            var courierCompanyIdParameter = courierCompanyId.HasValue ?
                new ObjectParameter("CourierCompanyId", courierCompanyId) :
                new ObjectParameter("CourierCompanyId", typeof(int));
    
            var receiptFromDtParameter = receiptFromDt.HasValue ?
                new ObjectParameter("ReceiptFromDt", receiptFromDt) :
                new ObjectParameter("ReceiptFromDt", typeof(System.DateTime));
    
            var receiptToDtParameter = receiptToDt.HasValue ?
                new ObjectParameter("ReceiptToDt", receiptToDt) :
                new ObjectParameter("ReceiptToDt", typeof(System.DateTime));
    
            var receiptTypeIdParameter = receiptTypeId.HasValue ?
                new ObjectParameter("ReceiptTypeId", receiptTypeId) :
                new ObjectParameter("ReceiptTypeId", typeof(int));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var financialYearParameter = financialYear != null ?
                new ObjectParameter("FinancialYear", financialYear) :
                new ObjectParameter("FinancialYear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetReceiptInfo_bak_20150317", receiptNoParameter, courierCompanyIdParameter, receiptFromDtParameter, receiptToDtParameter, receiptTypeIdParameter, terminalCodeParameter, financialYearParameter);
        }
    
        public virtual ObjectResult<GetReceiptItemData_Result> GetReceiptItemData(string receiptno)
        {
            var receiptnoParameter = receiptno != null ?
                new ObjectParameter("Receiptno", receiptno) :
                new ObjectParameter("Receiptno", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetReceiptItemData_Result>("GetReceiptItemData", receiptnoParameter);
        }
    
        public virtual ObjectResult<GetReceiptOHCheque_Result> GetReceiptOHCheque(Nullable<int> receiptTypeId, Nullable<int> courierCoId, string terminalCode, string finYear)
        {
            var receiptTypeIdParameter = receiptTypeId.HasValue ?
                new ObjectParameter("ReceiptTypeId", receiptTypeId) :
                new ObjectParameter("ReceiptTypeId", typeof(int));
    
            var courierCoIdParameter = courierCoId.HasValue ?
                new ObjectParameter("CourierCoId", courierCoId) :
                new ObjectParameter("CourierCoId", typeof(int));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var finYearParameter = finYear != null ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetReceiptOHCheque_Result>("GetReceiptOHCheque", receiptTypeIdParameter, courierCoIdParameter, terminalCodeParameter, finYearParameter);
        }
    
        public virtual int GetReceiptTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetReceiptTypes");
        }
    
        public virtual int GetReportData(string sqlQuery, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string createdOn, string masterValue5)
        {
            var sqlQueryParameter = sqlQuery != null ?
                new ObjectParameter("SqlQuery", sqlQuery) :
                new ObjectParameter("SqlQuery", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var createdOnParameter = createdOn != null ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(string));
    
            var masterValue5Parameter = masterValue5 != null ?
                new ObjectParameter("MasterValue5", masterValue5) :
                new ObjectParameter("MasterValue5", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetReportData", sqlQueryParameter, dateFromParameter, dateToParameter, createdOnParameter, masterValue5Parameter);
        }
    
        public virtual ObjectResult<string> GetReportName()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetReportName");
        }
    
        public virtual ObjectResult<GetSaleLot_Result> GetSaleLot(Nullable<long> aucListId, string terminalCode, string financialYear)
        {
            var aucListIdParameter = aucListId.HasValue ?
                new ObjectParameter("AucListId", aucListId) :
                new ObjectParameter("AucListId", typeof(long));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var financialYearParameter = financialYear != null ?
                new ObjectParameter("FinancialYear", financialYear) :
                new ObjectParameter("FinancialYear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSaleLot_Result>("GetSaleLot", aucListIdParameter, terminalCodeParameter, financialYearParameter);
        }
    
        public virtual ObjectResult<string> GetSaleLotData(Nullable<int> auctionListId)
        {
            var auctionListIdParameter = auctionListId.HasValue ?
                new ObjectParameter("AuctionListId", auctionListId) :
                new ObjectParameter("AuctionListId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetSaleLotData", auctionListIdParameter);
        }
    
        public virtual ObjectResult<GetSaleLotSelectedData_Result> GetSaleLotSelectedData(Nullable<int> auctionListId, string aucSaleLotNo)
        {
            var auctionListIdParameter = auctionListId.HasValue ?
                new ObjectParameter("AuctionListId", auctionListId) :
                new ObjectParameter("AuctionListId", typeof(int));
    
            var aucSaleLotNoParameter = aucSaleLotNo != null ?
                new ObjectParameter("AucSaleLotNo", aucSaleLotNo) :
                new ObjectParameter("AucSaleLotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSaleLotSelectedData_Result>("GetSaleLotSelectedData", auctionListIdParameter, aucSaleLotNoParameter);
        }
    
        public virtual ObjectResult<GetSaleLotTr6_Result> GetSaleLotTr6(Nullable<long> aucListId, Nullable<long> aucBOEId, string terminalCode, string financialYear)
        {
            var aucListIdParameter = aucListId.HasValue ?
                new ObjectParameter("AucListId", aucListId) :
                new ObjectParameter("AucListId", typeof(long));
    
            var aucBOEIdParameter = aucBOEId.HasValue ?
                new ObjectParameter("AucBOEId", aucBOEId) :
                new ObjectParameter("AucBOEId", typeof(long));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var financialYearParameter = financialYear != null ?
                new ObjectParameter("FinancialYear", financialYear) :
                new ObjectParameter("FinancialYear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSaleLotTr6_Result>("GetSaleLotTr6", aucListIdParameter, aucBOEIdParameter, terminalCodeParameter, financialYearParameter);
        }
    
        public virtual ObjectResult<GetSelectauditData_Result> GetSelectauditData(string terminalCode, string financialYear, string masterValue)
        {
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var financialYearParameter = financialYear != null ?
                new ObjectParameter("FinancialYear", financialYear) :
                new ObjectParameter("FinancialYear", typeof(string));
    
            var masterValueParameter = masterValue != null ?
                new ObjectParameter("MasterValue", masterValue) :
                new ObjectParameter("MasterValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSelectauditData_Result>("GetSelectauditData", terminalCodeParameter, financialYearParameter, masterValueParameter);
        }
    
        public virtual ObjectResult<GetSelectReportData_Result> GetSelectReportData(string terminalCode, string financialYear, string masterValue)
        {
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var financialYearParameter = financialYear != null ?
                new ObjectParameter("FinancialYear", financialYear) :
                new ObjectParameter("FinancialYear", typeof(string));
    
            var masterValueParameter = masterValue != null ?
                new ObjectParameter("MasterValue", masterValue) :
                new ObjectParameter("MasterValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSelectReportData_Result>("GetSelectReportData", terminalCodeParameter, financialYearParameter, masterValueParameter);
        }
    
        public virtual ObjectResult<GetTMPType_Result> GetTMPType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTMPType_Result>("GetTMPType");
        }
    
        public virtual ObjectResult<GetUMONames_Result> GetUMONames()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUMONames_Result>("GetUMONames");
        }
    
        public virtual ObjectResult<string> GetVatTinNumber(string terminalCode, string bidderName)
        {
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var bidderNameParameter = bidderName != null ?
                new ObjectParameter("BidderName", bidderName) :
                new ObjectParameter("BidderName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetVatTinNumber", terminalCodeParameter, bidderNameParameter);
        }
    
        public virtual ObjectResult<IMP_OHGPGatePassHst_Result> IMP_OHGPGatePassHst(Nullable<int> oHGPGatePassId)
        {
            var oHGPGatePassIdParameter = oHGPGatePassId.HasValue ?
                new ObjectParameter("OHGPGatePassId", oHGPGatePassId) :
                new ObjectParameter("OHGPGatePassId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<IMP_OHGPGatePassHst_Result>("IMP_OHGPGatePassHst", oHGPGatePassIdParameter);
        }
    
        public virtual int NextVal(string sequenceName, ObjectParameter nextVal)
        {
            var sequenceNameParameter = sequenceName != null ?
                new ObjectParameter("sequenceName", sequenceName) :
                new ObjectParameter("sequenceName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NextVal", sequenceNameParameter, nextVal);
        }
    
        public virtual ObjectResult<string> OnHoldGatePassCancellation(Nullable<int> onHoldId, Nullable<int> gatePassId, string terminalCode, string loginName, Nullable<System.DateTime> lastUpDtOn)
        {
            var onHoldIdParameter = onHoldId.HasValue ?
                new ObjectParameter("OnHoldId", onHoldId) :
                new ObjectParameter("OnHoldId", typeof(int));
    
            var gatePassIdParameter = gatePassId.HasValue ?
                new ObjectParameter("GatePassId", gatePassId) :
                new ObjectParameter("GatePassId", typeof(int));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var loginNameParameter = loginName != null ?
                new ObjectParameter("LoginName", loginName) :
                new ObjectParameter("LoginName", typeof(string));
    
            var lastUpDtOnParameter = lastUpDtOn.HasValue ?
                new ObjectParameter("LastUpDtOn", lastUpDtOn) :
                new ObjectParameter("LastUpDtOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("OnHoldGatePassCancellation", onHoldIdParameter, gatePassIdParameter, terminalCodeParameter, loginNameParameter, lastUpDtOnParameter);
        }
    
        public virtual ObjectResult<OnHoldInwardDetails_Result> OnHoldInwardDetails(string oHMemoNumber, Nullable<int> onHoldId, string terminalCode, string financialYear)
        {
            var oHMemoNumberParameter = oHMemoNumber != null ?
                new ObjectParameter("OHMemoNumber", oHMemoNumber) :
                new ObjectParameter("OHMemoNumber", typeof(string));
    
            var onHoldIdParameter = onHoldId.HasValue ?
                new ObjectParameter("OnHoldId", onHoldId) :
                new ObjectParameter("OnHoldId", typeof(int));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var financialYearParameter = financialYear != null ?
                new ObjectParameter("FinancialYear", financialYear) :
                new ObjectParameter("FinancialYear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OnHoldInwardDetails_Result>("OnHoldInwardDetails", oHMemoNumberParameter, onHoldIdParameter, terminalCodeParameter, financialYearParameter);
        }
    
        public virtual ObjectResult<OnHoldInwardDetailsFwd_Result> OnHoldInwardDetailsFwd(string oHMemoNumber, Nullable<int> onHoldId, string terminalCode, string financialYear)
        {
            var oHMemoNumberParameter = oHMemoNumber != null ?
                new ObjectParameter("OHMemoNumber", oHMemoNumber) :
                new ObjectParameter("OHMemoNumber", typeof(string));
    
            var onHoldIdParameter = onHoldId.HasValue ?
                new ObjectParameter("OnHoldId", onHoldId) :
                new ObjectParameter("OnHoldId", typeof(int));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var financialYearParameter = financialYear != null ?
                new ObjectParameter("FinancialYear", financialYear) :
                new ObjectParameter("FinancialYear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OnHoldInwardDetailsFwd_Result>("OnHoldInwardDetailsFwd", oHMemoNumberParameter, onHoldIdParameter, terminalCodeParameter, financialYearParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> OnHoldMemoCount(string terminalCode, Nullable<int> form2Id, string iGMReferenceNumber, string eCMReferenceNumber, Nullable<int> form2Type)
        {
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var form2IdParameter = form2Id.HasValue ?
                new ObjectParameter("Form2Id", form2Id) :
                new ObjectParameter("Form2Id", typeof(int));
    
            var iGMReferenceNumberParameter = iGMReferenceNumber != null ?
                new ObjectParameter("IGMReferenceNumber", iGMReferenceNumber) :
                new ObjectParameter("IGMReferenceNumber", typeof(string));
    
            var eCMReferenceNumberParameter = eCMReferenceNumber != null ?
                new ObjectParameter("ECMReferenceNumber", eCMReferenceNumber) :
                new ObjectParameter("ECMReferenceNumber", typeof(string));
    
            var form2TypeParameter = form2Type.HasValue ?
                new ObjectParameter("Form2Type", form2Type) :
                new ObjectParameter("Form2Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("OnHoldMemoCount", terminalCodeParameter, form2IdParameter, iGMReferenceNumberParameter, eCMReferenceNumberParameter, form2TypeParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> OnHoldMemoDetails(string terminalCode, Nullable<int> cSB1Id, Nullable<int> cSB1Type, string financialYear, string loginName)
        {
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var cSB1IdParameter = cSB1Id.HasValue ?
                new ObjectParameter("CSB1Id", cSB1Id) :
                new ObjectParameter("CSB1Id", typeof(int));
    
            var cSB1TypeParameter = cSB1Type.HasValue ?
                new ObjectParameter("CSB1Type", cSB1Type) :
                new ObjectParameter("CSB1Type", typeof(int));
    
            var financialYearParameter = financialYear != null ?
                new ObjectParameter("financialYear", financialYear) :
                new ObjectParameter("financialYear", typeof(string));
    
            var loginNameParameter = loginName != null ?
                new ObjectParameter("LoginName", loginName) :
                new ObjectParameter("LoginName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("OnHoldMemoDetails", terminalCodeParameter, cSB1IdParameter, cSB1TypeParameter, financialYearParameter, loginNameParameter);
        }
    
        public virtual ObjectResult<proc_VRCFFetchMenu_Result> proc_VRCFFetchMenu(string roleSName, string loginID, Nullable<int> applicationID)
        {
            var roleSNameParameter = roleSName != null ?
                new ObjectParameter("RoleSName", roleSName) :
                new ObjectParameter("RoleSName", typeof(string));
    
            var loginIDParameter = loginID != null ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_VRCFFetchMenu_Result>("proc_VRCFFetchMenu", roleSNameParameter, loginIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<proc_VRCFFetchMenu_Culture_Result> proc_VRCFFetchMenu_Culture(string roleSName, string loginID, Nullable<int> applicationID, string culture)
        {
            var roleSNameParameter = roleSName != null ?
                new ObjectParameter("RoleSName", roleSName) :
                new ObjectParameter("RoleSName", typeof(string));
    
            var loginIDParameter = loginID != null ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var cultureParameter = culture != null ?
                new ObjectParameter("Culture", culture) :
                new ObjectParameter("Culture", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_VRCFFetchMenu_Culture_Result>("proc_VRCFFetchMenu_Culture", roleSNameParameter, loginIDParameter, applicationIDParameter, cultureParameter);
        }
    
        public virtual int proc_VRCFNextVal(string sequenceName, ObjectParameter nextVal)
        {
            var sequenceNameParameter = sequenceName != null ?
                new ObjectParameter("sequenceName", sequenceName) :
                new ObjectParameter("sequenceName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_VRCFNextVal", sequenceNameParameter, nextVal);
        }
    
        public virtual ObjectResult<string> proc_VSECGetPasswordByUserName(string loginID, string webSessionID, string ipAddress, string mode)
        {
            var loginIDParameter = loginID != null ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(string));
    
            var webSessionIDParameter = webSessionID != null ?
                new ObjectParameter("WebSessionID", webSessionID) :
                new ObjectParameter("WebSessionID", typeof(string));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("IpAddress", ipAddress) :
                new ObjectParameter("IpAddress", typeof(string));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("proc_VSECGetPasswordByUserName", loginIDParameter, webSessionIDParameter, ipAddressParameter, modeParameter);
        }
    
        public virtual ObjectResult<proc_VSECVerifyUser_Result> proc_VSECVerifyUser(string loginID, string password, string webSessionID, string ipAddress, Nullable<int> cultureID)
        {
            var loginIDParameter = loginID != null ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var webSessionIDParameter = webSessionID != null ?
                new ObjectParameter("WebSessionID", webSessionID) :
                new ObjectParameter("WebSessionID", typeof(string));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("IpAddress", ipAddress) :
                new ObjectParameter("IpAddress", typeof(string));
    
            var cultureIDParameter = cultureID.HasValue ?
                new ObjectParameter("CultureID", cultureID) :
                new ObjectParameter("CultureID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_VSECVerifyUser_Result>("proc_VSECVerifyUser", loginIDParameter, passwordParameter, webSessionIDParameter, ipAddressParameter, cultureIDParameter);
        }
    
        public virtual ObjectResult<proformatest_Result> proformatest(Nullable<int> prmOnHoldId, Nullable<int> auctionListId)
        {
            var prmOnHoldIdParameter = prmOnHoldId.HasValue ?
                new ObjectParameter("prmOnHoldId", prmOnHoldId) :
                new ObjectParameter("prmOnHoldId", typeof(int));
    
            var auctionListIdParameter = auctionListId.HasValue ?
                new ObjectParameter("AuctionListId", auctionListId) :
                new ObjectParameter("AuctionListId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proformatest_Result>("proformatest", prmOnHoldIdParameter, auctionListIdParameter);
        }
    
        public virtual ObjectResult<ReportSearchOperator_Result> ReportSearchOperator()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportSearchOperator_Result>("ReportSearchOperator");
        }
    
        public virtual ObjectResult<RptAucInvoice_Result> RptAucInvoice(Nullable<int> bOEId)
        {
            var bOEIdParameter = bOEId.HasValue ?
                new ObjectParameter("BOEId", bOEId) :
                new ObjectParameter("BOEId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RptAucInvoice_Result>("RptAucInvoice", bOEIdParameter);
        }
    
        public virtual ObjectResult<RptAuctionNotification1_Result> RptAuctionNotification1(string prmOnHoldId, Nullable<int> auctionListId)
        {
            var prmOnHoldIdParameter = prmOnHoldId != null ?
                new ObjectParameter("prmOnHoldId", prmOnHoldId) :
                new ObjectParameter("prmOnHoldId", typeof(string));
    
            var auctionListIdParameter = auctionListId.HasValue ?
                new ObjectParameter("AuctionListId", auctionListId) :
                new ObjectParameter("AuctionListId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RptAuctionNotification1_Result>("RptAuctionNotification1", prmOnHoldIdParameter, auctionListIdParameter);
        }
    
        public virtual ObjectResult<RptAuctionSaleList_Result> RptAuctionSaleList(string prmAucListNo)
        {
            var prmAucListNoParameter = prmAucListNo != null ?
                new ObjectParameter("prmAucListNo", prmAucListNo) :
                new ObjectParameter("prmAucListNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RptAuctionSaleList_Result>("RptAuctionSaleList", prmAucListNoParameter);
        }
    
        public virtual ObjectResult<RptAuctionSaleLot_Result> RptAuctionSaleLot(string prmAucListNo)
        {
            var prmAucListNoParameter = prmAucListNo != null ?
                new ObjectParameter("prmAucListNo", prmAucListNo) :
                new ObjectParameter("prmAucListNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RptAuctionSaleLot_Result>("RptAuctionSaleLot", prmAucListNoParameter);
        }
    
        public virtual ObjectResult<RptBillOfEntry_Result> RptBillOfEntry(Nullable<int> bOEId)
        {
            var bOEIdParameter = bOEId.HasValue ?
                new ObjectParameter("BOEId", bOEId) :
                new ObjectParameter("BOEId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RptBillOfEntry_Result>("RptBillOfEntry", bOEIdParameter);
        }
    
        public virtual ObjectResult<RptExpEntryGatePass_Result> RptExpEntryGatePass(string entryGatePassId)
        {
            var entryGatePassIdParameter = entryGatePassId != null ?
                new ObjectParameter("EntryGatePassId", entryGatePassId) :
                new ObjectParameter("EntryGatePassId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RptExpEntryGatePass_Result>("RptExpEntryGatePass", entryGatePassIdParameter);
        }
    
        public virtual ObjectResult<RptExpOFLGatePass_Result> RptExpOFLGatePass(string entryGatePassId)
        {
            var entryGatePassIdParameter = entryGatePassId != null ?
                new ObjectParameter("EntryGatePassId", entryGatePassId) :
                new ObjectParameter("EntryGatePassId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RptExpOFLGatePass_Result>("RptExpOFLGatePass", entryGatePassIdParameter);
        }
    
        public virtual ObjectResult<RptExportToTallyCashRcpt_Result> RptExportToTallyCashRcpt(string prmReceiptId)
        {
            var prmReceiptIdParameter = prmReceiptId != null ?
                new ObjectParameter("prmReceiptId", prmReceiptId) :
                new ObjectParameter("prmReceiptId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RptExportToTallyCashRcpt_Result>("RptExportToTallyCashRcpt", prmReceiptIdParameter);
        }
    
        public virtual ObjectResult<RptExportToTallyInv_Result> RptExportToTallyInv(string prmInvoiceId)
        {
            var prmInvoiceIdParameter = prmInvoiceId != null ?
                new ObjectParameter("prmInvoiceId", prmInvoiceId) :
                new ObjectParameter("prmInvoiceId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RptExportToTallyInv_Result>("RptExportToTallyInv", prmInvoiceIdParameter);
        }
    
        public virtual ObjectResult<RptExportToTallyOHRcpt_Result> RptExportToTallyOHRcpt(string prmReceiptId)
        {
            var prmReceiptIdParameter = prmReceiptId != null ?
                new ObjectParameter("prmReceiptId", prmReceiptId) :
                new ObjectParameter("prmReceiptId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RptExportToTallyOHRcpt_Result>("RptExportToTallyOHRcpt", prmReceiptIdParameter);
        }
    
        public virtual ObjectResult<RptExportToTallyWHRcpt_Result> RptExportToTallyWHRcpt(string prmReceiptId)
        {
            var prmReceiptIdParameter = prmReceiptId != null ?
                new ObjectParameter("prmReceiptId", prmReceiptId) :
                new ObjectParameter("prmReceiptId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RptExportToTallyWHRcpt_Result>("RptExportToTallyWHRcpt", prmReceiptIdParameter);
        }
    
        public virtual ObjectResult<RptExpReleaseGatePass_Result> RptExpReleaseGatePass(string releaseGatePassId)
        {
            var releaseGatePassIdParameter = releaseGatePassId != null ?
                new ObjectParameter("ReleaseGatePassId", releaseGatePassId) :
                new ObjectParameter("ReleaseGatePassId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RptExpReleaseGatePass_Result>("RptExpReleaseGatePass", releaseGatePassIdParameter);
        }
    
        public virtual ObjectResult<RptExpWeightAcceptance_Result> RptExpWeightAcceptance(string cSB1Id)
        {
            var cSB1IdParameter = cSB1Id != null ?
                new ObjectParameter("CSB1Id", cSB1Id) :
                new ObjectParameter("CSB1Id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RptExpWeightAcceptance_Result>("RptExpWeightAcceptance", cSB1IdParameter);
        }
    
        public virtual ObjectResult<RptExpWeightAcceptance_rpt_Result> RptExpWeightAcceptance_rpt(string cSBWAId)
        {
            var cSBWAIdParameter = cSBWAId != null ?
                new ObjectParameter("CSBWAId", cSBWAId) :
                new ObjectParameter("CSBWAId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RptExpWeightAcceptance_rpt_Result>("RptExpWeightAcceptance_rpt", cSBWAIdParameter);
        }
    
        public virtual ObjectResult<RptFaciGatePassWH_rpt_Result> RptFaciGatePassWH_rpt(Nullable<int> cSB1Id)
        {
            var cSB1IdParameter = cSB1Id.HasValue ?
                new ObjectParameter("CSB1Id", cSB1Id) :
                new ObjectParameter("CSB1Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RptFaciGatePassWH_rpt_Result>("RptFaciGatePassWH_rpt", cSB1IdParameter);
        }
    
        public virtual ObjectResult<RptFaciImportGatePassWH_rpt_Result> RptFaciImportGatePassWH_rpt(string gatePassId)
        {
            var gatePassIdParameter = gatePassId != null ?
                new ObjectParameter("GatePassId", gatePassId) :
                new ObjectParameter("GatePassId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RptFaciImportGatePassWH_rpt_Result>("RptFaciImportGatePassWH_rpt", gatePassIdParameter);
        }
    
        public virtual int RptForm2Register(string terminalCode, string eCMReferenceNo, string iGMNumber, Nullable<long> form2Id, Nullable<long> form2Type)
        {
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var eCMReferenceNoParameter = eCMReferenceNo != null ?
                new ObjectParameter("ECMReferenceNo", eCMReferenceNo) :
                new ObjectParameter("ECMReferenceNo", typeof(string));
    
            var iGMNumberParameter = iGMNumber != null ?
                new ObjectParameter("IGMNumber", iGMNumber) :
                new ObjectParameter("IGMNumber", typeof(string));
    
            var form2IdParameter = form2Id.HasValue ?
                new ObjectParameter("Form2Id", form2Id) :
                new ObjectParameter("Form2Id", typeof(long));
    
            var form2TypeParameter = form2Type.HasValue ?
                new ObjectParameter("Form2Type", form2Type) :
                new ObjectParameter("Form2Type", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RptForm2Register", terminalCodeParameter, eCMReferenceNoParameter, iGMNumberParameter, form2IdParameter, form2TypeParameter);
        }
    
        public virtual ObjectResult<RptImpGatePassAdv_rpt_Result> RptImpGatePassAdv_rpt(Nullable<int> receiptId)
        {
            var receiptIdParameter = receiptId.HasValue ?
                new ObjectParameter("ReceiptId", receiptId) :
                new ObjectParameter("ReceiptId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RptImpGatePassAdv_rpt_Result>("RptImpGatePassAdv_rpt", receiptIdParameter);
        }
    
        public virtual ObjectResult<RptImpGatePassOH_Result> RptImpGatePassOH(Nullable<int> oHGatePassId, string terminalCode, string finYear)
        {
            var oHGatePassIdParameter = oHGatePassId.HasValue ?
                new ObjectParameter("OHGatePassId", oHGatePassId) :
                new ObjectParameter("OHGatePassId", typeof(int));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var finYearParameter = finYear != null ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RptImpGatePassOH_Result>("RptImpGatePassOH", oHGatePassIdParameter, terminalCodeParameter, finYearParameter);
        }
    
        public virtual ObjectResult<RptImpGatePassOH_rpt_Result> RptImpGatePassOH_rpt(Nullable<int> oHGatePassId)
        {
            var oHGatePassIdParameter = oHGatePassId.HasValue ?
                new ObjectParameter("OHGatePassId", oHGatePassId) :
                new ObjectParameter("OHGatePassId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RptImpGatePassOH_rpt_Result>("RptImpGatePassOH_rpt", oHGatePassIdParameter);
        }
    
        public virtual ObjectResult<RptImpGatePassTmp_Result> RptImpGatePassTmp(Nullable<int> oHTGatePassId)
        {
            var oHTGatePassIdParameter = oHTGatePassId.HasValue ?
                new ObjectParameter("OHTGatePassId", oHTGatePassId) :
                new ObjectParameter("OHTGatePassId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RptImpGatePassTmp_Result>("RptImpGatePassTmp", oHTGatePassIdParameter);
        }
    
        public virtual ObjectResult<RptImpGatePassWH_Result> RptImpGatePassWH(string gatePassId)
        {
            var gatePassIdParameter = gatePassId != null ?
                new ObjectParameter("GatePassId", gatePassId) :
                new ObjectParameter("GatePassId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RptImpGatePassWH_Result>("RptImpGatePassWH", gatePassIdParameter);
        }
    
        public virtual ObjectResult<RptImpGatePassWH_rpt_Result> RptImpGatePassWH_rpt(string gatePassId)
        {
            var gatePassIdParameter = gatePassId != null ?
                new ObjectParameter("GatePassId", gatePassId) :
                new ObjectParameter("GatePassId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RptImpGatePassWH_rpt_Result>("RptImpGatePassWH_rpt", gatePassIdParameter);
        }
    
        public virtual ObjectResult<RptImportInvoice_Result> RptImportInvoice(string prmInvoiceId)
        {
            var prmInvoiceIdParameter = prmInvoiceId != null ?
                new ObjectParameter("prmInvoiceId", prmInvoiceId) :
                new ObjectParameter("prmInvoiceId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RptImportInvoice_Result>("RptImportInvoice", prmInvoiceIdParameter);
        }
    
        public virtual ObjectResult<RptImportLoad_Result> RptImportLoad(Nullable<System.DateTime> form2FromDate, Nullable<System.DateTime> form2ToDate, Nullable<System.DateTime> flightFromDate, Nullable<System.DateTime> flightToDate, Nullable<System.DateTime> gPFromDate, Nullable<System.DateTime> gPToDate, Nullable<int> formType, Nullable<long> courierCompanyId, string iGMReferenceNo)
        {
            var form2FromDateParameter = form2FromDate.HasValue ?
                new ObjectParameter("Form2FromDate", form2FromDate) :
                new ObjectParameter("Form2FromDate", typeof(System.DateTime));
    
            var form2ToDateParameter = form2ToDate.HasValue ?
                new ObjectParameter("Form2ToDate", form2ToDate) :
                new ObjectParameter("Form2ToDate", typeof(System.DateTime));
    
            var flightFromDateParameter = flightFromDate.HasValue ?
                new ObjectParameter("FlightFromDate", flightFromDate) :
                new ObjectParameter("FlightFromDate", typeof(System.DateTime));
    
            var flightToDateParameter = flightToDate.HasValue ?
                new ObjectParameter("FlightToDate", flightToDate) :
                new ObjectParameter("FlightToDate", typeof(System.DateTime));
    
            var gPFromDateParameter = gPFromDate.HasValue ?
                new ObjectParameter("GPFromDate", gPFromDate) :
                new ObjectParameter("GPFromDate", typeof(System.DateTime));
    
            var gPToDateParameter = gPToDate.HasValue ?
                new ObjectParameter("GPToDate", gPToDate) :
                new ObjectParameter("GPToDate", typeof(System.DateTime));
    
            var formTypeParameter = formType.HasValue ?
                new ObjectParameter("FormType", formType) :
                new ObjectParameter("FormType", typeof(int));
    
            var courierCompanyIdParameter = courierCompanyId.HasValue ?
                new ObjectParameter("CourierCompanyId", courierCompanyId) :
                new ObjectParameter("CourierCompanyId", typeof(long));
    
            var iGMReferenceNoParameter = iGMReferenceNo != null ?
                new ObjectParameter("IGMReferenceNo", iGMReferenceNo) :
                new ObjectParameter("IGMReferenceNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RptImportLoad_Result>("RptImportLoad", form2FromDateParameter, form2ToDateParameter, flightFromDateParameter, flightToDateParameter, gPFromDateParameter, gPToDateParameter, formTypeParameter, courierCompanyIdParameter, iGMReferenceNoParameter);
        }
    
        public virtual ObjectResult<RptImpTGatePassOH_rpt_Result> RptImpTGatePassOH_rpt(Nullable<int> oHTGatePassId)
        {
            var oHTGatePassIdParameter = oHTGatePassId.HasValue ?
                new ObjectParameter("OHTGatePassId", oHTGatePassId) :
                new ObjectParameter("OHTGatePassId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RptImpTGatePassOH_rpt_Result>("RptImpTGatePassOH_rpt", oHTGatePassIdParameter);
        }
    
        public virtual ObjectResult<RptMemoDtl_Result> RptMemoDtl(Nullable<int> onHoldId)
        {
            var onHoldIdParameter = onHoldId.HasValue ?
                new ObjectParameter("OnHoldId", onHoldId) :
                new ObjectParameter("OnHoldId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RptMemoDtl_Result>("RptMemoDtl", onHoldIdParameter);
        }
    
        public virtual ObjectResult<RptPerforma_Result> RptPerforma(string prmOnHoldId, Nullable<int> auctionListId)
        {
            var prmOnHoldIdParameter = prmOnHoldId != null ?
                new ObjectParameter("prmOnHoldId", prmOnHoldId) :
                new ObjectParameter("prmOnHoldId", typeof(string));
    
            var auctionListIdParameter = auctionListId.HasValue ?
                new ObjectParameter("AuctionListId", auctionListId) :
                new ObjectParameter("AuctionListId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RptPerforma_Result>("RptPerforma", prmOnHoldIdParameter, auctionListIdParameter);
        }
    
        public virtual ObjectResult<RptReceiptOHGatePass_Result> RptReceiptOHGatePass(string gatePassId)
        {
            var gatePassIdParameter = gatePassId != null ?
                new ObjectParameter("GatePassId", gatePassId) :
                new ObjectParameter("GatePassId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RptReceiptOHGatePass_Result>("RptReceiptOHGatePass", gatePassIdParameter);
        }
    
        public virtual ObjectResult<RptReceiptWHGatePass_Result> RptReceiptWHGatePass(Nullable<int> gatePassId, string terminalCode, string finYear)
        {
            var gatePassIdParameter = gatePassId.HasValue ?
                new ObjectParameter("GatePassId", gatePassId) :
                new ObjectParameter("GatePassId", typeof(int));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var finYearParameter = finYear != null ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RptReceiptWHGatePass_Result>("RptReceiptWHGatePass", gatePassIdParameter, terminalCodeParameter, finYearParameter);
        }
    
        public virtual ObjectResult<RptTR6_Result> RptTR6(Nullable<int> aucListId)
        {
            var aucListIdParameter = aucListId.HasValue ?
                new ObjectParameter("AucListId", aucListId) :
                new ObjectParameter("AucListId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RptTR6_Result>("RptTR6", aucListIdParameter);
        }
    
        public virtual ObjectResult<RptTr6Details_Result> RptTr6Details(string aucListNo)
        {
            var aucListNoParameter = aucListNo != null ?
                new ObjectParameter("AucListNo", aucListNo) :
                new ObjectParameter("AucListNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RptTr6Details_Result>("RptTr6Details", aucListNoParameter);
        }
    
        public virtual int SaveAuctionBOE(Nullable<int> auctionListId, string bidderName, string bidderVatTinNumber, Nullable<System.DateTime> auctionDate, string description, Nullable<decimal> amount, Nullable<decimal> vatPercent, Nullable<decimal> vat, Nullable<decimal> otherCharges, string terminalCode, string financialYear, string loginName, string challanNumber, Nullable<System.DateTime> challanDate, Nullable<decimal> dutyAmount, Nullable<int> paymentMode, string bankName, string chequeNumber, Nullable<System.DateTime> chequeDate)
        {
            var auctionListIdParameter = auctionListId.HasValue ?
                new ObjectParameter("AuctionListId", auctionListId) :
                new ObjectParameter("AuctionListId", typeof(int));
    
            var bidderNameParameter = bidderName != null ?
                new ObjectParameter("BidderName", bidderName) :
                new ObjectParameter("BidderName", typeof(string));
    
            var bidderVatTinNumberParameter = bidderVatTinNumber != null ?
                new ObjectParameter("BidderVatTinNumber", bidderVatTinNumber) :
                new ObjectParameter("BidderVatTinNumber", typeof(string));
    
            var auctionDateParameter = auctionDate.HasValue ?
                new ObjectParameter("AuctionDate", auctionDate) :
                new ObjectParameter("AuctionDate", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var vatPercentParameter = vatPercent.HasValue ?
                new ObjectParameter("VatPercent", vatPercent) :
                new ObjectParameter("VatPercent", typeof(decimal));
    
            var vatParameter = vat.HasValue ?
                new ObjectParameter("Vat", vat) :
                new ObjectParameter("Vat", typeof(decimal));
    
            var otherChargesParameter = otherCharges.HasValue ?
                new ObjectParameter("OtherCharges", otherCharges) :
                new ObjectParameter("OtherCharges", typeof(decimal));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var financialYearParameter = financialYear != null ?
                new ObjectParameter("FinancialYear", financialYear) :
                new ObjectParameter("FinancialYear", typeof(string));
    
            var loginNameParameter = loginName != null ?
                new ObjectParameter("LoginName", loginName) :
                new ObjectParameter("LoginName", typeof(string));
    
            var challanNumberParameter = challanNumber != null ?
                new ObjectParameter("ChallanNumber", challanNumber) :
                new ObjectParameter("ChallanNumber", typeof(string));
    
            var challanDateParameter = challanDate.HasValue ?
                new ObjectParameter("ChallanDate", challanDate) :
                new ObjectParameter("ChallanDate", typeof(System.DateTime));
    
            var dutyAmountParameter = dutyAmount.HasValue ?
                new ObjectParameter("DutyAmount", dutyAmount) :
                new ObjectParameter("DutyAmount", typeof(decimal));
    
            var paymentModeParameter = paymentMode.HasValue ?
                new ObjectParameter("PaymentMode", paymentMode) :
                new ObjectParameter("PaymentMode", typeof(int));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var chequeNumberParameter = chequeNumber != null ?
                new ObjectParameter("ChequeNumber", chequeNumber) :
                new ObjectParameter("ChequeNumber", typeof(string));
    
            var chequeDateParameter = chequeDate.HasValue ?
                new ObjectParameter("ChequeDate", chequeDate) :
                new ObjectParameter("ChequeDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveAuctionBOE", auctionListIdParameter, bidderNameParameter, bidderVatTinNumberParameter, auctionDateParameter, descriptionParameter, amountParameter, vatPercentParameter, vatParameter, otherChargesParameter, terminalCodeParameter, financialYearParameter, loginNameParameter, challanNumberParameter, challanDateParameter, dutyAmountParameter, paymentModeParameter, bankNameParameter, chequeNumberParameter, chequeDateParameter);
        }
    
        public virtual int SaveCSB1Summ(Nullable<long> cSB1Id, string eCMReferenceDocNo, Nullable<System.DateTime> eCMReferenceDocDate, Nullable<decimal> eCMReferenceDocManifestWt, string eCMReferenceNonDocNo, Nullable<System.DateTime> eCMReferenceNonDocDate, Nullable<decimal> eCMReferenceNonDocManifestWt, string mAWBNo, Nullable<long> courierCoId, Nullable<long> airlineId, string flightNumber, Nullable<System.DateTime> dateofDeparture, Nullable<int> actualTimeofDeparture, string terminalCode, string createdBy, Nullable<System.DateTime> lastUpDtOn)
        {
            var cSB1IdParameter = cSB1Id.HasValue ?
                new ObjectParameter("CSB1Id", cSB1Id) :
                new ObjectParameter("CSB1Id", typeof(long));
    
            var eCMReferenceDocNoParameter = eCMReferenceDocNo != null ?
                new ObjectParameter("ECMReferenceDocNo", eCMReferenceDocNo) :
                new ObjectParameter("ECMReferenceDocNo", typeof(string));
    
            var eCMReferenceDocDateParameter = eCMReferenceDocDate.HasValue ?
                new ObjectParameter("ECMReferenceDocDate", eCMReferenceDocDate) :
                new ObjectParameter("ECMReferenceDocDate", typeof(System.DateTime));
    
            var eCMReferenceDocManifestWtParameter = eCMReferenceDocManifestWt.HasValue ?
                new ObjectParameter("ECMReferenceDocManifestWt", eCMReferenceDocManifestWt) :
                new ObjectParameter("ECMReferenceDocManifestWt", typeof(decimal));
    
            var eCMReferenceNonDocNoParameter = eCMReferenceNonDocNo != null ?
                new ObjectParameter("ECMReferenceNonDocNo", eCMReferenceNonDocNo) :
                new ObjectParameter("ECMReferenceNonDocNo", typeof(string));
    
            var eCMReferenceNonDocDateParameter = eCMReferenceNonDocDate.HasValue ?
                new ObjectParameter("ECMReferenceNonDocDate", eCMReferenceNonDocDate) :
                new ObjectParameter("ECMReferenceNonDocDate", typeof(System.DateTime));
    
            var eCMReferenceNonDocManifestWtParameter = eCMReferenceNonDocManifestWt.HasValue ?
                new ObjectParameter("ECMReferenceNonDocManifestWt", eCMReferenceNonDocManifestWt) :
                new ObjectParameter("ECMReferenceNonDocManifestWt", typeof(decimal));
    
            var mAWBNoParameter = mAWBNo != null ?
                new ObjectParameter("MAWBNo", mAWBNo) :
                new ObjectParameter("MAWBNo", typeof(string));
    
            var courierCoIdParameter = courierCoId.HasValue ?
                new ObjectParameter("CourierCoId", courierCoId) :
                new ObjectParameter("CourierCoId", typeof(long));
    
            var airlineIdParameter = airlineId.HasValue ?
                new ObjectParameter("AirlineId", airlineId) :
                new ObjectParameter("AirlineId", typeof(long));
    
            var flightNumberParameter = flightNumber != null ?
                new ObjectParameter("FlightNumber", flightNumber) :
                new ObjectParameter("FlightNumber", typeof(string));
    
            var dateofDepartureParameter = dateofDeparture.HasValue ?
                new ObjectParameter("DateofDeparture", dateofDeparture) :
                new ObjectParameter("DateofDeparture", typeof(System.DateTime));
    
            var actualTimeofDepartureParameter = actualTimeofDeparture.HasValue ?
                new ObjectParameter("ActualTimeofDeparture", actualTimeofDeparture) :
                new ObjectParameter("ActualTimeofDeparture", typeof(int));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var lastUpDtOnParameter = lastUpDtOn.HasValue ?
                new ObjectParameter("LastUpDtOn", lastUpDtOn) :
                new ObjectParameter("LastUpDtOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveCSB1Summ", cSB1IdParameter, eCMReferenceDocNoParameter, eCMReferenceDocDateParameter, eCMReferenceDocManifestWtParameter, eCMReferenceNonDocNoParameter, eCMReferenceNonDocDateParameter, eCMReferenceNonDocManifestWtParameter, mAWBNoParameter, courierCoIdParameter, airlineIdParameter, flightNumberParameter, dateofDepartureParameter, actualTimeofDepartureParameter, terminalCodeParameter, createdByParameter, lastUpDtOnParameter);
        }
    
        public virtual int SaveDetentionGatePass(Nullable<int> onHoldID, string memoNumber, Nullable<int> form2Id, string iGMReferenceNo, string eCMReferenceNo, Nullable<System.DateTime> issueDateTime, string preventiveOfficer, Nullable<long> clearBy, string cHANO, string cHANAME, string gPType, string fileNo, string dDRNo, Nullable<System.DateTime> dDRDate, Nullable<decimal> dDRAmount, string iDFNumber, Nullable<long> noofDays, Nullable<decimal> assessedValue, Nullable<decimal> redemptionFees, Nullable<decimal> personalPenalty, string thokaNumber, string remarks, Nullable<decimal> waiveDelayCharges, Nullable<decimal> delayCharges, Nullable<decimal> waiveTDSCharges, Nullable<decimal> serviceTax, Nullable<int> noOfPkgs, Nullable<decimal> weight, string terminalCode, string loginName, string checkListIds, Nullable<long> receiptDtlId, Nullable<long> receiptId, string chequeNumber, string flag, Nullable<long> courierCoId, Nullable<long> courierEmpId, string flightNumber, Nullable<System.DateTime> flightDate, Nullable<int> time, Nullable<System.DateTime> lastUpDtOn, Nullable<decimal> tDSAmount, Nullable<decimal> swachhBharatCessPerc, Nullable<decimal> swachhBharatCessAmt, Nullable<decimal> serviceTaxPerc)
        {
            var onHoldIDParameter = onHoldID.HasValue ?
                new ObjectParameter("OnHoldID", onHoldID) :
                new ObjectParameter("OnHoldID", typeof(int));
    
            var memoNumberParameter = memoNumber != null ?
                new ObjectParameter("MemoNumber", memoNumber) :
                new ObjectParameter("MemoNumber", typeof(string));
    
            var form2IdParameter = form2Id.HasValue ?
                new ObjectParameter("Form2Id", form2Id) :
                new ObjectParameter("Form2Id", typeof(int));
    
            var iGMReferenceNoParameter = iGMReferenceNo != null ?
                new ObjectParameter("IGMReferenceNo", iGMReferenceNo) :
                new ObjectParameter("IGMReferenceNo", typeof(string));
    
            var eCMReferenceNoParameter = eCMReferenceNo != null ?
                new ObjectParameter("ECMReferenceNo", eCMReferenceNo) :
                new ObjectParameter("ECMReferenceNo", typeof(string));
    
            var issueDateTimeParameter = issueDateTime.HasValue ?
                new ObjectParameter("IssueDateTime", issueDateTime) :
                new ObjectParameter("IssueDateTime", typeof(System.DateTime));
    
            var preventiveOfficerParameter = preventiveOfficer != null ?
                new ObjectParameter("PreventiveOfficer", preventiveOfficer) :
                new ObjectParameter("PreventiveOfficer", typeof(string));
    
            var clearByParameter = clearBy.HasValue ?
                new ObjectParameter("ClearBy", clearBy) :
                new ObjectParameter("ClearBy", typeof(long));
    
            var cHANOParameter = cHANO != null ?
                new ObjectParameter("CHANO", cHANO) :
                new ObjectParameter("CHANO", typeof(string));
    
            var cHANAMEParameter = cHANAME != null ?
                new ObjectParameter("CHANAME", cHANAME) :
                new ObjectParameter("CHANAME", typeof(string));
    
            var gPTypeParameter = gPType != null ?
                new ObjectParameter("GPType", gPType) :
                new ObjectParameter("GPType", typeof(string));
    
            var fileNoParameter = fileNo != null ?
                new ObjectParameter("FileNo", fileNo) :
                new ObjectParameter("FileNo", typeof(string));
    
            var dDRNoParameter = dDRNo != null ?
                new ObjectParameter("DDRNo", dDRNo) :
                new ObjectParameter("DDRNo", typeof(string));
    
            var dDRDateParameter = dDRDate.HasValue ?
                new ObjectParameter("DDRDate", dDRDate) :
                new ObjectParameter("DDRDate", typeof(System.DateTime));
    
            var dDRAmountParameter = dDRAmount.HasValue ?
                new ObjectParameter("DDRAmount", dDRAmount) :
                new ObjectParameter("DDRAmount", typeof(decimal));
    
            var iDFNumberParameter = iDFNumber != null ?
                new ObjectParameter("IDFNumber", iDFNumber) :
                new ObjectParameter("IDFNumber", typeof(string));
    
            var noofDaysParameter = noofDays.HasValue ?
                new ObjectParameter("NoofDays", noofDays) :
                new ObjectParameter("NoofDays", typeof(long));
    
            var assessedValueParameter = assessedValue.HasValue ?
                new ObjectParameter("AssessedValue", assessedValue) :
                new ObjectParameter("AssessedValue", typeof(decimal));
    
            var redemptionFeesParameter = redemptionFees.HasValue ?
                new ObjectParameter("RedemptionFees", redemptionFees) :
                new ObjectParameter("RedemptionFees", typeof(decimal));
    
            var personalPenaltyParameter = personalPenalty.HasValue ?
                new ObjectParameter("PersonalPenalty", personalPenalty) :
                new ObjectParameter("PersonalPenalty", typeof(decimal));
    
            var thokaNumberParameter = thokaNumber != null ?
                new ObjectParameter("ThokaNumber", thokaNumber) :
                new ObjectParameter("ThokaNumber", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var waiveDelayChargesParameter = waiveDelayCharges.HasValue ?
                new ObjectParameter("WaiveDelayCharges", waiveDelayCharges) :
                new ObjectParameter("WaiveDelayCharges", typeof(decimal));
    
            var delayChargesParameter = delayCharges.HasValue ?
                new ObjectParameter("DelayCharges", delayCharges) :
                new ObjectParameter("DelayCharges", typeof(decimal));
    
            var waiveTDSChargesParameter = waiveTDSCharges.HasValue ?
                new ObjectParameter("WaiveTDSCharges", waiveTDSCharges) :
                new ObjectParameter("WaiveTDSCharges", typeof(decimal));
    
            var serviceTaxParameter = serviceTax.HasValue ?
                new ObjectParameter("ServiceTax", serviceTax) :
                new ObjectParameter("ServiceTax", typeof(decimal));
    
            var noOfPkgsParameter = noOfPkgs.HasValue ?
                new ObjectParameter("NoOfPkgs", noOfPkgs) :
                new ObjectParameter("NoOfPkgs", typeof(int));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(decimal));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var loginNameParameter = loginName != null ?
                new ObjectParameter("LoginName", loginName) :
                new ObjectParameter("LoginName", typeof(string));
    
            var checkListIdsParameter = checkListIds != null ?
                new ObjectParameter("CheckListIds", checkListIds) :
                new ObjectParameter("CheckListIds", typeof(string));
    
            var receiptDtlIdParameter = receiptDtlId.HasValue ?
                new ObjectParameter("ReceiptDtlId", receiptDtlId) :
                new ObjectParameter("ReceiptDtlId", typeof(long));
    
            var receiptIdParameter = receiptId.HasValue ?
                new ObjectParameter("ReceiptId", receiptId) :
                new ObjectParameter("ReceiptId", typeof(long));
    
            var chequeNumberParameter = chequeNumber != null ?
                new ObjectParameter("ChequeNumber", chequeNumber) :
                new ObjectParameter("ChequeNumber", typeof(string));
    
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var courierCoIdParameter = courierCoId.HasValue ?
                new ObjectParameter("CourierCoId", courierCoId) :
                new ObjectParameter("CourierCoId", typeof(long));
    
            var courierEmpIdParameter = courierEmpId.HasValue ?
                new ObjectParameter("CourierEmpId", courierEmpId) :
                new ObjectParameter("CourierEmpId", typeof(long));
    
            var flightNumberParameter = flightNumber != null ?
                new ObjectParameter("FlightNumber", flightNumber) :
                new ObjectParameter("FlightNumber", typeof(string));
    
            var flightDateParameter = flightDate.HasValue ?
                new ObjectParameter("FlightDate", flightDate) :
                new ObjectParameter("FlightDate", typeof(System.DateTime));
    
            var timeParameter = time.HasValue ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(int));
    
            var lastUpDtOnParameter = lastUpDtOn.HasValue ?
                new ObjectParameter("LastUpDtOn", lastUpDtOn) :
                new ObjectParameter("LastUpDtOn", typeof(System.DateTime));
    
            var tDSAmountParameter = tDSAmount.HasValue ?
                new ObjectParameter("TDSAmount", tDSAmount) :
                new ObjectParameter("TDSAmount", typeof(decimal));
    
            var swachhBharatCessPercParameter = swachhBharatCessPerc.HasValue ?
                new ObjectParameter("SwachhBharatCessPerc", swachhBharatCessPerc) :
                new ObjectParameter("SwachhBharatCessPerc", typeof(decimal));
    
            var swachhBharatCessAmtParameter = swachhBharatCessAmt.HasValue ?
                new ObjectParameter("SwachhBharatCessAmt", swachhBharatCessAmt) :
                new ObjectParameter("SwachhBharatCessAmt", typeof(decimal));
    
            var serviceTaxPercParameter = serviceTaxPerc.HasValue ?
                new ObjectParameter("ServiceTaxPerc", serviceTaxPerc) :
                new ObjectParameter("ServiceTaxPerc", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveDetentionGatePass", onHoldIDParameter, memoNumberParameter, form2IdParameter, iGMReferenceNoParameter, eCMReferenceNoParameter, issueDateTimeParameter, preventiveOfficerParameter, clearByParameter, cHANOParameter, cHANAMEParameter, gPTypeParameter, fileNoParameter, dDRNoParameter, dDRDateParameter, dDRAmountParameter, iDFNumberParameter, noofDaysParameter, assessedValueParameter, redemptionFeesParameter, personalPenaltyParameter, thokaNumberParameter, remarksParameter, waiveDelayChargesParameter, delayChargesParameter, waiveTDSChargesParameter, serviceTaxParameter, noOfPkgsParameter, weightParameter, terminalCodeParameter, loginNameParameter, checkListIdsParameter, receiptDtlIdParameter, receiptIdParameter, chequeNumberParameter, flagParameter, courierCoIdParameter, courierEmpIdParameter, flightNumberParameter, flightDateParameter, timeParameter, lastUpDtOnParameter, tDSAmountParameter, swachhBharatCessPercParameter, swachhBharatCessAmtParameter, serviceTaxPercParameter);
        }
    
        public virtual ObjectResult<string> SaveForwardingData(Nullable<System.DateTime> forwardingDate, Nullable<int> forwardingTime, Nullable<int> form2Id, Nullable<int> onHoldId, string memoNumber, string igmReferenceNumber, string ecmReferenceNumber, string customRepresentative, string cHARepresentative, string importerRepresentative, string courierRepresentative, string remarks, string terminalCode, string loginName)
        {
            var forwardingDateParameter = forwardingDate.HasValue ?
                new ObjectParameter("ForwardingDate", forwardingDate) :
                new ObjectParameter("ForwardingDate", typeof(System.DateTime));
    
            var forwardingTimeParameter = forwardingTime.HasValue ?
                new ObjectParameter("ForwardingTime", forwardingTime) :
                new ObjectParameter("ForwardingTime", typeof(int));
    
            var form2IdParameter = form2Id.HasValue ?
                new ObjectParameter("Form2Id", form2Id) :
                new ObjectParameter("Form2Id", typeof(int));
    
            var onHoldIdParameter = onHoldId.HasValue ?
                new ObjectParameter("OnHoldId", onHoldId) :
                new ObjectParameter("OnHoldId", typeof(int));
    
            var memoNumberParameter = memoNumber != null ?
                new ObjectParameter("MemoNumber", memoNumber) :
                new ObjectParameter("MemoNumber", typeof(string));
    
            var igmReferenceNumberParameter = igmReferenceNumber != null ?
                new ObjectParameter("IgmReferenceNumber", igmReferenceNumber) :
                new ObjectParameter("IgmReferenceNumber", typeof(string));
    
            var ecmReferenceNumberParameter = ecmReferenceNumber != null ?
                new ObjectParameter("EcmReferenceNumber", ecmReferenceNumber) :
                new ObjectParameter("EcmReferenceNumber", typeof(string));
    
            var customRepresentativeParameter = customRepresentative != null ?
                new ObjectParameter("CustomRepresentative", customRepresentative) :
                new ObjectParameter("CustomRepresentative", typeof(string));
    
            var cHARepresentativeParameter = cHARepresentative != null ?
                new ObjectParameter("CHARepresentative", cHARepresentative) :
                new ObjectParameter("CHARepresentative", typeof(string));
    
            var importerRepresentativeParameter = importerRepresentative != null ?
                new ObjectParameter("ImporterRepresentative", importerRepresentative) :
                new ObjectParameter("ImporterRepresentative", typeof(string));
    
            var courierRepresentativeParameter = courierRepresentative != null ?
                new ObjectParameter("CourierRepresentative", courierRepresentative) :
                new ObjectParameter("CourierRepresentative", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var loginNameParameter = loginName != null ?
                new ObjectParameter("LoginName", loginName) :
                new ObjectParameter("LoginName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SaveForwardingData", forwardingDateParameter, forwardingTimeParameter, form2IdParameter, onHoldIdParameter, memoNumberParameter, igmReferenceNumberParameter, ecmReferenceNumberParameter, customRepresentativeParameter, cHARepresentativeParameter, importerRepresentativeParameter, courierRepresentativeParameter, remarksParameter, terminalCodeParameter, loginNameParameter);
        }
    
        public virtual int SaveImpForm2Summ(string iGMReferenceNo, Nullable<System.DateTime> iGMReferenceDate, string eCMReferenceDocNo, Nullable<System.DateTime> eCMReferenceDocDate, Nullable<decimal> eCMReferenceDocManifestWt, string eCMReferenceNonDocNo, Nullable<System.DateTime> eCMReferenceNonDocDate, Nullable<decimal> eCMReferenceNonDocManifestWt, string mAWBNo, Nullable<long> courierCoId, Nullable<long> airlineId, string flightNumber, string airportofArrival, string airportofShipment, string countryofExportation, Nullable<System.DateTime> actualDateofArrival, Nullable<int> actualTimeofArrival, string terminalCode, Nullable<long> form2Id, string createdBy, Nullable<System.DateTime> lastUpDtOn)
        {
            var iGMReferenceNoParameter = iGMReferenceNo != null ?
                new ObjectParameter("IGMReferenceNo", iGMReferenceNo) :
                new ObjectParameter("IGMReferenceNo", typeof(string));
    
            var iGMReferenceDateParameter = iGMReferenceDate.HasValue ?
                new ObjectParameter("IGMReferenceDate", iGMReferenceDate) :
                new ObjectParameter("IGMReferenceDate", typeof(System.DateTime));
    
            var eCMReferenceDocNoParameter = eCMReferenceDocNo != null ?
                new ObjectParameter("ECMReferenceDocNo", eCMReferenceDocNo) :
                new ObjectParameter("ECMReferenceDocNo", typeof(string));
    
            var eCMReferenceDocDateParameter = eCMReferenceDocDate.HasValue ?
                new ObjectParameter("ECMReferenceDocDate", eCMReferenceDocDate) :
                new ObjectParameter("ECMReferenceDocDate", typeof(System.DateTime));
    
            var eCMReferenceDocManifestWtParameter = eCMReferenceDocManifestWt.HasValue ?
                new ObjectParameter("ECMReferenceDocManifestWt", eCMReferenceDocManifestWt) :
                new ObjectParameter("ECMReferenceDocManifestWt", typeof(decimal));
    
            var eCMReferenceNonDocNoParameter = eCMReferenceNonDocNo != null ?
                new ObjectParameter("ECMReferenceNonDocNo", eCMReferenceNonDocNo) :
                new ObjectParameter("ECMReferenceNonDocNo", typeof(string));
    
            var eCMReferenceNonDocDateParameter = eCMReferenceNonDocDate.HasValue ?
                new ObjectParameter("ECMReferenceNonDocDate", eCMReferenceNonDocDate) :
                new ObjectParameter("ECMReferenceNonDocDate", typeof(System.DateTime));
    
            var eCMReferenceNonDocManifestWtParameter = eCMReferenceNonDocManifestWt.HasValue ?
                new ObjectParameter("ECMReferenceNonDocManifestWt", eCMReferenceNonDocManifestWt) :
                new ObjectParameter("ECMReferenceNonDocManifestWt", typeof(decimal));
    
            var mAWBNoParameter = mAWBNo != null ?
                new ObjectParameter("MAWBNo", mAWBNo) :
                new ObjectParameter("MAWBNo", typeof(string));
    
            var courierCoIdParameter = courierCoId.HasValue ?
                new ObjectParameter("CourierCoId", courierCoId) :
                new ObjectParameter("CourierCoId", typeof(long));
    
            var airlineIdParameter = airlineId.HasValue ?
                new ObjectParameter("AirlineId", airlineId) :
                new ObjectParameter("AirlineId", typeof(long));
    
            var flightNumberParameter = flightNumber != null ?
                new ObjectParameter("FlightNumber", flightNumber) :
                new ObjectParameter("FlightNumber", typeof(string));
    
            var airportofArrivalParameter = airportofArrival != null ?
                new ObjectParameter("AirportofArrival", airportofArrival) :
                new ObjectParameter("AirportofArrival", typeof(string));
    
            var airportofShipmentParameter = airportofShipment != null ?
                new ObjectParameter("AirportofShipment", airportofShipment) :
                new ObjectParameter("AirportofShipment", typeof(string));
    
            var countryofExportationParameter = countryofExportation != null ?
                new ObjectParameter("CountryofExportation", countryofExportation) :
                new ObjectParameter("CountryofExportation", typeof(string));
    
            var actualDateofArrivalParameter = actualDateofArrival.HasValue ?
                new ObjectParameter("ActualDateofArrival", actualDateofArrival) :
                new ObjectParameter("ActualDateofArrival", typeof(System.DateTime));
    
            var actualTimeofArrivalParameter = actualTimeofArrival.HasValue ?
                new ObjectParameter("ActualTimeofArrival", actualTimeofArrival) :
                new ObjectParameter("ActualTimeofArrival", typeof(int));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var form2IdParameter = form2Id.HasValue ?
                new ObjectParameter("Form2Id", form2Id) :
                new ObjectParameter("Form2Id", typeof(long));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var lastUpDtOnParameter = lastUpDtOn.HasValue ?
                new ObjectParameter("LastUpDtOn", lastUpDtOn) :
                new ObjectParameter("LastUpDtOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveImpForm2Summ", iGMReferenceNoParameter, iGMReferenceDateParameter, eCMReferenceDocNoParameter, eCMReferenceDocDateParameter, eCMReferenceDocManifestWtParameter, eCMReferenceNonDocNoParameter, eCMReferenceNonDocDateParameter, eCMReferenceNonDocManifestWtParameter, mAWBNoParameter, courierCoIdParameter, airlineIdParameter, flightNumberParameter, airportofArrivalParameter, airportofShipmentParameter, countryofExportationParameter, actualDateofArrivalParameter, actualTimeofArrivalParameter, terminalCodeParameter, form2IdParameter, createdByParameter, lastUpDtOnParameter);
        }
    
        public virtual int SaveImpGatePass(Nullable<int> from2Id, Nullable<int> form2Type, string iGMReferenceNo, string eCMReferenceNo, Nullable<System.DateTime> issueDateTime, string preventiveOfficer, string gPType, string fileNo, string dDRNo, Nullable<System.DateTime> dDRDate, Nullable<decimal> dDRAmount, string iDFNumber, Nullable<long> noofDays, Nullable<decimal> assessedValue, Nullable<decimal> dutyFeeAmount, string remarks, Nullable<decimal> waiveDelayCharges, Nullable<decimal> delayCharges, Nullable<decimal> waiveTDSCharges, Nullable<decimal> serviceTax, Nullable<int> noOfPkgs, Nullable<int> noOfShipments, Nullable<int> noOfBags, Nullable<decimal> weight, string terminalCode, string loginName, string checkListIds, string flag, Nullable<long> courierCoId, Nullable<long> receiptId, Nullable<long> facilitationReceiptId, string flightNumber, Nullable<System.DateTime> flightDate, Nullable<int> time, Nullable<System.DateTime> lastUpDtOn, Nullable<int> courierEmpId, string chargesApplicable, string chargesApplicableRemarks, Nullable<decimal> redemptionFine, Nullable<decimal> personalpenalty, string thokaNo, Nullable<int> tPCTM, Nullable<decimal> swachhBharatCessPerc, Nullable<decimal> swachhBharatCessAmt, Nullable<decimal> serviceTaxPerc)
        {
            var from2IdParameter = from2Id.HasValue ?
                new ObjectParameter("From2Id", from2Id) :
                new ObjectParameter("From2Id", typeof(int));
    
            var form2TypeParameter = form2Type.HasValue ?
                new ObjectParameter("Form2Type", form2Type) :
                new ObjectParameter("Form2Type", typeof(int));
    
            var iGMReferenceNoParameter = iGMReferenceNo != null ?
                new ObjectParameter("IGMReferenceNo", iGMReferenceNo) :
                new ObjectParameter("IGMReferenceNo", typeof(string));
    
            var eCMReferenceNoParameter = eCMReferenceNo != null ?
                new ObjectParameter("ECMReferenceNo", eCMReferenceNo) :
                new ObjectParameter("ECMReferenceNo", typeof(string));
    
            var issueDateTimeParameter = issueDateTime.HasValue ?
                new ObjectParameter("IssueDateTime", issueDateTime) :
                new ObjectParameter("IssueDateTime", typeof(System.DateTime));
    
            var preventiveOfficerParameter = preventiveOfficer != null ?
                new ObjectParameter("PreventiveOfficer", preventiveOfficer) :
                new ObjectParameter("PreventiveOfficer", typeof(string));
    
            var gPTypeParameter = gPType != null ?
                new ObjectParameter("GPType", gPType) :
                new ObjectParameter("GPType", typeof(string));
    
            var fileNoParameter = fileNo != null ?
                new ObjectParameter("FileNo", fileNo) :
                new ObjectParameter("FileNo", typeof(string));
    
            var dDRNoParameter = dDRNo != null ?
                new ObjectParameter("DDRNo", dDRNo) :
                new ObjectParameter("DDRNo", typeof(string));
    
            var dDRDateParameter = dDRDate.HasValue ?
                new ObjectParameter("DDRDate", dDRDate) :
                new ObjectParameter("DDRDate", typeof(System.DateTime));
    
            var dDRAmountParameter = dDRAmount.HasValue ?
                new ObjectParameter("DDRAmount", dDRAmount) :
                new ObjectParameter("DDRAmount", typeof(decimal));
    
            var iDFNumberParameter = iDFNumber != null ?
                new ObjectParameter("IDFNumber", iDFNumber) :
                new ObjectParameter("IDFNumber", typeof(string));
    
            var noofDaysParameter = noofDays.HasValue ?
                new ObjectParameter("NoofDays", noofDays) :
                new ObjectParameter("NoofDays", typeof(long));
    
            var assessedValueParameter = assessedValue.HasValue ?
                new ObjectParameter("AssessedValue", assessedValue) :
                new ObjectParameter("AssessedValue", typeof(decimal));
    
            var dutyFeeAmountParameter = dutyFeeAmount.HasValue ?
                new ObjectParameter("DutyFeeAmount", dutyFeeAmount) :
                new ObjectParameter("DutyFeeAmount", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var waiveDelayChargesParameter = waiveDelayCharges.HasValue ?
                new ObjectParameter("WaiveDelayCharges", waiveDelayCharges) :
                new ObjectParameter("WaiveDelayCharges", typeof(decimal));
    
            var delayChargesParameter = delayCharges.HasValue ?
                new ObjectParameter("DelayCharges", delayCharges) :
                new ObjectParameter("DelayCharges", typeof(decimal));
    
            var waiveTDSChargesParameter = waiveTDSCharges.HasValue ?
                new ObjectParameter("WaiveTDSCharges", waiveTDSCharges) :
                new ObjectParameter("WaiveTDSCharges", typeof(decimal));
    
            var serviceTaxParameter = serviceTax.HasValue ?
                new ObjectParameter("ServiceTax", serviceTax) :
                new ObjectParameter("ServiceTax", typeof(decimal));
    
            var noOfPkgsParameter = noOfPkgs.HasValue ?
                new ObjectParameter("NoOfPkgs", noOfPkgs) :
                new ObjectParameter("NoOfPkgs", typeof(int));
    
            var noOfShipmentsParameter = noOfShipments.HasValue ?
                new ObjectParameter("NoOfShipments", noOfShipments) :
                new ObjectParameter("NoOfShipments", typeof(int));
    
            var noOfBagsParameter = noOfBags.HasValue ?
                new ObjectParameter("NoOfBags", noOfBags) :
                new ObjectParameter("NoOfBags", typeof(int));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(decimal));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var loginNameParameter = loginName != null ?
                new ObjectParameter("LoginName", loginName) :
                new ObjectParameter("LoginName", typeof(string));
    
            var checkListIdsParameter = checkListIds != null ?
                new ObjectParameter("CheckListIds", checkListIds) :
                new ObjectParameter("CheckListIds", typeof(string));
    
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var courierCoIdParameter = courierCoId.HasValue ?
                new ObjectParameter("CourierCoId", courierCoId) :
                new ObjectParameter("CourierCoId", typeof(long));
    
            var receiptIdParameter = receiptId.HasValue ?
                new ObjectParameter("ReceiptId", receiptId) :
                new ObjectParameter("ReceiptId", typeof(long));
    
            var facilitationReceiptIdParameter = facilitationReceiptId.HasValue ?
                new ObjectParameter("FacilitationReceiptId", facilitationReceiptId) :
                new ObjectParameter("FacilitationReceiptId", typeof(long));
    
            var flightNumberParameter = flightNumber != null ?
                new ObjectParameter("FlightNumber", flightNumber) :
                new ObjectParameter("FlightNumber", typeof(string));
    
            var flightDateParameter = flightDate.HasValue ?
                new ObjectParameter("FlightDate", flightDate) :
                new ObjectParameter("FlightDate", typeof(System.DateTime));
    
            var timeParameter = time.HasValue ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(int));
    
            var lastUpDtOnParameter = lastUpDtOn.HasValue ?
                new ObjectParameter("LastUpDtOn", lastUpDtOn) :
                new ObjectParameter("LastUpDtOn", typeof(System.DateTime));
    
            var courierEmpIdParameter = courierEmpId.HasValue ?
                new ObjectParameter("CourierEmpId", courierEmpId) :
                new ObjectParameter("CourierEmpId", typeof(int));
    
            var chargesApplicableParameter = chargesApplicable != null ?
                new ObjectParameter("ChargesApplicable", chargesApplicable) :
                new ObjectParameter("ChargesApplicable", typeof(string));
    
            var chargesApplicableRemarksParameter = chargesApplicableRemarks != null ?
                new ObjectParameter("ChargesApplicableRemarks", chargesApplicableRemarks) :
                new ObjectParameter("ChargesApplicableRemarks", typeof(string));
    
            var redemptionFineParameter = redemptionFine.HasValue ?
                new ObjectParameter("RedemptionFine", redemptionFine) :
                new ObjectParameter("RedemptionFine", typeof(decimal));
    
            var personalpenaltyParameter = personalpenalty.HasValue ?
                new ObjectParameter("Personalpenalty", personalpenalty) :
                new ObjectParameter("Personalpenalty", typeof(decimal));
    
            var thokaNoParameter = thokaNo != null ?
                new ObjectParameter("ThokaNo", thokaNo) :
                new ObjectParameter("ThokaNo", typeof(string));
    
            var tPCTMParameter = tPCTM.HasValue ?
                new ObjectParameter("TPCTM", tPCTM) :
                new ObjectParameter("TPCTM", typeof(int));
    
            var swachhBharatCessPercParameter = swachhBharatCessPerc.HasValue ?
                new ObjectParameter("SwachhBharatCessPerc", swachhBharatCessPerc) :
                new ObjectParameter("SwachhBharatCessPerc", typeof(decimal));
    
            var swachhBharatCessAmtParameter = swachhBharatCessAmt.HasValue ?
                new ObjectParameter("SwachhBharatCessAmt", swachhBharatCessAmt) :
                new ObjectParameter("SwachhBharatCessAmt", typeof(decimal));
    
            var serviceTaxPercParameter = serviceTaxPerc.HasValue ?
                new ObjectParameter("ServiceTaxPerc", serviceTaxPerc) :
                new ObjectParameter("ServiceTaxPerc", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveImpGatePass", from2IdParameter, form2TypeParameter, iGMReferenceNoParameter, eCMReferenceNoParameter, issueDateTimeParameter, preventiveOfficerParameter, gPTypeParameter, fileNoParameter, dDRNoParameter, dDRDateParameter, dDRAmountParameter, iDFNumberParameter, noofDaysParameter, assessedValueParameter, dutyFeeAmountParameter, remarksParameter, waiveDelayChargesParameter, delayChargesParameter, waiveTDSChargesParameter, serviceTaxParameter, noOfPkgsParameter, noOfShipmentsParameter, noOfBagsParameter, weightParameter, terminalCodeParameter, loginNameParameter, checkListIdsParameter, flagParameter, courierCoIdParameter, receiptIdParameter, facilitationReceiptIdParameter, flightNumberParameter, flightDateParameter, timeParameter, lastUpDtOnParameter, courierEmpIdParameter, chargesApplicableParameter, chargesApplicableRemarksParameter, redemptionFineParameter, personalpenaltyParameter, thokaNoParameter, tPCTMParameter, swachhBharatCessPercParameter, swachhBharatCessAmtParameter, serviceTaxPercParameter);
        }
    
        public virtual ObjectResult<string> SaveOffLoadingData(string officerName, string reason, string remarks, string offloadingPersonStaff, Nullable<int> noOfBags, Nullable<int> noOfShips, Nullable<int> noOfPackages, Nullable<decimal> entryWeight, Nullable<int> cSB3, Nullable<int> cSB4, Nullable<int> oFLGPId, Nullable<int> entryGatePassId, Nullable<System.DateTime> lastUpDtOn, string terminalCode, string financialYear, string loginName)
        {
            var officerNameParameter = officerName != null ?
                new ObjectParameter("OfficerName", officerName) :
                new ObjectParameter("OfficerName", typeof(string));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var offloadingPersonStaffParameter = offloadingPersonStaff != null ?
                new ObjectParameter("OffloadingPersonStaff", offloadingPersonStaff) :
                new ObjectParameter("OffloadingPersonStaff", typeof(string));
    
            var noOfBagsParameter = noOfBags.HasValue ?
                new ObjectParameter("NoOfBags", noOfBags) :
                new ObjectParameter("NoOfBags", typeof(int));
    
            var noOfShipsParameter = noOfShips.HasValue ?
                new ObjectParameter("NoOfShips", noOfShips) :
                new ObjectParameter("NoOfShips", typeof(int));
    
            var noOfPackagesParameter = noOfPackages.HasValue ?
                new ObjectParameter("NoOfPackages", noOfPackages) :
                new ObjectParameter("NoOfPackages", typeof(int));
    
            var entryWeightParameter = entryWeight.HasValue ?
                new ObjectParameter("EntryWeight", entryWeight) :
                new ObjectParameter("EntryWeight", typeof(decimal));
    
            var cSB3Parameter = cSB3.HasValue ?
                new ObjectParameter("CSB3", cSB3) :
                new ObjectParameter("CSB3", typeof(int));
    
            var cSB4Parameter = cSB4.HasValue ?
                new ObjectParameter("CSB4", cSB4) :
                new ObjectParameter("CSB4", typeof(int));
    
            var oFLGPIdParameter = oFLGPId.HasValue ?
                new ObjectParameter("OFLGPId", oFLGPId) :
                new ObjectParameter("OFLGPId", typeof(int));
    
            var entryGatePassIdParameter = entryGatePassId.HasValue ?
                new ObjectParameter("EntryGatePassId", entryGatePassId) :
                new ObjectParameter("EntryGatePassId", typeof(int));
    
            var lastUpDtOnParameter = lastUpDtOn.HasValue ?
                new ObjectParameter("LastUpDtOn", lastUpDtOn) :
                new ObjectParameter("LastUpDtOn", typeof(System.DateTime));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var financialYearParameter = financialYear != null ?
                new ObjectParameter("FinancialYear", financialYear) :
                new ObjectParameter("FinancialYear", typeof(string));
    
            var loginNameParameter = loginName != null ?
                new ObjectParameter("LoginName", loginName) :
                new ObjectParameter("LoginName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SaveOffLoadingData", officerNameParameter, reasonParameter, remarksParameter, offloadingPersonStaffParameter, noOfBagsParameter, noOfShipsParameter, noOfPackagesParameter, entryWeightParameter, cSB3Parameter, cSB4Parameter, oFLGPIdParameter, entryGatePassIdParameter, lastUpDtOnParameter, terminalCodeParameter, financialYearParameter, loginNameParameter);
        }
    
        public virtual int SaveReleasePass(Nullable<int> releasePassId, string airlineStaff, string handlingStaff, string courierCoStaff, string eICIRepresentative, string remarks, string terminalCode, string loginName, Nullable<System.DateTime> lastUpDtOn)
        {
            var releasePassIdParameter = releasePassId.HasValue ?
                new ObjectParameter("ReleasePassId", releasePassId) :
                new ObjectParameter("ReleasePassId", typeof(int));
    
            var airlineStaffParameter = airlineStaff != null ?
                new ObjectParameter("AirlineStaff", airlineStaff) :
                new ObjectParameter("AirlineStaff", typeof(string));
    
            var handlingStaffParameter = handlingStaff != null ?
                new ObjectParameter("HandlingStaff", handlingStaff) :
                new ObjectParameter("HandlingStaff", typeof(string));
    
            var courierCoStaffParameter = courierCoStaff != null ?
                new ObjectParameter("CourierCoStaff", courierCoStaff) :
                new ObjectParameter("CourierCoStaff", typeof(string));
    
            var eICIRepresentativeParameter = eICIRepresentative != null ?
                new ObjectParameter("EICIRepresentative", eICIRepresentative) :
                new ObjectParameter("EICIRepresentative", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var loginNameParameter = loginName != null ?
                new ObjectParameter("LoginName", loginName) :
                new ObjectParameter("LoginName", typeof(string));
    
            var lastUpDtOnParameter = lastUpDtOn.HasValue ?
                new ObjectParameter("LastUpDtOn", lastUpDtOn) :
                new ObjectParameter("LastUpDtOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveReleasePass", releasePassIdParameter, airlineStaffParameter, handlingStaffParameter, courierCoStaffParameter, eICIRepresentativeParameter, remarksParameter, terminalCodeParameter, loginNameParameter, lastUpDtOnParameter);
        }
    
        public virtual ObjectResult<string> SaveReleasePassClosure(Nullable<int> cSB1Id, string terminalCode, string loginName)
        {
            var cSB1IdParameter = cSB1Id.HasValue ?
                new ObjectParameter("CSB1Id", cSB1Id) :
                new ObjectParameter("CSB1Id", typeof(int));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var loginNameParameter = loginName != null ?
                new ObjectParameter("LoginName", loginName) :
                new ObjectParameter("LoginName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SaveReleasePassClosure", cSB1IdParameter, terminalCodeParameter, loginNameParameter);
        }
    
        public virtual int SaveTemporaryDetentionGatePass(Nullable<int> onHoldID, string memoNumber, Nullable<int> form2Id, string iGMReferenceNo, string eCMReferenceNo, Nullable<System.DateTime> issueDateTime, string preventiveOfficer, Nullable<long> clearBy, string cHANO, string gPType, string fileNo, Nullable<int> tMPType, Nullable<int> noofDays, string remarks, Nullable<int> courierEmpId, Nullable<decimal> waiveDelayCharges, Nullable<decimal> delayCharges, Nullable<decimal> waiveTDSCharges, Nullable<decimal> serviceTax, Nullable<int> noOfPkgs, Nullable<decimal> weight, string terminalCode, string loginName, string flag, Nullable<long> courierCoId, string flightNumber, Nullable<System.DateTime> flightDate, Nullable<int> time, Nullable<System.DateTime> lastUpDtOn)
        {
            var onHoldIDParameter = onHoldID.HasValue ?
                new ObjectParameter("OnHoldID", onHoldID) :
                new ObjectParameter("OnHoldID", typeof(int));
    
            var memoNumberParameter = memoNumber != null ?
                new ObjectParameter("MemoNumber", memoNumber) :
                new ObjectParameter("MemoNumber", typeof(string));
    
            var form2IdParameter = form2Id.HasValue ?
                new ObjectParameter("Form2Id", form2Id) :
                new ObjectParameter("Form2Id", typeof(int));
    
            var iGMReferenceNoParameter = iGMReferenceNo != null ?
                new ObjectParameter("IGMReferenceNo", iGMReferenceNo) :
                new ObjectParameter("IGMReferenceNo", typeof(string));
    
            var eCMReferenceNoParameter = eCMReferenceNo != null ?
                new ObjectParameter("ECMReferenceNo", eCMReferenceNo) :
                new ObjectParameter("ECMReferenceNo", typeof(string));
    
            var issueDateTimeParameter = issueDateTime.HasValue ?
                new ObjectParameter("IssueDateTime", issueDateTime) :
                new ObjectParameter("IssueDateTime", typeof(System.DateTime));
    
            var preventiveOfficerParameter = preventiveOfficer != null ?
                new ObjectParameter("PreventiveOfficer", preventiveOfficer) :
                new ObjectParameter("PreventiveOfficer", typeof(string));
    
            var clearByParameter = clearBy.HasValue ?
                new ObjectParameter("ClearBy", clearBy) :
                new ObjectParameter("ClearBy", typeof(long));
    
            var cHANOParameter = cHANO != null ?
                new ObjectParameter("CHANO", cHANO) :
                new ObjectParameter("CHANO", typeof(string));
    
            var gPTypeParameter = gPType != null ?
                new ObjectParameter("GPType", gPType) :
                new ObjectParameter("GPType", typeof(string));
    
            var fileNoParameter = fileNo != null ?
                new ObjectParameter("FileNo", fileNo) :
                new ObjectParameter("FileNo", typeof(string));
    
            var tMPTypeParameter = tMPType.HasValue ?
                new ObjectParameter("TMPType", tMPType) :
                new ObjectParameter("TMPType", typeof(int));
    
            var noofDaysParameter = noofDays.HasValue ?
                new ObjectParameter("NoofDays", noofDays) :
                new ObjectParameter("NoofDays", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var courierEmpIdParameter = courierEmpId.HasValue ?
                new ObjectParameter("CourierEmpId", courierEmpId) :
                new ObjectParameter("CourierEmpId", typeof(int));
    
            var waiveDelayChargesParameter = waiveDelayCharges.HasValue ?
                new ObjectParameter("WaiveDelayCharges", waiveDelayCharges) :
                new ObjectParameter("WaiveDelayCharges", typeof(decimal));
    
            var delayChargesParameter = delayCharges.HasValue ?
                new ObjectParameter("DelayCharges", delayCharges) :
                new ObjectParameter("DelayCharges", typeof(decimal));
    
            var waiveTDSChargesParameter = waiveTDSCharges.HasValue ?
                new ObjectParameter("WaiveTDSCharges", waiveTDSCharges) :
                new ObjectParameter("WaiveTDSCharges", typeof(decimal));
    
            var serviceTaxParameter = serviceTax.HasValue ?
                new ObjectParameter("ServiceTax", serviceTax) :
                new ObjectParameter("ServiceTax", typeof(decimal));
    
            var noOfPkgsParameter = noOfPkgs.HasValue ?
                new ObjectParameter("NoOfPkgs", noOfPkgs) :
                new ObjectParameter("NoOfPkgs", typeof(int));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(decimal));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var loginNameParameter = loginName != null ?
                new ObjectParameter("LoginName", loginName) :
                new ObjectParameter("LoginName", typeof(string));
    
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var courierCoIdParameter = courierCoId.HasValue ?
                new ObjectParameter("CourierCoId", courierCoId) :
                new ObjectParameter("CourierCoId", typeof(long));
    
            var flightNumberParameter = flightNumber != null ?
                new ObjectParameter("FlightNumber", flightNumber) :
                new ObjectParameter("FlightNumber", typeof(string));
    
            var flightDateParameter = flightDate.HasValue ?
                new ObjectParameter("FlightDate", flightDate) :
                new ObjectParameter("FlightDate", typeof(System.DateTime));
    
            var timeParameter = time.HasValue ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(int));
    
            var lastUpDtOnParameter = lastUpDtOn.HasValue ?
                new ObjectParameter("LastUpDtOn", lastUpDtOn) :
                new ObjectParameter("LastUpDtOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveTemporaryDetentionGatePass", onHoldIDParameter, memoNumberParameter, form2IdParameter, iGMReferenceNoParameter, eCMReferenceNoParameter, issueDateTimeParameter, preventiveOfficerParameter, clearByParameter, cHANOParameter, gPTypeParameter, fileNoParameter, tMPTypeParameter, noofDaysParameter, remarksParameter, courierEmpIdParameter, waiveDelayChargesParameter, delayChargesParameter, waiveTDSChargesParameter, serviceTaxParameter, noOfPkgsParameter, weightParameter, terminalCodeParameter, loginNameParameter, flagParameter, courierCoIdParameter, flightNumberParameter, flightDateParameter, timeParameter, lastUpDtOnParameter);
        }
    
        public virtual int SaveWeightAcceptance(Nullable<long> cSB1WAId, Nullable<long> cSBId, string uOMCode, string weightRecordedBy, string airlineEmpId, string lEOIssuedBy, string courierRepresentativeName, string terminalCode, string finYear, Nullable<System.DateTime> weightAcceptanceLastUpDtOn, string loginName, string flightNumber, Nullable<System.DateTime> flightDate, Nullable<int> courierCoId, Nullable<long> receiptId, Nullable<long> receiptTypeId, Nullable<long> receiptChargeType, Nullable<System.DateTime> lastUpDtOn, Nullable<int> firstBagRecordTm, Nullable<int> lastBagRecordTm, string oBCName)
        {
            var cSB1WAIdParameter = cSB1WAId.HasValue ?
                new ObjectParameter("CSB1WAId", cSB1WAId) :
                new ObjectParameter("CSB1WAId", typeof(long));
    
            var cSBIdParameter = cSBId.HasValue ?
                new ObjectParameter("CSBId", cSBId) :
                new ObjectParameter("CSBId", typeof(long));
    
            var uOMCodeParameter = uOMCode != null ?
                new ObjectParameter("UOMCode", uOMCode) :
                new ObjectParameter("UOMCode", typeof(string));
    
            var weightRecordedByParameter = weightRecordedBy != null ?
                new ObjectParameter("WeightRecordedBy", weightRecordedBy) :
                new ObjectParameter("WeightRecordedBy", typeof(string));
    
            var airlineEmpIdParameter = airlineEmpId != null ?
                new ObjectParameter("AirlineEmpId", airlineEmpId) :
                new ObjectParameter("AirlineEmpId", typeof(string));
    
            var lEOIssuedByParameter = lEOIssuedBy != null ?
                new ObjectParameter("LEOIssuedBy", lEOIssuedBy) :
                new ObjectParameter("LEOIssuedBy", typeof(string));
    
            var courierRepresentativeNameParameter = courierRepresentativeName != null ?
                new ObjectParameter("CourierRepresentativeName", courierRepresentativeName) :
                new ObjectParameter("CourierRepresentativeName", typeof(string));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var finYearParameter = finYear != null ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(string));
    
            var weightAcceptanceLastUpDtOnParameter = weightAcceptanceLastUpDtOn.HasValue ?
                new ObjectParameter("WeightAcceptanceLastUpDtOn", weightAcceptanceLastUpDtOn) :
                new ObjectParameter("WeightAcceptanceLastUpDtOn", typeof(System.DateTime));
    
            var loginNameParameter = loginName != null ?
                new ObjectParameter("LoginName", loginName) :
                new ObjectParameter("LoginName", typeof(string));
    
            var flightNumberParameter = flightNumber != null ?
                new ObjectParameter("FlightNumber", flightNumber) :
                new ObjectParameter("FlightNumber", typeof(string));
    
            var flightDateParameter = flightDate.HasValue ?
                new ObjectParameter("FlightDate", flightDate) :
                new ObjectParameter("FlightDate", typeof(System.DateTime));
    
            var courierCoIdParameter = courierCoId.HasValue ?
                new ObjectParameter("CourierCoId", courierCoId) :
                new ObjectParameter("CourierCoId", typeof(int));
    
            var receiptIdParameter = receiptId.HasValue ?
                new ObjectParameter("ReceiptId", receiptId) :
                new ObjectParameter("ReceiptId", typeof(long));
    
            var receiptTypeIdParameter = receiptTypeId.HasValue ?
                new ObjectParameter("ReceiptTypeId", receiptTypeId) :
                new ObjectParameter("ReceiptTypeId", typeof(long));
    
            var receiptChargeTypeParameter = receiptChargeType.HasValue ?
                new ObjectParameter("ReceiptChargeType", receiptChargeType) :
                new ObjectParameter("ReceiptChargeType", typeof(long));
    
            var lastUpDtOnParameter = lastUpDtOn.HasValue ?
                new ObjectParameter("LastUpDtOn", lastUpDtOn) :
                new ObjectParameter("LastUpDtOn", typeof(System.DateTime));
    
            var firstBagRecordTmParameter = firstBagRecordTm.HasValue ?
                new ObjectParameter("FirstBagRecordTm", firstBagRecordTm) :
                new ObjectParameter("FirstBagRecordTm", typeof(int));
    
            var lastBagRecordTmParameter = lastBagRecordTm.HasValue ?
                new ObjectParameter("LastBagRecordTm", lastBagRecordTm) :
                new ObjectParameter("LastBagRecordTm", typeof(int));
    
            var oBCNameParameter = oBCName != null ?
                new ObjectParameter("OBCName", oBCName) :
                new ObjectParameter("OBCName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveWeightAcceptance", cSB1WAIdParameter, cSBIdParameter, uOMCodeParameter, weightRecordedByParameter, airlineEmpIdParameter, lEOIssuedByParameter, courierRepresentativeNameParameter, terminalCodeParameter, finYearParameter, weightAcceptanceLastUpDtOnParameter, loginNameParameter, flightNumberParameter, flightDateParameter, courierCoIdParameter, receiptIdParameter, receiptTypeIdParameter, receiptChargeTypeParameter, lastUpDtOnParameter, firstBagRecordTmParameter, lastBagRecordTmParameter, oBCNameParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int UpdateAuctionBOE(Nullable<int> billOfEntryId, Nullable<int> auctionListId, string bidderName, string bidderVatTinNumber, string description, Nullable<decimal> amount, Nullable<decimal> vatPercent, Nullable<decimal> vat, Nullable<decimal> otherCharges, string terminalCode, string financialYear, string loginName, string challanNumber, Nullable<System.DateTime> challanDate, Nullable<decimal> dutyAmount, Nullable<int> paymentMode, string bankName, string chequeNumber, Nullable<System.DateTime> chequeDate)
        {
            var billOfEntryIdParameter = billOfEntryId.HasValue ?
                new ObjectParameter("BillOfEntryId", billOfEntryId) :
                new ObjectParameter("BillOfEntryId", typeof(int));
    
            var auctionListIdParameter = auctionListId.HasValue ?
                new ObjectParameter("AuctionListId", auctionListId) :
                new ObjectParameter("AuctionListId", typeof(int));
    
            var bidderNameParameter = bidderName != null ?
                new ObjectParameter("BidderName", bidderName) :
                new ObjectParameter("BidderName", typeof(string));
    
            var bidderVatTinNumberParameter = bidderVatTinNumber != null ?
                new ObjectParameter("BidderVatTinNumber", bidderVatTinNumber) :
                new ObjectParameter("BidderVatTinNumber", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var vatPercentParameter = vatPercent.HasValue ?
                new ObjectParameter("VatPercent", vatPercent) :
                new ObjectParameter("VatPercent", typeof(decimal));
    
            var vatParameter = vat.HasValue ?
                new ObjectParameter("Vat", vat) :
                new ObjectParameter("Vat", typeof(decimal));
    
            var otherChargesParameter = otherCharges.HasValue ?
                new ObjectParameter("OtherCharges", otherCharges) :
                new ObjectParameter("OtherCharges", typeof(decimal));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var financialYearParameter = financialYear != null ?
                new ObjectParameter("FinancialYear", financialYear) :
                new ObjectParameter("FinancialYear", typeof(string));
    
            var loginNameParameter = loginName != null ?
                new ObjectParameter("LoginName", loginName) :
                new ObjectParameter("LoginName", typeof(string));
    
            var challanNumberParameter = challanNumber != null ?
                new ObjectParameter("ChallanNumber", challanNumber) :
                new ObjectParameter("ChallanNumber", typeof(string));
    
            var challanDateParameter = challanDate.HasValue ?
                new ObjectParameter("ChallanDate", challanDate) :
                new ObjectParameter("ChallanDate", typeof(System.DateTime));
    
            var dutyAmountParameter = dutyAmount.HasValue ?
                new ObjectParameter("DutyAmount", dutyAmount) :
                new ObjectParameter("DutyAmount", typeof(decimal));
    
            var paymentModeParameter = paymentMode.HasValue ?
                new ObjectParameter("PaymentMode", paymentMode) :
                new ObjectParameter("PaymentMode", typeof(int));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var chequeNumberParameter = chequeNumber != null ?
                new ObjectParameter("ChequeNumber", chequeNumber) :
                new ObjectParameter("ChequeNumber", typeof(string));
    
            var chequeDateParameter = chequeDate.HasValue ?
                new ObjectParameter("ChequeDate", chequeDate) :
                new ObjectParameter("ChequeDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAuctionBOE", billOfEntryIdParameter, auctionListIdParameter, bidderNameParameter, bidderVatTinNumberParameter, descriptionParameter, amountParameter, vatPercentParameter, vatParameter, otherChargesParameter, terminalCodeParameter, financialYearParameter, loginNameParameter, challanNumberParameter, challanDateParameter, dutyAmountParameter, paymentModeParameter, bankNameParameter, chequeNumberParameter, chequeDateParameter);
        }
    
        public virtual int UpdateAuctionList(Nullable<int> auctionListId, string terminalCode, string loginName, string finYear)
        {
            var auctionListIdParameter = auctionListId.HasValue ?
                new ObjectParameter("AuctionListId", auctionListId) :
                new ObjectParameter("AuctionListId", typeof(int));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var loginNameParameter = loginName != null ?
                new ObjectParameter("LoginName", loginName) :
                new ObjectParameter("LoginName", typeof(string));
    
            var finYearParameter = finYear != null ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAuctionList", auctionListIdParameter, terminalCodeParameter, loginNameParameter, finYearParameter);
        }
    
        public virtual ObjectResult<string> UpdateBOEGroup(Nullable<decimal> fairPrice, Nullable<decimal> salePrice, Nullable<decimal> rateSD, Nullable<decimal> bCD, Nullable<decimal> cVD, Nullable<decimal> custom, Nullable<decimal> additionalCDRate, Nullable<decimal> additionalCDAmount, Nullable<decimal> totalDutyRate, Nullable<decimal> totalDuty, string additionInfo, string loginName, string financialYear, string terminalCode, Nullable<int> aucBOEId)
        {
            var fairPriceParameter = fairPrice.HasValue ?
                new ObjectParameter("FairPrice", fairPrice) :
                new ObjectParameter("FairPrice", typeof(decimal));
    
            var salePriceParameter = salePrice.HasValue ?
                new ObjectParameter("SalePrice", salePrice) :
                new ObjectParameter("SalePrice", typeof(decimal));
    
            var rateSDParameter = rateSD.HasValue ?
                new ObjectParameter("RateSD", rateSD) :
                new ObjectParameter("RateSD", typeof(decimal));
    
            var bCDParameter = bCD.HasValue ?
                new ObjectParameter("BCD", bCD) :
                new ObjectParameter("BCD", typeof(decimal));
    
            var cVDParameter = cVD.HasValue ?
                new ObjectParameter("CVD", cVD) :
                new ObjectParameter("CVD", typeof(decimal));
    
            var customParameter = custom.HasValue ?
                new ObjectParameter("Custom", custom) :
                new ObjectParameter("Custom", typeof(decimal));
    
            var additionalCDRateParameter = additionalCDRate.HasValue ?
                new ObjectParameter("AdditionalCDRate", additionalCDRate) :
                new ObjectParameter("AdditionalCDRate", typeof(decimal));
    
            var additionalCDAmountParameter = additionalCDAmount.HasValue ?
                new ObjectParameter("AdditionalCDAmount", additionalCDAmount) :
                new ObjectParameter("AdditionalCDAmount", typeof(decimal));
    
            var totalDutyRateParameter = totalDutyRate.HasValue ?
                new ObjectParameter("TotalDutyRate", totalDutyRate) :
                new ObjectParameter("TotalDutyRate", typeof(decimal));
    
            var totalDutyParameter = totalDuty.HasValue ?
                new ObjectParameter("TotalDuty", totalDuty) :
                new ObjectParameter("TotalDuty", typeof(decimal));
    
            var additionInfoParameter = additionInfo != null ?
                new ObjectParameter("AdditionInfo", additionInfo) :
                new ObjectParameter("AdditionInfo", typeof(string));
    
            var loginNameParameter = loginName != null ?
                new ObjectParameter("LoginName", loginName) :
                new ObjectParameter("LoginName", typeof(string));
    
            var financialYearParameter = financialYear != null ?
                new ObjectParameter("FinancialYear", financialYear) :
                new ObjectParameter("FinancialYear", typeof(string));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var aucBOEIdParameter = aucBOEId.HasValue ?
                new ObjectParameter("AucBOEId", aucBOEId) :
                new ObjectParameter("AucBOEId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UpdateBOEGroup", fairPriceParameter, salePriceParameter, rateSDParameter, bCDParameter, cVDParameter, customParameter, additionalCDRateParameter, additionalCDAmountParameter, totalDutyRateParameter, totalDutyParameter, additionInfoParameter, loginNameParameter, financialYearParameter, terminalCodeParameter, aucBOEIdParameter);
        }
    
        public virtual int UpdateDetentionGatePass(Nullable<int> oHGPOnHoldID, string oHGPGatePassNo, string oHGPPreventiveOfficer, string oHGPClearBy, string oHGPCHANO, string cHAName, string oHGPGPType, string oHGPFileNo, string oHGPDDRNo, Nullable<System.DateTime> oHGPDDRDate, Nullable<decimal> oHGPDDRAmount, string oHGPIDFNumber, Nullable<long> noofDays, Nullable<decimal> oHGPAssessedValue, Nullable<decimal> redemptionFees, Nullable<decimal> personalPenalty, string thokaNumber, string oHGPRemarks, Nullable<decimal> oHGPWaiveDelayCharges, Nullable<decimal> oHGPDelayCharges, Nullable<decimal> oHGPWaiveTDSCharges, Nullable<decimal> oHGPServiceTax, Nullable<int> oHGPNoOfPkgs, Nullable<decimal> oHGPWeight, string terminalCode, string loginName, Nullable<long> courierEmpId, string checkListIds, Nullable<int> receiptId, string flag, Nullable<long> courierCoId, string oHGPFlightNumber, Nullable<System.DateTime> oHGPFlightDate, Nullable<System.DateTime> oHGPLastUpDtOn, Nullable<System.DateTime> rCPTLastUpDtOn, Nullable<decimal> oldBalanceAmount, Nullable<int> chqReceiptId, string chequeNumber, Nullable<int> chqReceiptDtlId, Nullable<decimal> tDSAmount, Nullable<decimal> swachhBharatCessPerc, Nullable<decimal> swachhBharatCessAmt, Nullable<decimal> serviceTaxPerc)
        {
            var oHGPOnHoldIDParameter = oHGPOnHoldID.HasValue ?
                new ObjectParameter("OHGPOnHoldID", oHGPOnHoldID) :
                new ObjectParameter("OHGPOnHoldID", typeof(int));
    
            var oHGPGatePassNoParameter = oHGPGatePassNo != null ?
                new ObjectParameter("OHGPGatePassNo", oHGPGatePassNo) :
                new ObjectParameter("OHGPGatePassNo", typeof(string));
    
            var oHGPPreventiveOfficerParameter = oHGPPreventiveOfficer != null ?
                new ObjectParameter("OHGPPreventiveOfficer", oHGPPreventiveOfficer) :
                new ObjectParameter("OHGPPreventiveOfficer", typeof(string));
    
            var oHGPClearByParameter = oHGPClearBy != null ?
                new ObjectParameter("OHGPClearBy", oHGPClearBy) :
                new ObjectParameter("OHGPClearBy", typeof(string));
    
            var oHGPCHANOParameter = oHGPCHANO != null ?
                new ObjectParameter("OHGPCHANO", oHGPCHANO) :
                new ObjectParameter("OHGPCHANO", typeof(string));
    
            var cHANameParameter = cHAName != null ?
                new ObjectParameter("CHAName", cHAName) :
                new ObjectParameter("CHAName", typeof(string));
    
            var oHGPGPTypeParameter = oHGPGPType != null ?
                new ObjectParameter("OHGPGPType", oHGPGPType) :
                new ObjectParameter("OHGPGPType", typeof(string));
    
            var oHGPFileNoParameter = oHGPFileNo != null ?
                new ObjectParameter("OHGPFileNo", oHGPFileNo) :
                new ObjectParameter("OHGPFileNo", typeof(string));
    
            var oHGPDDRNoParameter = oHGPDDRNo != null ?
                new ObjectParameter("OHGPDDRNo", oHGPDDRNo) :
                new ObjectParameter("OHGPDDRNo", typeof(string));
    
            var oHGPDDRDateParameter = oHGPDDRDate.HasValue ?
                new ObjectParameter("OHGPDDRDate", oHGPDDRDate) :
                new ObjectParameter("OHGPDDRDate", typeof(System.DateTime));
    
            var oHGPDDRAmountParameter = oHGPDDRAmount.HasValue ?
                new ObjectParameter("OHGPDDRAmount", oHGPDDRAmount) :
                new ObjectParameter("OHGPDDRAmount", typeof(decimal));
    
            var oHGPIDFNumberParameter = oHGPIDFNumber != null ?
                new ObjectParameter("OHGPIDFNumber", oHGPIDFNumber) :
                new ObjectParameter("OHGPIDFNumber", typeof(string));
    
            var noofDaysParameter = noofDays.HasValue ?
                new ObjectParameter("NoofDays", noofDays) :
                new ObjectParameter("NoofDays", typeof(long));
    
            var oHGPAssessedValueParameter = oHGPAssessedValue.HasValue ?
                new ObjectParameter("OHGPAssessedValue", oHGPAssessedValue) :
                new ObjectParameter("OHGPAssessedValue", typeof(decimal));
    
            var redemptionFeesParameter = redemptionFees.HasValue ?
                new ObjectParameter("RedemptionFees", redemptionFees) :
                new ObjectParameter("RedemptionFees", typeof(decimal));
    
            var personalPenaltyParameter = personalPenalty.HasValue ?
                new ObjectParameter("PersonalPenalty", personalPenalty) :
                new ObjectParameter("PersonalPenalty", typeof(decimal));
    
            var thokaNumberParameter = thokaNumber != null ?
                new ObjectParameter("ThokaNumber", thokaNumber) :
                new ObjectParameter("ThokaNumber", typeof(string));
    
            var oHGPRemarksParameter = oHGPRemarks != null ?
                new ObjectParameter("OHGPRemarks", oHGPRemarks) :
                new ObjectParameter("OHGPRemarks", typeof(string));
    
            var oHGPWaiveDelayChargesParameter = oHGPWaiveDelayCharges.HasValue ?
                new ObjectParameter("OHGPWaiveDelayCharges", oHGPWaiveDelayCharges) :
                new ObjectParameter("OHGPWaiveDelayCharges", typeof(decimal));
    
            var oHGPDelayChargesParameter = oHGPDelayCharges.HasValue ?
                new ObjectParameter("OHGPDelayCharges", oHGPDelayCharges) :
                new ObjectParameter("OHGPDelayCharges", typeof(decimal));
    
            var oHGPWaiveTDSChargesParameter = oHGPWaiveTDSCharges.HasValue ?
                new ObjectParameter("OHGPWaiveTDSCharges", oHGPWaiveTDSCharges) :
                new ObjectParameter("OHGPWaiveTDSCharges", typeof(decimal));
    
            var oHGPServiceTaxParameter = oHGPServiceTax.HasValue ?
                new ObjectParameter("OHGPServiceTax", oHGPServiceTax) :
                new ObjectParameter("OHGPServiceTax", typeof(decimal));
    
            var oHGPNoOfPkgsParameter = oHGPNoOfPkgs.HasValue ?
                new ObjectParameter("OHGPNoOfPkgs", oHGPNoOfPkgs) :
                new ObjectParameter("OHGPNoOfPkgs", typeof(int));
    
            var oHGPWeightParameter = oHGPWeight.HasValue ?
                new ObjectParameter("OHGPWeight", oHGPWeight) :
                new ObjectParameter("OHGPWeight", typeof(decimal));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var loginNameParameter = loginName != null ?
                new ObjectParameter("LoginName", loginName) :
                new ObjectParameter("LoginName", typeof(string));
    
            var courierEmpIdParameter = courierEmpId.HasValue ?
                new ObjectParameter("CourierEmpId", courierEmpId) :
                new ObjectParameter("CourierEmpId", typeof(long));
    
            var checkListIdsParameter = checkListIds != null ?
                new ObjectParameter("CheckListIds", checkListIds) :
                new ObjectParameter("CheckListIds", typeof(string));
    
            var receiptIdParameter = receiptId.HasValue ?
                new ObjectParameter("ReceiptId", receiptId) :
                new ObjectParameter("ReceiptId", typeof(int));
    
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var courierCoIdParameter = courierCoId.HasValue ?
                new ObjectParameter("CourierCoId", courierCoId) :
                new ObjectParameter("CourierCoId", typeof(long));
    
            var oHGPFlightNumberParameter = oHGPFlightNumber != null ?
                new ObjectParameter("OHGPFlightNumber", oHGPFlightNumber) :
                new ObjectParameter("OHGPFlightNumber", typeof(string));
    
            var oHGPFlightDateParameter = oHGPFlightDate.HasValue ?
                new ObjectParameter("OHGPFlightDate", oHGPFlightDate) :
                new ObjectParameter("OHGPFlightDate", typeof(System.DateTime));
    
            var oHGPLastUpDtOnParameter = oHGPLastUpDtOn.HasValue ?
                new ObjectParameter("OHGPLastUpDtOn", oHGPLastUpDtOn) :
                new ObjectParameter("OHGPLastUpDtOn", typeof(System.DateTime));
    
            var rCPTLastUpDtOnParameter = rCPTLastUpDtOn.HasValue ?
                new ObjectParameter("RCPTLastUpDtOn", rCPTLastUpDtOn) :
                new ObjectParameter("RCPTLastUpDtOn", typeof(System.DateTime));
    
            var oldBalanceAmountParameter = oldBalanceAmount.HasValue ?
                new ObjectParameter("OldBalanceAmount", oldBalanceAmount) :
                new ObjectParameter("OldBalanceAmount", typeof(decimal));
    
            var chqReceiptIdParameter = chqReceiptId.HasValue ?
                new ObjectParameter("ChqReceiptId", chqReceiptId) :
                new ObjectParameter("ChqReceiptId", typeof(int));
    
            var chequeNumberParameter = chequeNumber != null ?
                new ObjectParameter("ChequeNumber", chequeNumber) :
                new ObjectParameter("ChequeNumber", typeof(string));
    
            var chqReceiptDtlIdParameter = chqReceiptDtlId.HasValue ?
                new ObjectParameter("ChqReceiptDtlId", chqReceiptDtlId) :
                new ObjectParameter("ChqReceiptDtlId", typeof(int));
    
            var tDSAmountParameter = tDSAmount.HasValue ?
                new ObjectParameter("TDSAmount", tDSAmount) :
                new ObjectParameter("TDSAmount", typeof(decimal));
    
            var swachhBharatCessPercParameter = swachhBharatCessPerc.HasValue ?
                new ObjectParameter("SwachhBharatCessPerc", swachhBharatCessPerc) :
                new ObjectParameter("SwachhBharatCessPerc", typeof(decimal));
    
            var swachhBharatCessAmtParameter = swachhBharatCessAmt.HasValue ?
                new ObjectParameter("SwachhBharatCessAmt", swachhBharatCessAmt) :
                new ObjectParameter("SwachhBharatCessAmt", typeof(decimal));
    
            var serviceTaxPercParameter = serviceTaxPerc.HasValue ?
                new ObjectParameter("ServiceTaxPerc", serviceTaxPerc) :
                new ObjectParameter("ServiceTaxPerc", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDetentionGatePass", oHGPOnHoldIDParameter, oHGPGatePassNoParameter, oHGPPreventiveOfficerParameter, oHGPClearByParameter, oHGPCHANOParameter, cHANameParameter, oHGPGPTypeParameter, oHGPFileNoParameter, oHGPDDRNoParameter, oHGPDDRDateParameter, oHGPDDRAmountParameter, oHGPIDFNumberParameter, noofDaysParameter, oHGPAssessedValueParameter, redemptionFeesParameter, personalPenaltyParameter, thokaNumberParameter, oHGPRemarksParameter, oHGPWaiveDelayChargesParameter, oHGPDelayChargesParameter, oHGPWaiveTDSChargesParameter, oHGPServiceTaxParameter, oHGPNoOfPkgsParameter, oHGPWeightParameter, terminalCodeParameter, loginNameParameter, courierEmpIdParameter, checkListIdsParameter, receiptIdParameter, flagParameter, courierCoIdParameter, oHGPFlightNumberParameter, oHGPFlightDateParameter, oHGPLastUpDtOnParameter, rCPTLastUpDtOnParameter, oldBalanceAmountParameter, chqReceiptIdParameter, chequeNumberParameter, chqReceiptDtlIdParameter, tDSAmountParameter, swachhBharatCessPercParameter, swachhBharatCessAmtParameter, serviceTaxPercParameter);
        }
    
        public virtual ObjectResult<string> UpdateEntryGatePass(Nullable<int> entryGatePassId, string entryGatePassNumber, Nullable<System.DateTime> entryGatePassDate, Nullable<int> courierCompanyId, string flightNumber, Nullable<System.DateTime> flightDate, Nullable<int> timeofDeparture, Nullable<int> noOfBags, Nullable<int> noOfShips, Nullable<int> noOfPackages, Nullable<decimal> entryWeight, Nullable<int> cSB3, Nullable<int> cSB4, string entryPersonStaff, string vehicleNumber, string terminalCode, string financialYear, string loginName, Nullable<System.DateTime> lastUpDTOn)
        {
            var entryGatePassIdParameter = entryGatePassId.HasValue ?
                new ObjectParameter("EntryGatePassId", entryGatePassId) :
                new ObjectParameter("EntryGatePassId", typeof(int));
    
            var entryGatePassNumberParameter = entryGatePassNumber != null ?
                new ObjectParameter("EntryGatePassNumber", entryGatePassNumber) :
                new ObjectParameter("EntryGatePassNumber", typeof(string));
    
            var entryGatePassDateParameter = entryGatePassDate.HasValue ?
                new ObjectParameter("EntryGatePassDate", entryGatePassDate) :
                new ObjectParameter("EntryGatePassDate", typeof(System.DateTime));
    
            var courierCompanyIdParameter = courierCompanyId.HasValue ?
                new ObjectParameter("CourierCompanyId", courierCompanyId) :
                new ObjectParameter("CourierCompanyId", typeof(int));
    
            var flightNumberParameter = flightNumber != null ?
                new ObjectParameter("FlightNumber", flightNumber) :
                new ObjectParameter("FlightNumber", typeof(string));
    
            var flightDateParameter = flightDate.HasValue ?
                new ObjectParameter("FlightDate", flightDate) :
                new ObjectParameter("FlightDate", typeof(System.DateTime));
    
            var timeofDepartureParameter = timeofDeparture.HasValue ?
                new ObjectParameter("TimeofDeparture", timeofDeparture) :
                new ObjectParameter("TimeofDeparture", typeof(int));
    
            var noOfBagsParameter = noOfBags.HasValue ?
                new ObjectParameter("NoOfBags", noOfBags) :
                new ObjectParameter("NoOfBags", typeof(int));
    
            var noOfShipsParameter = noOfShips.HasValue ?
                new ObjectParameter("NoOfShips", noOfShips) :
                new ObjectParameter("NoOfShips", typeof(int));
    
            var noOfPackagesParameter = noOfPackages.HasValue ?
                new ObjectParameter("NoOfPackages", noOfPackages) :
                new ObjectParameter("NoOfPackages", typeof(int));
    
            var entryWeightParameter = entryWeight.HasValue ?
                new ObjectParameter("EntryWeight", entryWeight) :
                new ObjectParameter("EntryWeight", typeof(decimal));
    
            var cSB3Parameter = cSB3.HasValue ?
                new ObjectParameter("CSB3", cSB3) :
                new ObjectParameter("CSB3", typeof(int));
    
            var cSB4Parameter = cSB4.HasValue ?
                new ObjectParameter("CSB4", cSB4) :
                new ObjectParameter("CSB4", typeof(int));
    
            var entryPersonStaffParameter = entryPersonStaff != null ?
                new ObjectParameter("EntryPersonStaff", entryPersonStaff) :
                new ObjectParameter("EntryPersonStaff", typeof(string));
    
            var vehicleNumberParameter = vehicleNumber != null ?
                new ObjectParameter("VehicleNumber", vehicleNumber) :
                new ObjectParameter("VehicleNumber", typeof(string));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var financialYearParameter = financialYear != null ?
                new ObjectParameter("FinancialYear", financialYear) :
                new ObjectParameter("FinancialYear", typeof(string));
    
            var loginNameParameter = loginName != null ?
                new ObjectParameter("LoginName", loginName) :
                new ObjectParameter("LoginName", typeof(string));
    
            var lastUpDTOnParameter = lastUpDTOn.HasValue ?
                new ObjectParameter("LastUpDTOn", lastUpDTOn) :
                new ObjectParameter("LastUpDTOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UpdateEntryGatePass", entryGatePassIdParameter, entryGatePassNumberParameter, entryGatePassDateParameter, courierCompanyIdParameter, flightNumberParameter, flightDateParameter, timeofDepartureParameter, noOfBagsParameter, noOfShipsParameter, noOfPackagesParameter, entryWeightParameter, cSB3Parameter, cSB4Parameter, entryPersonStaffParameter, vehicleNumberParameter, terminalCodeParameter, financialYearParameter, loginNameParameter, lastUpDTOnParameter);
        }
    
        public virtual ObjectResult<string> UpdateForwardInwardDetails(Nullable<int> forwardingId, Nullable<int> onHoldId, Nullable<decimal> weight, string remarks, string supervisorName, string terminalCode, string loginName, Nullable<System.DateTime> lastUpDtOn)
        {
            var forwardingIdParameter = forwardingId.HasValue ?
                new ObjectParameter("ForwardingId", forwardingId) :
                new ObjectParameter("ForwardingId", typeof(int));
    
            var onHoldIdParameter = onHoldId.HasValue ?
                new ObjectParameter("OnHoldId", onHoldId) :
                new ObjectParameter("OnHoldId", typeof(int));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var supervisorNameParameter = supervisorName != null ?
                new ObjectParameter("SupervisorName", supervisorName) :
                new ObjectParameter("SupervisorName", typeof(string));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var loginNameParameter = loginName != null ?
                new ObjectParameter("LoginName", loginName) :
                new ObjectParameter("LoginName", typeof(string));
    
            var lastUpDtOnParameter = lastUpDtOn.HasValue ?
                new ObjectParameter("LastUpDtOn", lastUpDtOn) :
                new ObjectParameter("LastUpDtOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UpdateForwardInwardDetails", forwardingIdParameter, onHoldIdParameter, weightParameter, remarksParameter, supervisorNameParameter, terminalCodeParameter, loginNameParameter, lastUpDtOnParameter);
        }
    
        public virtual ObjectResult<string> UpdateInwardDetails(Nullable<int> onHoldId, Nullable<int> onHoldGPId, Nullable<decimal> weight, string remarks, string supervisorName, string terminalCode, string loginName, Nullable<System.DateTime> lastUpDtOn)
        {
            var onHoldIdParameter = onHoldId.HasValue ?
                new ObjectParameter("OnHoldId", onHoldId) :
                new ObjectParameter("OnHoldId", typeof(int));
    
            var onHoldGPIdParameter = onHoldGPId.HasValue ?
                new ObjectParameter("OnHoldGPId", onHoldGPId) :
                new ObjectParameter("OnHoldGPId", typeof(int));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var supervisorNameParameter = supervisorName != null ?
                new ObjectParameter("SupervisorName", supervisorName) :
                new ObjectParameter("SupervisorName", typeof(string));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var loginNameParameter = loginName != null ?
                new ObjectParameter("LoginName", loginName) :
                new ObjectParameter("LoginName", typeof(string));
    
            var lastUpDtOnParameter = lastUpDtOn.HasValue ?
                new ObjectParameter("LastUpDtOn", lastUpDtOn) :
                new ObjectParameter("LastUpDtOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UpdateInwardDetails", onHoldIdParameter, onHoldGPIdParameter, weightParameter, remarksParameter, supervisorNameParameter, terminalCodeParameter, loginNameParameter, lastUpDtOnParameter);
        }
    
        public virtual int UpdateOnHoldMemoDetails(Nullable<long> onHoldId, string hAWBNO, string terminalCode, string loginName)
        {
            var onHoldIdParameter = onHoldId.HasValue ?
                new ObjectParameter("OnHoldId", onHoldId) :
                new ObjectParameter("OnHoldId", typeof(long));
    
            var hAWBNOParameter = hAWBNO != null ?
                new ObjectParameter("HAWBNO", hAWBNO) :
                new ObjectParameter("HAWBNO", typeof(string));
    
            var terminalCodeParameter = terminalCode != null ?
                new ObjectParameter("TerminalCode", terminalCode) :
                new ObjectParameter("TerminalCode", typeof(string));
    
            var loginNameParameter = loginName != null ?
                new ObjectParameter("LoginName", loginName) :
                new ObjectParameter("LoginName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateOnHoldMemoDetails", onHoldIdParameter, hAWBNOParameter, terminalCodeParameter, loginNameParameter);
        }
    
        public virtual ObjectResult<string> UpdateReceiptData(Nullable<int> receiptId, Nullable<System.DateTime> receiptDate, Nullable<int> courierCompanyId, string remarks, Nullable<int> receiptTypeId, string flightNumber, Nullable<System.DateTime> flightDate, string userName, ObjectParameter output)
        {
            var receiptIdParameter = receiptId.HasValue ?
                new ObjectParameter("ReceiptId", receiptId) :
                new ObjectParameter("ReceiptId", typeof(int));
    
            var receiptDateParameter = receiptDate.HasValue ?
                new ObjectParameter("ReceiptDate", receiptDate) :
                new ObjectParameter("ReceiptDate", typeof(System.DateTime));
    
            var courierCompanyIdParameter = courierCompanyId.HasValue ?
                new ObjectParameter("CourierCompanyId", courierCompanyId) :
                new ObjectParameter("CourierCompanyId", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var receiptTypeIdParameter = receiptTypeId.HasValue ?
                new ObjectParameter("ReceiptTypeId", receiptTypeId) :
                new ObjectParameter("ReceiptTypeId", typeof(int));
    
            var flightNumberParameter = flightNumber != null ?
                new ObjectParameter("FlightNumber", flightNumber) :
                new ObjectParameter("FlightNumber", typeof(string));
    
            var flightDateParameter = flightDate.HasValue ?
                new ObjectParameter("FlightDate", flightDate) :
                new ObjectParameter("FlightDate", typeof(System.DateTime));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UpdateReceiptData", receiptIdParameter, receiptDateParameter, courierCompanyIdParameter, remarksParameter, receiptTypeIdParameter, flightNumberParameter, flightDateParameter, userNameParameter, output);
        }
    
        public virtual ObjectResult<GetImp_Form1Hst_090220161_Result> GetImp_Form1Hst_090220161(Nullable<int> form1Id)
        {
            var form1IdParameter = form1Id.HasValue ?
                new ObjectParameter("Form1Id", form1Id) :
                new ObjectParameter("Form1Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetImp_Form1Hst_090220161_Result>("GetImp_Form1Hst_090220161", form1IdParameter);
        }
    
        public virtual ObjectResult<GetImp_Form1Hst_090220162_Result> GetImp_Form1Hst_090220162(Nullable<int> form1Id)
        {
            var form1IdParameter = form1Id.HasValue ?
                new ObjectParameter("Form1Id", form1Id) :
                new ObjectParameter("Form1Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetImp_Form1Hst_090220162_Result>("GetImp_Form1Hst_090220162", form1IdParameter);
        }
    
        public virtual ObjectResult<GetImp_Form1Hst_090220163_Result> GetImp_Form1Hst_090220163(Nullable<int> form1Id)
        {
            var form1IdParameter = form1Id.HasValue ?
                new ObjectParameter("Form1Id", form1Id) :
                new ObjectParameter("Form1Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetImp_Form1Hst_090220163_Result>("GetImp_Form1Hst_090220163", form1IdParameter);
        }
    
        public virtual ObjectResult<GetImp_Form1Hst_090220164_Result> GetImp_Form1Hst_090220164(Nullable<int> form1Id)
        {
            var form1IdParameter = form1Id.HasValue ?
                new ObjectParameter("Form1Id", form1Id) :
                new ObjectParameter("Form1Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetImp_Form1Hst_090220164_Result>("GetImp_Form1Hst_090220164", form1IdParameter);
        }
    
        public virtual ObjectResult<GetImp_Form1Hst_090220165_Result> GetImp_Form1Hst_090220165(Nullable<int> form1Id)
        {
            var form1IdParameter = form1Id.HasValue ?
                new ObjectParameter("Form1Id", form1Id) :
                new ObjectParameter("Form1Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetImp_Form1Hst_090220165_Result>("GetImp_Form1Hst_090220165", form1IdParameter);
        }
    }
}
